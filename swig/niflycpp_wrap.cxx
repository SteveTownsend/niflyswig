/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_niflycpp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_niflycpp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_niflycpp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "Animation.hpp"
#include "BasicTypes.hpp"
#include "bhk.hpp"
#include "ExtraData.hpp"
#include "Factory.hpp"
#include "Geometry.hpp"
#include "KDMatcher.hpp"
#include "Keys.hpp"
#include "NifFile.hpp"
#include "NifUtil.hpp"
#include "Nodes.hpp"
#include "Object3d.hpp"
#include "Objects.hpp"
#include "Particles.hpp"
#include "Shaders.hpp"
#include "Skin.hpp"
#include "VertexData.hpp"

using namespace nifly;


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< uint16_t > *new_std_vector_Sl_uint16_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned short >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned short >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned short std_vector_Sl_uint16_t_Sg__getitemcopy(std::vector< uint16_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned short >::value_type const &std_vector_Sl_uint16_t_Sg__getitem(std::vector< uint16_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__setitem(std::vector< uint16_t > *self,int index,unsigned short const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__AddRange(std::vector< uint16_t > *self,std::vector< unsigned short > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned short > *std_vector_Sl_uint16_t_Sg__GetRange(std::vector< uint16_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned short >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__Insert(std::vector< uint16_t > *self,int index,unsigned short const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__InsertRange(std::vector< uint16_t > *self,int index,std::vector< unsigned short > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__RemoveAt(std::vector< uint16_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__RemoveRange(std::vector< uint16_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned short > *std_vector_Sl_uint16_t_Sg__Repeat(unsigned short const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned short >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__Reverse__SWIG_0(std::vector< uint16_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__Reverse__SWIG_1(std::vector< uint16_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__SetRange(std::vector< uint16_t > *self,int index,std::vector< unsigned short > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint16_t_Sg__Contains(std::vector< uint16_t > *self,unsigned short const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint16_t_Sg__IndexOf(std::vector< uint16_t > *self,unsigned short const &value){
        int index = -1;
        std::vector< unsigned short >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint16_t_Sg__LastIndexOf(std::vector< uint16_t > *self,unsigned short const &value){
        int index = -1;
        std::vector< unsigned short >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint16_t_Sg__Remove(std::vector< uint16_t > *self,unsigned short const &value){
        std::vector< unsigned short >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< uint32_t > *new_std_vector_Sl_uint32_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned int std_vector_Sl_uint32_t_Sg__getitemcopy(std::vector< uint32_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_uint32_t_Sg__getitem(std::vector< uint32_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__setitem(std::vector< uint32_t > *self,int index,unsigned int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__AddRange(std::vector< uint32_t > *self,std::vector< unsigned int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_uint32_t_Sg__GetRange(std::vector< uint32_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__Insert(std::vector< uint32_t > *self,int index,unsigned int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__InsertRange(std::vector< uint32_t > *self,int index,std::vector< unsigned int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__RemoveAt(std::vector< uint32_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__RemoveRange(std::vector< uint32_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_uint32_t_Sg__Repeat(unsigned int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned int >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__Reverse__SWIG_0(std::vector< uint32_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__Reverse__SWIG_1(std::vector< uint32_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__SetRange(std::vector< uint32_t > *self,int index,std::vector< unsigned int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint32_t_Sg__Contains(std::vector< uint32_t > *self,unsigned int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint32_t_Sg__IndexOf(std::vector< uint32_t > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint32_t_Sg__LastIndexOf(std::vector< uint32_t > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint32_t_Sg__Remove(std::vector< uint32_t > *self,unsigned int const &value){
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< uint64_t > *new_std_vector_Sl_uint64_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned long long >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned long long >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned long long std_vector_Sl_uint64_t_Sg__getitemcopy(std::vector< uint64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned long long >::value_type const &std_vector_Sl_uint64_t_Sg__getitem(std::vector< uint64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__setitem(std::vector< uint64_t > *self,int index,unsigned long long const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__AddRange(std::vector< uint64_t > *self,std::vector< unsigned long long > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned long long > *std_vector_Sl_uint64_t_Sg__GetRange(std::vector< uint64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned long long >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__Insert(std::vector< uint64_t > *self,int index,unsigned long long const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__InsertRange(std::vector< uint64_t > *self,int index,std::vector< unsigned long long > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__RemoveAt(std::vector< uint64_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__RemoveRange(std::vector< uint64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned long long > *std_vector_Sl_uint64_t_Sg__Repeat(unsigned long long const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned long long >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__Reverse__SWIG_0(std::vector< uint64_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__Reverse__SWIG_1(std::vector< uint64_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__SetRange(std::vector< uint64_t > *self,int index,std::vector< unsigned long long > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint64_t_Sg__Contains(std::vector< uint64_t > *self,unsigned long long const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint64_t_Sg__IndexOf(std::vector< uint64_t > *self,unsigned long long const &value){
        int index = -1;
        std::vector< unsigned long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint64_t_Sg__LastIndexOf(std::vector< uint64_t > *self,unsigned long long const &value){
        int index = -1;
        std::vector< unsigned long long >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint64_t_Sg__Remove(std::vector< uint64_t > *self,unsigned long long const &value){
        std::vector< unsigned long long >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(int capacity){
        std::vector< float >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< float >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN float std_vector_Sl_float_Sg__getitemcopy(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg__getitem(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__setitem(std::vector< float > *self,int index,float const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__AddRange(std::vector< float > *self,std::vector< float > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__GetRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< float >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Insert(std::vector< float > *self,int index,float const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__InsertRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveAt(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__Repeat(float const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< float >(count, value);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_0(std::vector< float > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_1(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__SetRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Contains(std::vector< float > *self,float const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_float_Sg__IndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_float_Sg__LastIndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Remove(std::vector< float > *self,float const &value){
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< nifly::NiStringRef * > *new_std_vector_Sl_nifly_NiStringRef_Sm__Sg___SWIG_2(int capacity){
        std::vector< nifly::NiStringRef * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< nifly::NiStringRef * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN nifly::NiStringRef *std_vector_Sl_nifly_NiStringRef_Sm__Sg__getitemcopy(std::vector< nifly::NiStringRef * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< nifly::NiStringRef * >::value_type const &std_vector_Sl_nifly_NiStringRef_Sm__Sg__getitem(std::vector< nifly::NiStringRef * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiStringRef_Sm__Sg__setitem(std::vector< nifly::NiStringRef * > *self,int index,nifly::NiStringRef *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiStringRef_Sm__Sg__AddRange(std::vector< nifly::NiStringRef * > *self,std::vector< nifly::NiStringRef * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< nifly::NiStringRef * > *std_vector_Sl_nifly_NiStringRef_Sm__Sg__GetRange(std::vector< nifly::NiStringRef * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< nifly::NiStringRef * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_nifly_NiStringRef_Sm__Sg__Insert(std::vector< nifly::NiStringRef * > *self,int index,nifly::NiStringRef *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiStringRef_Sm__Sg__InsertRange(std::vector< nifly::NiStringRef * > *self,int index,std::vector< nifly::NiStringRef * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiStringRef_Sm__Sg__RemoveAt(std::vector< nifly::NiStringRef * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiStringRef_Sm__Sg__RemoveRange(std::vector< nifly::NiStringRef * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< nifly::NiStringRef * > *std_vector_Sl_nifly_NiStringRef_Sm__Sg__Repeat(nifly::NiStringRef *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< nifly::NiStringRef * >(count, value);
      }
SWIGINTERN void std_vector_Sl_nifly_NiStringRef_Sm__Sg__Reverse__SWIG_0(std::vector< nifly::NiStringRef * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_nifly_NiStringRef_Sm__Sg__Reverse__SWIG_1(std::vector< nifly::NiStringRef * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_nifly_NiStringRef_Sm__Sg__SetRange(std::vector< nifly::NiStringRef * > *self,int index,std::vector< nifly::NiStringRef * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_nifly_NiStringRef_Sm__Sg__Contains(std::vector< nifly::NiStringRef * > *self,nifly::NiStringRef *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_nifly_NiStringRef_Sm__Sg__IndexOf(std::vector< nifly::NiStringRef * > *self,nifly::NiStringRef *const &value){
        int index = -1;
        std::vector< nifly::NiStringRef * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_nifly_NiStringRef_Sm__Sg__LastIndexOf(std::vector< nifly::NiStringRef * > *self,nifly::NiStringRef *const &value){
        int index = -1;
        std::vector< nifly::NiStringRef * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_nifly_NiStringRef_Sm__Sg__Remove(std::vector< nifly::NiStringRef * > *self,nifly::NiStringRef *const &value){
        std::vector< nifly::NiStringRef * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *new_std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg___SWIG_2(int capacity){
        std::vector< nifly::NiBlockRef< nifly::NiAVObject > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< nifly::NiBlockRef< nifly::NiAVObject > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN nifly::NiBlockRef< nifly::NiAVObject > std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__getitemcopy(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::value_type const &std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__getitem(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__setitem(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index,nifly::NiBlockRef< nifly::NiAVObject > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__AddRange(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__GetRange(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< nifly::NiBlockRef< nifly::NiAVObject > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__Insert(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index,nifly::NiBlockRef< nifly::NiAVObject > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__InsertRange(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index,std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__RemoveAt(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__RemoveRange(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__Repeat(nifly::NiBlockRef< nifly::NiAVObject > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< nifly::NiBlockRef< nifly::NiAVObject > >(count, value);
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__Reverse__SWIG_0(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__Reverse__SWIG_1(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__SetRange(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *self,int index,std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< nifly::NiBlockRef< nifly::NiProperty > > *new_std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg___SWIG_2(int capacity){
        std::vector< nifly::NiBlockRef< nifly::NiProperty > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< nifly::NiBlockRef< nifly::NiProperty > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN nifly::NiBlockRef< nifly::NiProperty > std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__getitemcopy(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< nifly::NiBlockRef< nifly::NiProperty > >::value_type const &std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__getitem(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__setitem(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index,nifly::NiBlockRef< nifly::NiProperty > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__AddRange(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,std::vector< nifly::NiBlockRef< nifly::NiProperty > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< nifly::NiBlockRef< nifly::NiProperty > > *std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__GetRange(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< nifly::NiBlockRef< nifly::NiProperty > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__Insert(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index,nifly::NiBlockRef< nifly::NiProperty > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__InsertRange(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index,std::vector< nifly::NiBlockRef< nifly::NiProperty > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__RemoveAt(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__RemoveRange(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< nifly::NiBlockRef< nifly::NiProperty > > *std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__Repeat(nifly::NiBlockRef< nifly::NiProperty > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< nifly::NiBlockRef< nifly::NiProperty > >(count, value);
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__Reverse__SWIG_0(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__Reverse__SWIG_1(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__SetRange(std::vector< nifly::NiBlockRef< nifly::NiProperty > > *self,int index,std::vector< nifly::NiBlockRef< nifly::NiProperty > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_Clear(void * jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_Add(void * jarg1, unsigned short jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned short const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_vectoru16_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_vectoru16_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (std::vector< unsigned short >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectoru16__SWIG_0() {
  void * jresult ;
  std::vector< uint16_t > *result = 0 ;
  
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectoru16__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< uint16_t > *arg1 = 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >((std::vector< uint16_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectoru16__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint16_t > *)new_std_vector_Sl_uint16_t_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_vectoru16_getitemcopy(void * jarg1, int jarg2) {
  unsigned short jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned short)std_vector_Sl_uint16_t_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_vectoru16_getitem(void * jarg1, int jarg2) {
  unsigned short jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *result = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned short >::value_type *) &std_vector_Sl_uint16_t_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_setitem(void * jarg1, int jarg2, unsigned short jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint16_t_Sg__setitem(arg1,arg2,(unsigned short const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_AddRange(void * jarg1, void * jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short > *arg2 = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (std::vector< unsigned short > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned short > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint16_t_Sg__AddRange(arg1,(std::vector< unsigned short > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_vectoru16_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned short > *result = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned short > *)std_vector_Sl_uint16_t_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_Insert(void * jarg1, int jarg2, unsigned short jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint16_t_Sg__Insert(arg1,arg2,(unsigned short const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short > *arg3 = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned short > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned short > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint16_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned short > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_RemoveAt(void * jarg1, int jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint16_t_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint16_t_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_vectoru16_Repeat(unsigned short jarg1, int jarg2) {
  void * jresult ;
  unsigned short *arg1 = 0 ;
  int arg2 ;
  unsigned short temp1 ;
  std::vector< unsigned short > *result = 0 ;
  
  temp1 = (unsigned short)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned short > *)std_vector_Sl_uint16_t_Sg__Repeat((unsigned short const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_Reverse__SWIG_0(void * jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  std_vector_Sl_uint16_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint16_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru16_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short > *arg3 = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned short > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned short > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint16_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned short > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectoru16_Contains(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  bool result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint16_t_Sg__Contains(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_vectoru16_IndexOf(void * jarg1, unsigned short jarg2) {
  int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  int result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint16_t_Sg__IndexOf(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_vectoru16_LastIndexOf(void * jarg1, unsigned short jarg2) {
  int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  int result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint16_t_Sg__LastIndexOf(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectoru16_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  bool result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint16_t_Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_vectoru16(void * jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_Clear(void * jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_Add(void * jarg1, unsigned int jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_vectoru32_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_vectoru32_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectoru32__SWIG_0() {
  void * jresult ;
  std::vector< uint32_t > *result = 0 ;
  
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectoru32__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< uint32_t > *arg1 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >((std::vector< uint32_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectoru32__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint32_t > *)new_std_vector_Sl_uint32_t_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectoru32_getitemcopy(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  unsigned int result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned int)std_vector_Sl_uint32_t_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectoru32_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_uint32_t_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint32_t_Sg__setitem(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_AddRange(void * jarg1, void * jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (std::vector< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint32_t_Sg__AddRange(arg1,(std::vector< unsigned int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_vectoru32_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned int > *result = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned int > *)std_vector_Sl_uint32_t_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_Insert(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint32_t_Sg__Insert(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint32_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_RemoveAt(void * jarg1, int jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint32_t_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint32_t_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_vectoru32_Repeat(unsigned int jarg1, int jarg2) {
  void * jresult ;
  unsigned int *arg1 = 0 ;
  int arg2 ;
  unsigned int temp1 ;
  std::vector< unsigned int > *result = 0 ;
  
  temp1 = (unsigned int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int > *)std_vector_Sl_uint32_t_Sg__Repeat((unsigned int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_Reverse__SWIG_0(void * jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  std_vector_Sl_uint32_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint32_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru32_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint32_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectoru32_Contains(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint32_t_Sg__Contains(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_vectoru32_IndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint32_t_Sg__IndexOf(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_vectoru32_LastIndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint32_t_Sg__LastIndexOf(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectoru32_Remove(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint32_t_Sg__Remove(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_vectoru32(void * jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (std::vector< uint32_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_Clear(void * jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_Add(void * jarg1, unsigned long long jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned long long const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_vectoru64_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  result = ((std::vector< uint64_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_vectoru64_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long long >::size_type result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  result = ((std::vector< uint64_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long long >::size_type arg2 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (std::vector< unsigned long long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectoru64__SWIG_0() {
  void * jresult ;
  std::vector< uint64_t > *result = 0 ;
  
  result = (std::vector< uint64_t > *)new std::vector< uint64_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectoru64__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< uint64_t > *arg1 = 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint64_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint64_t > *)new std::vector< uint64_t >((std::vector< uint64_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectoru64__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint64_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint64_t > *)new_std_vector_Sl_uint64_t_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_nifly_vectoru64_getitemcopy(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long long result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned long long)std_vector_Sl_uint64_t_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_nifly_vectoru64_getitem(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long >::value_type *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long long >::value_type *) &std_vector_Sl_uint64_t_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_setitem(void * jarg1, int jarg2, unsigned long long jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint64_t_Sg__setitem(arg1,arg2,(unsigned long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_AddRange(void * jarg1, void * jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long long > *arg2 = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (std::vector< unsigned long long > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint64_t_Sg__AddRange(arg1,(std::vector< unsigned long long > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_vectoru64_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned long long > *result = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned long long > *)std_vector_Sl_uint64_t_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_Insert(void * jarg1, int jarg2, unsigned long long jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned long long)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint64_t_Sg__Insert(arg1,arg2,(unsigned long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long > *arg3 = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint64_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_RemoveAt(void * jarg1, int jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint64_t_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint64_t_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_vectoru64_Repeat(unsigned long long jarg1, int jarg2) {
  void * jresult ;
  unsigned long long *arg1 = 0 ;
  int arg2 ;
  unsigned long long temp1 ;
  std::vector< unsigned long long > *result = 0 ;
  
  temp1 = (unsigned long long)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long long > *)std_vector_Sl_uint64_t_Sg__Repeat((unsigned long long const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_Reverse__SWIG_0(void * jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  std_vector_Sl_uint64_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint64_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectoru64_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned long long > *arg3 = 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned long long > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned long long > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint64_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned long long > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectoru64_Contains(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  bool result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint64_t_Sg__Contains(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_vectoru64_IndexOf(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  int result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint64_t_Sg__IndexOf(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_vectoru64_LastIndexOf(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  int result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint64_t_Sg__LastIndexOf(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectoru64_Remove(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  bool result;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  temp2 = (unsigned long long)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint64_t_Sg__Remove(arg1,(unsigned long long const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_vectoru64(void * jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  arg1 = (std::vector< uint64_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_Clear(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_Add(void * jarg1, float jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((float const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_vectorf_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_vectorf_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectorf__SWIG_0() {
  void * jresult ;
  std::vector< float > *result = 0 ;
  
  result = (std::vector< float > *)new std::vector< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectorf__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_vectorf__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_vectorf_getitemcopy(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float)std_vector_Sl_float_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_vectorf_getitem(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_setitem(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__setitem(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_AddRange(void * jarg1, void * jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_float_Sg__AddRange(arg1,(std::vector< float > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_vectorf_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_Insert(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__Insert(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__InsertRange(arg1,arg2,(std::vector< float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_RemoveAt(void * jarg1, int jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_float_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_vectorf_Repeat(float jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  std::vector< float > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__Repeat((float const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_Reverse__SWIG_0(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  std_vector_Sl_float_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_vectorf_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__SetRange(arg1,arg2,(std::vector< float > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectorf_Contains(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Contains(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_vectorf_IndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__IndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_vectorf_LastIndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__LastIndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_vectorf_Remove(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Remove(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_vectorf(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NIF_NPOS_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)nifly::NIF_NPOS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_nifly_NiCharMin_get() {
  char jresult ;
  char result;
  
  result = (char)nifly::NiCharMin;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_nifly_NiCharMax_get() {
  char jresult ;
  char result;
  
  result = (char)nifly::NiCharMax;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiByteMin_get() {
  unsigned char jresult ;
  uint8_t result;
  
  result = (uint8_t)nifly::NiByteMin;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiByteMax_get() {
  unsigned char jresult ;
  uint8_t result;
  
  result = (uint8_t)nifly::NiByteMax;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiUShortMin_get() {
  unsigned short jresult ;
  uint16_t result;
  
  result = (uint16_t)nifly::NiUShortMin;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiUShortMax_get() {
  unsigned short jresult ;
  uint16_t result;
  
  result = (uint16_t)nifly::NiUShortMax;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiUIntMin_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)nifly::NiUIntMin;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiUIntMax_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)nifly::NiUIntMax;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiFloatMin_get() {
  float jresult ;
  float result;
  
  result = (float)nifly::NiFloatMin;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiFloatMax_get() {
  float jresult ;
  float result;
  
  result = (float)nifly::NiFloatMax;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVec3Min_get() {
  void * jresult ;
  Vector3 result;
  
  result = (Vector3)nifly::NiVec3Min;
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVec4Min_get() {
  void * jresult ;
  Vector4 result;
  
  result = (Vector4)nifly::NiVec4Min;
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiVersion__SWIG_0() {
  void * jresult ;
  nifly::NiVersion *result = 0 ;
  
  result = (nifly::NiVersion *)new nifly::NiVersion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiVersion__SWIG_1(int jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  nifly::NiFileVersion arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  nifly::NiVersion *result = 0 ;
  
  arg1 = (nifly::NiFileVersion)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (nifly::NiVersion *)new nifly::NiVersion(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiVersion_ToFile(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  int jresult ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  nifly::NiFileVersion result;
  
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = (nifly::NiFileVersion)nifly::NiVersion::ToFile(arg1,arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVersion_ToArray(int jarg1) {
  void * jresult ;
  nifly::NiFileVersion arg1 ;
  std::vector< uint8_t > result;
  
  arg1 = (nifly::NiFileVersion)jarg1; 
  result = nifly::NiVersion::ToArray(arg1);
  jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVersion_GetVersionInfo(void * jarg1) {
  char * jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  std::string result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = ((nifly::NiVersion const *)arg1)->GetVersionInfo();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVersion_String(void * jarg1) {
  char * jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  std::string result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = ((nifly::NiVersion const *)arg1)->String();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiVersion_File(void * jarg1) {
  int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  nifly::NiFileVersion result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (nifly::NiFileVersion)((nifly::NiVersion const *)arg1)->File();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVersion_SetFile(void * jarg1, int jarg2) {
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  nifly::NiFileVersion arg2 ;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  arg2 = (nifly::NiFileVersion)jarg2; 
  (arg1)->SetFile(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_User(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (uint32_t)((nifly::NiVersion const *)arg1)->User();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVersion_SetUser(void * jarg1, unsigned int jarg2) {
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetUser(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_Stream(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (uint32_t)((nifly::NiVersion const *)arg1)->Stream();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVersion_SetStream(void * jarg1, unsigned int jarg2) {
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetStream(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_NDS(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (uint32_t)((nifly::NiVersion const *)arg1)->NDS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVersion_SetNDS(void * jarg1, unsigned int jarg2) {
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetNDS(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_IsBethesda(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  bool result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (bool)((nifly::NiVersion const *)arg1)->IsBethesda();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_IsOB(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  bool result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (bool)((nifly::NiVersion const *)arg1)->IsOB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_IsFO3(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  bool result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (bool)((nifly::NiVersion const *)arg1)->IsFO3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_IsSK(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  bool result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (bool)((nifly::NiVersion const *)arg1)->IsSK();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_IsSSE(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  bool result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (bool)((nifly::NiVersion const *)arg1)->IsSSE();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_IsFO4(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  bool result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (bool)((nifly::NiVersion const *)arg1)->IsFO4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiVersion_IsFO76(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  bool result;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  result = (bool)((nifly::NiVersion const *)arg1)->IsFO76();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVersion_getOB() {
  void * jresult ;
  nifly::NiVersion result;
  
  result = nifly::NiVersion::getOB();
  jresult = new nifly::NiVersion((const nifly::NiVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVersion_getFO3() {
  void * jresult ;
  nifly::NiVersion result;
  
  result = nifly::NiVersion::getFO3();
  jresult = new nifly::NiVersion((const nifly::NiVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVersion_getSK() {
  void * jresult ;
  nifly::NiVersion result;
  
  result = nifly::NiVersion::getSK();
  jresult = new nifly::NiVersion((const nifly::NiVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVersion_getSSE() {
  void * jresult ;
  nifly::NiVersion result;
  
  result = nifly::NiVersion::getSSE();
  jresult = new nifly::NiVersion((const nifly::NiVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVersion_getFO4() {
  void * jresult ;
  nifly::NiVersion result;
  
  result = nifly::NiVersion::getFO4();
  jresult = new nifly::NiVersion((const nifly::NiVersion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVersion_getFO76() {
  void * jresult ;
  nifly::NiVersion result;
  
  result = nifly::NiVersion::getFO76();
  jresult = new nifly::NiVersion((const nifly::NiVersion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiVersion(void * jarg1) {
  nifly::NiVersion *arg1 = (nifly::NiVersion *) 0 ;
  
  arg1 = (nifly::NiVersion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStreamBase__SWIG_0() {
  void * jresult ;
  nifly::NiStreamBase *result = 0 ;
  
  result = (nifly::NiStreamBase *)new nifly::NiStreamBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStreamBase__SWIG_1(void * jarg1) {
  void * jresult ;
  nifly::NiVersion arg1 ;
  nifly::NiVersion *argp1 ;
  nifly::NiStreamBase *result = 0 ;
  
  argp1 = (nifly::NiVersion *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null nifly::NiVersion", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (nifly::NiStreamBase *)new nifly::NiStreamBase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStreamBase_GetVersion__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiStreamBase *arg1 = (nifly::NiStreamBase *) 0 ;
  nifly::NiVersion *result = 0 ;
  
  arg1 = (nifly::NiStreamBase *)jarg1; 
  result = (nifly::NiVersion *) &(arg1)->GetVersion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiStreamBase(void * jarg1) {
  nifly::NiStreamBase *arg1 = (nifly::NiStreamBase *) 0 ;
  
  arg1 = (nifly::NiStreamBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiIStream__SWIG_0(void * jarg1) {
  void * jresult ;
  std::istream *arg1 = (std::istream *) 0 ;
  nifly::NiIStream *result = 0 ;
  
  arg1 = (std::istream *)jarg1; 
  result = (nifly::NiIStream *)new nifly::NiIStream(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiIStream__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::istream *arg1 = (std::istream *) 0 ;
  nifly::NiVersion arg2 ;
  nifly::NiVersion *argp2 ;
  nifly::NiIStream *result = 0 ;
  
  arg1 = (std::istream *)jarg1; 
  argp2 = (nifly::NiVersion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null nifly::NiVersion", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (nifly::NiIStream *)new nifly::NiIStream(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiIStream_read(void * jarg1, char * jarg2, void * jarg3) {
  nifly::NiIStream *arg1 = (nifly::NiIStream *) 0 ;
  char *arg2 = (char *) 0 ;
  std::streamsize arg3 ;
  std::streamsize *argp3 ;
  
  arg1 = (nifly::NiIStream *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (std::streamsize *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::streamsize", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->read(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiIStream_getline(void * jarg1, char * jarg2, void * jarg3) {
  nifly::NiIStream *arg1 = (nifly::NiIStream *) 0 ;
  char *arg2 = (char *) 0 ;
  std::streamsize arg3 ;
  std::streamsize *argp3 ;
  
  arg1 = (nifly::NiIStream *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (std::streamsize *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::streamsize", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->getline(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiIStream(void * jarg1) {
  nifly::NiIStream *arg1 = (nifly::NiIStream *) 0 ;
  
  arg1 = (nifly::NiIStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiOStream(void * jarg1, void * jarg2) {
  void * jresult ;
  std::ostream *arg1 = (std::ostream *) 0 ;
  nifly::NiVersion arg2 ;
  nifly::NiVersion *argp2 ;
  nifly::NiOStream *result = 0 ;
  
  arg1 = (std::ostream *)jarg1; 
  argp2 = (nifly::NiVersion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null nifly::NiVersion", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (nifly::NiOStream *)new nifly::NiOStream(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiOStream_write(void * jarg1, char * jarg2, void * jarg3) {
  nifly::NiOStream *arg1 = (nifly::NiOStream *) 0 ;
  char *arg2 = (char *) 0 ;
  std::streamsize arg3 ;
  std::streamsize *argp3 ;
  
  arg1 = (nifly::NiOStream *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (std::streamsize *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::streamsize", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->write((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiOStream_writeline(void * jarg1, char * jarg2, void * jarg3) {
  nifly::NiOStream *arg1 = (nifly::NiOStream *) 0 ;
  char *arg2 = (char *) 0 ;
  std::streamsize arg3 ;
  std::streamsize *argp3 ;
  
  arg1 = (nifly::NiOStream *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (std::streamsize *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::streamsize", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->writeline((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiOStream_tellp(void * jarg1) {
  void * jresult ;
  nifly::NiOStream *arg1 = (nifly::NiOStream *) 0 ;
  std::streampos result;
  
  arg1 = (nifly::NiOStream *)jarg1; 
  result = (arg1)->tellp();
  jresult = new std::streampos((const std::streampos &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiOStream_InitBlockSize(void * jarg1) {
  nifly::NiOStream *arg1 = (nifly::NiOStream *) 0 ;
  
  arg1 = (nifly::NiOStream *)jarg1; 
  (arg1)->InitBlockSize();
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiOStream_GetBlockSize(void * jarg1) {
  int jresult ;
  nifly::NiOStream *arg1 = (nifly::NiOStream *) 0 ;
  int result;
  
  arg1 = (nifly::NiOStream *)jarg1; 
  result = (int)(arg1)->GetBlockSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiOStream(void * jarg1) {
  nifly::NiOStream *arg1 = (nifly::NiOStream *) 0 ;
  
  arg1 = (nifly::NiOStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStreamReversible(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  nifly::NiIStream *arg1 = (nifly::NiIStream *) 0 ;
  nifly::NiOStream *arg2 = (nifly::NiOStream *) 0 ;
  nifly::NiStreamReversible::Mode arg3 ;
  nifly::NiStreamReversible *result = 0 ;
  
  arg1 = (nifly::NiIStream *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2; 
  arg3 = (nifly::NiStreamReversible::Mode)jarg3; 
  result = (nifly::NiStreamReversible *)new nifly::NiStreamReversible(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStreamReversible_SetMode(void * jarg1, int jarg2) {
  nifly::NiStreamReversible *arg1 = (nifly::NiStreamReversible *) 0 ;
  nifly::NiStreamReversible::Mode arg2 ;
  
  arg1 = (nifly::NiStreamReversible *)jarg1; 
  arg2 = (nifly::NiStreamReversible::Mode)jarg2; 
  (arg1)->SetMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiStreamReversible_GetMode(void * jarg1) {
  int jresult ;
  nifly::NiStreamReversible *arg1 = (nifly::NiStreamReversible *) 0 ;
  nifly::NiStreamReversible::Mode result;
  
  arg1 = (nifly::NiStreamReversible *)jarg1; 
  result = (nifly::NiStreamReversible::Mode)((nifly::NiStreamReversible const *)arg1)->GetMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStreamReversible_GetVersion__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiStreamReversible *arg1 = (nifly::NiStreamReversible *) 0 ;
  nifly::NiVersion *result = 0 ;
  
  arg1 = (nifly::NiStreamReversible *)jarg1; 
  result = (nifly::NiVersion *) &(arg1)->GetVersion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStreamReversible_Sync(void * jarg1, char * jarg2, void * jarg3) {
  nifly::NiStreamReversible *arg1 = (nifly::NiStreamReversible *) 0 ;
  char *arg2 = (char *) 0 ;
  std::streamsize arg3 ;
  std::streamsize *argp3 ;
  
  arg1 = (nifly::NiStreamReversible *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (std::streamsize *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::streamsize", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->Sync(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStreamReversible_SyncLine(void * jarg1, char * jarg2, void * jarg3) {
  nifly::NiStreamReversible *arg1 = (nifly::NiStreamReversible *) 0 ;
  char *arg2 = (char *) 0 ;
  std::streamsize arg3 ;
  std::streamsize *argp3 ;
  
  arg1 = (nifly::NiStreamReversible *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (std::streamsize *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::streamsize", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SyncLine(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStreamReversible_SyncHalf(void * jarg1, void * jarg2) {
  nifly::NiStreamReversible *arg1 = (nifly::NiStreamReversible *) 0 ;
  float *arg2 = 0 ;
  
  arg1 = (nifly::NiStreamReversible *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  (arg1)->SyncHalf(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStreamReversible_asWrite(void * jarg1) {
  void * jresult ;
  nifly::NiStreamReversible *arg1 = (nifly::NiStreamReversible *) 0 ;
  nifly::NiOStream *result = 0 ;
  
  arg1 = (nifly::NiStreamReversible *)jarg1; 
  result = (nifly::NiOStream *)(arg1)->asWrite();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStreamReversible_asRead(void * jarg1) {
  void * jresult ;
  nifly::NiStreamReversible *arg1 = (nifly::NiStreamReversible *) 0 ;
  nifly::NiIStream *result = 0 ;
  
  arg1 = (nifly::NiStreamReversible *)jarg1; 
  result = (nifly::NiIStream *)(arg1)->asRead();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiStreamReversible(void * jarg1) {
  nifly::NiStreamReversible *arg1 = (nifly::NiStreamReversible *) 0 ;
  
  arg1 = (nifly::NiStreamReversible *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiString__SWIG_0() {
  void * jresult ;
  nifly::NiString *result = 0 ;
  
  result = (nifly::NiString *)new nifly::NiString();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiString__SWIG_1(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  nifly::NiString *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  result = (nifly::NiString *)new nifly::NiString((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiString__SWIG_2(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  nifly::NiString *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (nifly::NiString *)new nifly::NiString((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiString_get__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiString *arg1 = (nifly::NiString *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (nifly::NiString *)jarg1; 
  result = (std::string *) &(arg1)->get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_NiString_length(void * jarg1) {
  unsigned long jresult ;
  nifly::NiString *arg1 = (nifly::NiString *) 0 ;
  size_t result;
  
  arg1 = (nifly::NiString *)jarg1; 
  result = ((nifly::NiString const *)arg1)->length();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiString_SetNullOutput__SWIG_0(void * jarg1, unsigned int jarg2) {
  nifly::NiString *arg1 = (nifly::NiString *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiString *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNullOutput(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiString_SetNullOutput__SWIG_1(void * jarg1) {
  nifly::NiString *arg1 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::NiString *)jarg1; 
  (arg1)->SetNullOutput();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiString_clear(void * jarg1) {
  nifly::NiString *arg1 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::NiString *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiString_Read(void * jarg1, void * jarg2, int jarg3) {
  nifly::NiString *arg1 = (nifly::NiString *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (nifly::NiString *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->Read(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiString_Write(void * jarg1, void * jarg2, int jarg3) {
  nifly::NiString *arg1 = (nifly::NiString *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (nifly::NiString *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->Write(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiString_Sync(void * jarg1, void * jarg2, int jarg3) {
  nifly::NiString *arg1 = (nifly::NiString *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (nifly::NiString *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->Sync(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiString(void * jarg1) {
  nifly::NiString *arg1 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::NiString *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStringRef__SWIG_0() {
  void * jresult ;
  nifly::NiStringRef *result = 0 ;
  
  result = (nifly::NiStringRef *)new nifly::NiStringRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStringRef__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  nifly::NiStringRef *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (nifly::NiStringRef *)new nifly::NiStringRef((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStringRef_get__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  result = (std::string *) &(arg1)->get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiStringRef_copy(void * jarg1) {
  char * jresult ;
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  std::string result;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  result = (arg1)->copy();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_NiStringRef_length(void * jarg1) {
  unsigned long jresult ;
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  size_t result;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  result = ((nifly::NiStringRef const *)arg1)->length();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiStringRef_GetIndex(void * jarg1) {
  int jresult ;
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  int result;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  result = (int)((nifly::NiStringRef const *)arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringRef_SetIndex(void * jarg1, int jarg2) {
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIndex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringRef_clear(void * jarg1) {
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringRef_Read(void * jarg1, void * jarg2) {
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Read(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringRef_Write(void * jarg1, void * jarg2) {
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Write(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringRef_Sync(void * jarg1, void * jarg2) {
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiStringRef(void * jarg1) {
  nifly::NiStringRef *arg1 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiStringRef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPlane_normal_set(void * jarg1, void * jarg2) {
  nifly::NiPlane *arg1 = (nifly::NiPlane *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiPlane *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPlane_normal_get(void * jarg1) {
  void * jresult ;
  nifly::NiPlane *arg1 = (nifly::NiPlane *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiPlane *)jarg1; 
  result =  ((arg1)->normal);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPlane_constant_set(void * jarg1, float jarg2) {
  nifly::NiPlane *arg1 = (nifly::NiPlane *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPlane *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->constant = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPlane_constant_get(void * jarg1) {
  float jresult ;
  nifly::NiPlane *arg1 = (nifly::NiPlane *) 0 ;
  float result;
  
  arg1 = (nifly::NiPlane *)jarg1; 
  result = (float) ((arg1)->constant);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPlane() {
  void * jresult ;
  nifly::NiPlane *result = 0 ;
  
  result = (nifly::NiPlane *)new nifly::NiPlane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPlane(void * jarg1) {
  nifly::NiPlane *arg1 = (nifly::NiPlane *) 0 ;
  
  arg1 = (nifly::NiPlane *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRef_index_set(void * jarg1, int jarg2) {
  nifly::NiRef *arg1 = (nifly::NiRef *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiRef *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiRef_index_get(void * jarg1) {
  int jresult ;
  nifly::NiRef *arg1 = (nifly::NiRef *) 0 ;
  int result;
  
  arg1 = (nifly::NiRef *)jarg1; 
  result = (int) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRef_Clear(void * jarg1) {
  nifly::NiRef *arg1 = (nifly::NiRef *) 0 ;
  
  arg1 = (nifly::NiRef *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiRef_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  nifly::NiRef *arg1 = (nifly::NiRef *) 0 ;
  bool result;
  
  arg1 = (nifly::NiRef *)jarg1; 
  result = (bool)((nifly::NiRef const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiRef() {
  void * jresult ;
  nifly::NiRef *result = 0 ;
  
  result = (nifly::NiRef *)new nifly::NiRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiRef(void * jarg1) {
  nifly::NiRef *arg1 = (nifly::NiRef *) 0 ;
  
  arg1 = (nifly::NiRef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiRefArray(void * jarg1) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiRefArray_GetSize(void * jarg1) {
  int jresult ;
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  int result;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  result = (int)((nifly::NiRefArray const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRefArray_SetKeepEmptyRefs__SWIG_0(void * jarg1, unsigned int jarg2) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetKeepEmptyRefs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRefArray_SetKeepEmptyRefs__SWIG_1(void * jarg1) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  (arg1)->SetKeepEmptyRefs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRefArray_Sync(void * jarg1, void * jarg2) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRefArray_AddBlockRef(void * jarg1, int jarg2) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AddBlockRef(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiRefArray_GetBlockRef(void * jarg1, int jarg2) {
  int jresult ;
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((nifly::NiRefArray const *)arg1)->GetBlockRef(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRefArray_SetBlockRef(void * jarg1, int jarg2, int jarg3) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBlockRef(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRefArray_RemoveBlockRef(void * jarg1, int jarg2) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveBlockRef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRefArray_GetIndices(void * jarg1, void * jarg2) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRefArray_GetIndexPtrs(void * jarg1, void * jarg2) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetIndexPtrs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRefArray_SetIndices(void * jarg1, void * jarg2) {
  nifly::NiRefArray *arg1 = (nifly::NiRefArray *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiRefArray *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->SetIndices((std::vector< int > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiObject(void * jarg1) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiObject_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiObject::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiObject_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObject_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObject_Get(void * jarg1, void * jarg2) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObject_Put(void * jarg1, void * jarg2) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Put(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObject_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObject_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObject_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObject_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiObject_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  nifly::NiObject *result = 0 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  result = (nifly::NiObject *)((nifly::NiObject const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiHeaderNiObject(void * jarg1) {
  nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *arg1 = (nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *) 0 ;
  
  arg1 = (nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeaderNiObject_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *arg1 = (nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *) 0 ;
  nifly::NiHeader *result = 0 ;
  
  arg1 = (nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *)jarg1; 
  result = (nifly::NiHeader *)((nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiHeaderNiObject() {
  void * jresult ;
  nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *result = 0 ;
  
  result = (nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *)new nifly::NiCloneable< nifly::NiHeader,nifly::NiObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiHeader() {
  void * jresult ;
  nifly::NiHeader *result = 0 ;
  
  result = (nifly::NiHeader *)new nifly::NiHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiHeader_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiHeader::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiHeader_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_Clear(void * jarg1) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiHeader_IsValid(void * jarg1) {
  unsigned int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  result = (bool)((nifly::NiHeader const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_GetVersion__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiVersion *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  result = (nifly::NiVersion *) &(arg1)->GetVersion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_SetVersion(void * jarg1, void * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion const & type is null", 0);
    return ;
  } 
  (arg1)->SetVersion((nifly::NiVersion const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiHeader_GetCreatorInfo(void * jarg1) {
  char * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  result = ((nifly::NiHeader const *)arg1)->GetCreatorInfo();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_SetCreatorInfo(void * jarg1, char * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetCreatorInfo((std::string const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiHeader_GetExportInfo(void * jarg1) {
  char * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  result = ((nifly::NiHeader const *)arg1)->GetExportInfo();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_SetExportInfo(void * jarg1, char * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetExportInfo((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_SetBlockReference(void * jarg1, void * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::vector< std::unique_ptr< nifly::NiObject > > *arg2 = (std::vector< std::unique_ptr< nifly::NiObject > > *) 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (std::vector< std::unique_ptr< nifly::NiObject > > *)jarg2; 
  (arg1)->SetBlockReference(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiHeader_GetNumBlocks(void * jarg1) {
  unsigned int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  result = (uint32_t)((nifly::NiHeader const *)arg1)->GetNumBlocks();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiHeader_GetBlockID(void * jarg1, void * jarg2) {
  int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiObject *arg2 = (nifly::NiObject *) 0 ;
  int result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiObject *)jarg2; 
  result = (int)((nifly::NiHeader const *)arg1)->GetBlockID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_DeleteBlock__SWIG_0(void * jarg1, int jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->DeleteBlock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_DeleteBlock__SWIG_1(void * jarg1, void * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiRef *arg2 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiRef const & type is null", 0);
    return ;
  } 
  (arg1)->DeleteBlock((nifly::NiRef const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_DeleteBlockByType__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DeleteBlockByType((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_DeleteBlockByType__SWIG_1(void * jarg1, char * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->DeleteBlockByType((std::string const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiHeader_AddBlock(void * jarg1, void * jarg2) {
  int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiObject *arg2 = (nifly::NiObject *) 0 ;
  int result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiObject *)jarg2; 
  result = (int)(arg1)->AddBlock(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiHeader_ReplaceBlock(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  nifly::NiObject *arg3 = (nifly::NiObject *) 0 ;
  int result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (nifly::NiObject *)jarg3; 
  result = (int)(arg1)->ReplaceBlock(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_SetBlockOrder(void * jarg1, void * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->SetBlockOrder(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_FixBlockAlignment(void * jarg1, void * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::vector< nifly::NiObject * > *arg2 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (std::vector< nifly::NiObject * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiObject * > const & type is null", 0);
    return ;
  } 
  (arg1)->FixBlockAlignment((std::vector< nifly::NiObject * > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_SwapBlocks(void * jarg1, int jarg2, int jarg3) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SwapBlocks(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiHeader_IsBlockReferenced(void * jarg1, int jarg2) {
  unsigned int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsBlockReferenced(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiHeader_GetBlockRefCount(void * jarg1, int jarg2) {
  int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetBlockRefCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiHeader_AddOrFindBlockTypeId(void * jarg1, char * jarg2) {
  unsigned short jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (uint16_t)(arg1)->AddOrFindBlockTypeId((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiHeader_GetBlockTypeStringById(void * jarg1, int jarg2) {
  char * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((nifly::NiHeader const *)arg1)->GetBlockTypeStringById(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiHeader_GetBlockTypeIndex(void * jarg1, int jarg2) {
  unsigned short jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  uint16_t result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)((nifly::NiHeader const *)arg1)->GetBlockTypeIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiHeader_GetBlockSize(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  uint32_t arg2 ;
  uint32_t result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (uint32_t)((nifly::NiHeader const *)arg1)->GetBlockSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_GetBlockSizeStreamPos(void * jarg1) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::streampos result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  result = ((nifly::NiHeader const *)arg1)->GetBlockSizeStreamPos();
  jresult = new std::streampos((const std::streampos &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_ResetBlockSizeStreamPos(void * jarg1) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  (arg1)->ResetBlockSizeStreamPos();
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiHeader_GetStringCount(void * jarg1) {
  int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  result = (int)((nifly::NiHeader const *)arg1)->GetStringCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiHeader_FindStringId(void * jarg1, char * jarg2) {
  int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)((nifly::NiHeader const *)arg1)->FindStringId((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiHeader_AddOrFindStringId__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->AddOrFindStringId((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiHeader_AddOrFindStringId__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->AddOrFindStringId((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiHeader_GetStringById(void * jarg1, int jarg2) {
  char * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((nifly::NiHeader const *)arg1)->GetStringById(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_SetStringById(void * jarg1, int jarg2, char * jarg3) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetStringById(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_ClearStrings(void * jarg1) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  (arg1)->ClearStrings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_UpdateMaxStringLength(void * jarg1) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  (arg1)->UpdateMaxStringLength();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_FillStringRefs(void * jarg1) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  (arg1)->FillStringRefs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_UpdateHeaderStrings(void * jarg1, unsigned int jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UpdateHeaderStrings(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_BlockDeleted(void * jarg1, int jarg2) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  arg2 = (int)jarg2; 
  nifly::NiHeader::BlockDeleted(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_BlockSwapped(void * jarg1, int jarg2, int jarg3) {
  nifly::NiObject *arg1 = (nifly::NiObject *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (nifly::NiObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  nifly::NiHeader::BlockSwapped(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_Get(void * jarg1, void * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiHeader_Put(void * jarg1, void * jarg2) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Put(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_NiNodeBlock__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  nifly::NiNode *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  result = (nifly::NiNode *)((nifly::NiHeader const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBlock< nifly::NiNode >(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_NiNodeBlock__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiBlockRef< nifly::NiNode > *arg2 = 0 ;
  nifly::NiNode *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiNode > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiNode > const & type is null", 0);
    return 0;
  } 
  result = (nifly::NiNode *)((nifly::NiHeader const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBlock< nifly::NiNode >((nifly::NiBlockRef< nifly::NiNode > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_NiNodeBlock__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiRef *arg2 = 0 ;
  nifly::NiNode *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiRef const & type is null", 0);
    return 0;
  } 
  result = (nifly::NiNode *)((nifly::NiHeader const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBlock< nifly::NiNode >((nifly::NiRef const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_NiAVObjectBlock__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  nifly::NiAVObject *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  result = (nifly::NiAVObject *)((nifly::NiHeader const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBlock< nifly::NiAVObject >(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_NiAVObjectBlock__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiBlockRef< nifly::NiAVObject > *arg2 = 0 ;
  nifly::NiAVObject *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiAVObject > const & type is null", 0);
    return 0;
  } 
  result = (nifly::NiAVObject *)((nifly::NiHeader const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBlock< nifly::NiAVObject >((nifly::NiBlockRef< nifly::NiAVObject > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_NiAVObjectBlock__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiRef *arg2 = 0 ;
  nifly::NiAVObject *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiRef const & type is null", 0);
    return 0;
  } 
  result = (nifly::NiAVObject *)((nifly::NiHeader const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBlock< nifly::NiAVObject >((nifly::NiRef const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_NiPropertyBlock__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  int arg2 ;
  nifly::NiProperty *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (int)jarg2; 
  result = (nifly::NiProperty *)((nifly::NiHeader const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBlock< nifly::NiProperty >(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_NiPropertyBlock__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiBlockRef< nifly::NiProperty > *arg2 = 0 ;
  nifly::NiProperty *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiProperty > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiProperty > const & type is null", 0);
    return 0;
  } 
  result = (nifly::NiProperty *)((nifly::NiHeader const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBlock< nifly::NiProperty >((nifly::NiBlockRef< nifly::NiProperty > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiHeader_NiPropertyBlock__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  nifly::NiRef *arg2 = 0 ;
  nifly::NiProperty *result = 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  arg2 = (nifly::NiRef *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiRef const & type is null", 0);
    return 0;
  } 
  result = (nifly::NiProperty *)((nifly::NiHeader const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBlock< nifly::NiProperty >((nifly::NiRef const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiHeader(void * jarg1) {
  nifly::NiHeader *arg1 = (nifly::NiHeader *) 0 ;
  
  arg1 = (nifly::NiHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiUnknownNiObject(void * jarg1) {
  nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *) 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiUnknownNiObject_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *) 0 ;
  nifly::NiUnknown *result = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *)jarg1; 
  result = (nifly::NiUnknown *)((nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUnknownNiObject_Get(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUnknownNiObject_Put(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Put(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiUnknownNiObject() {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *result = 0 ;
  
  result = (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *)new nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUnknown_data_set(void * jarg1, void * jarg2) {
  nifly::NiUnknown *arg1 = (nifly::NiUnknown *) 0 ;
  std::vector< char > *arg2 = (std::vector< char > *) 0 ;
  
  arg1 = (nifly::NiUnknown *)jarg1; 
  arg2 = (std::vector< char > *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiUnknown_data_get(void * jarg1) {
  void * jresult ;
  nifly::NiUnknown *arg1 = (nifly::NiUnknown *) 0 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (nifly::NiUnknown *)jarg1; 
  result = (std::vector< char > *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiUnknown__SWIG_0() {
  void * jresult ;
  nifly::NiUnknown *result = 0 ;
  
  result = (nifly::NiUnknown *)new nifly::NiUnknown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiUnknown__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  nifly::NiIStream *arg1 = 0 ;
  uint32_t arg2 ;
  nifly::NiUnknown *result = 0 ;
  
  arg1 = (nifly::NiIStream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return 0;
  } 
  arg2 = (uint32_t)jarg2; 
  result = (nifly::NiUnknown *)new nifly::NiUnknown(*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiUnknown__SWIG_2(unsigned int jarg1) {
  void * jresult ;
  uint32_t arg1 ;
  nifly::NiUnknown *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  result = (nifly::NiUnknown *)new nifly::NiUnknown(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUnknown_Sync(void * jarg1, void * jarg2) {
  nifly::NiUnknown *arg1 = (nifly::NiUnknown *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiUnknown *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiUnknown(void * jarg1) {
  nifly::NiUnknown *arg1 = (nifly::NiUnknown *) 0 ;
  
  arg1 = (nifly::NiUnknown *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiObjectNETNiObject(void * jarg1) {
  nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *) 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiObjectNETNiObject_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *) 0 ;
  nifly::NiObjectNET *result = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *)jarg1; 
  result = (nifly::NiObjectNET *)((nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNETNiObject_Get(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNETNiObject_Put(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Put(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiObjectNETNiObject() {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *result = 0 ;
  
  result = (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *)new nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNET_name_set(void * jarg1, void * jarg2) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiObjectNET_name_get(void * jarg1) {
  void * jresult ;
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNET_bBSLightingShaderProperty_set(void * jarg1, unsigned int jarg2) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bBSLightingShaderProperty = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiObjectNET_bBSLightingShaderProperty_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  bool result;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  result = (bool) ((arg1)->bBSLightingShaderProperty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNET_bslspShaderType_set(void * jarg1, unsigned int jarg2) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bslspShaderType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiObjectNET_bslspShaderType_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  result = (uint32_t) ((arg1)->bslspShaderType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNET_controllerRef_set(void * jarg1, void * jarg2) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  nifly::NiBlockRef< NiTimeController > *arg2 = (nifly::NiBlockRef< NiTimeController > *) 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  arg2 = (nifly::NiBlockRef< NiTimeController > *)jarg2; 
  if (arg1) (arg1)->controllerRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiObjectNET_controllerRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  nifly::NiBlockRef< NiTimeController > *result = 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  result = (nifly::NiBlockRef< NiTimeController > *)& ((arg1)->controllerRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNET_extraDataRefs_set(void * jarg1, void * jarg2) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  nifly::NiBlockRefArray< NiExtraData > *arg2 = (nifly::NiBlockRefArray< NiExtraData > *) 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< NiExtraData > *)jarg2; 
  if (arg1) (arg1)->extraDataRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiObjectNET_extraDataRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  nifly::NiBlockRefArray< NiExtraData > *result = 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  result = (nifly::NiBlockRefArray< NiExtraData > *)& ((arg1)->extraDataRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNET_Sync(void * jarg1, void * jarg2) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNET_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNET_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiObjectNET_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiObjectNET() {
  void * jresult ;
  nifly::NiObjectNET *result = 0 ;
  
  result = (nifly::NiObjectNET *)new nifly::NiObjectNET();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiObjectNET(void * jarg1) {
  nifly::NiObjectNET *arg1 = (nifly::NiObjectNET *) 0 ;
  
  arg1 = (nifly::NiObjectNET *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiAVObjectNiObjectNET(void * jarg1) {
  nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *arg1 = (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *) 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiAVObjectNiObjectNET_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *arg1 = (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *) 0 ;
  nifly::NiAVObject *result = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *)jarg1; 
  result = (nifly::NiAVObject *)((nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObjectNiObjectNET_Get(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *arg1 = (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObjectNiObjectNET_Put(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *arg1 = (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Put(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiAVObjectNiObjectNET() {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *result = 0 ;
  
  result = (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *)new nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObject_flags_set(void * jarg1, unsigned int jarg2) {
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiAVObject_flags_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  result = (uint32_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObject_transform_set(void * jarg1, void * jarg2) {
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  MatTransform arg2 ;
  MatTransform *argp2 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  argp2 = (MatTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MatTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->transform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiAVObject_transform_get(void * jarg1) {
  void * jresult ;
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  MatTransform result;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  result =  ((arg1)->transform);
  jresult = new MatTransform((const MatTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObject_propertyRefs_set(void * jarg1, void * jarg2) {
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  nifly::NiBlockRefArray< nifly::NiProperty > *arg2 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg2; 
  if (arg1) (arg1)->propertyRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiAVObject_propertyRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  nifly::NiBlockRefArray< nifly::NiProperty > *result = 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiProperty > *)& ((arg1)->propertyRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObject_collisionRef_set(void * jarg1, void * jarg2) {
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  nifly::NiBlockRef< nifly::NiCollisionObject > *arg2 = (nifly::NiBlockRef< nifly::NiCollisionObject > *) 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiCollisionObject > *)jarg2; 
  if (arg1) (arg1)->collisionRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiAVObject_collisionRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  nifly::NiBlockRef< nifly::NiCollisionObject > *result = 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiCollisionObject > *)& ((arg1)->collisionRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObject_Sync(void * jarg1, void * jarg2) {
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObject_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObject_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiAVObject_GetTransformToParent(void * jarg1) {
  void * jresult ;
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  MatTransform *result = 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  result = (MatTransform *) &((nifly::NiAVObject const *)arg1)->GetTransformToParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAVObject_SetTransformToParent(void * jarg1, void * jarg2) {
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  MatTransform *arg2 = 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  arg2 = (MatTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform const & type is null", 0);
    return ;
  } 
  (arg1)->SetTransformToParent((MatTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiAVObject() {
  void * jresult ;
  nifly::NiAVObject *result = 0 ;
  
  result = (nifly::NiAVObject *)new nifly::NiAVObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiAVObject(void * jarg1) {
  nifly::NiAVObject *arg1 = (nifly::NiAVObject *) 0 ;
  
  arg1 = (nifly::NiAVObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AVObject_name_set(void * jarg1, void * jarg2) {
  nifly::AVObject *arg1 = (nifly::AVObject *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::AVObject *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_AVObject_name_get(void * jarg1) {
  void * jresult ;
  nifly::AVObject *arg1 = (nifly::AVObject *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::AVObject *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AVObject_objectRef_set(void * jarg1, void * jarg2) {
  nifly::AVObject *arg1 = (nifly::AVObject *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::AVObject *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->objectRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_AVObject_objectRef_get(void * jarg1) {
  void * jresult ;
  nifly::AVObject *arg1 = (nifly::AVObject *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::AVObject *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiAVObject > *)& ((arg1)->objectRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_AVObject() {
  void * jresult ;
  nifly::AVObject *result = 0 ;
  
  result = (nifly::AVObject *)new nifly::AVObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_AVObject(void * jarg1) {
  nifly::AVObject *arg1 = (nifly::AVObject *) 0 ;
  
  arg1 = (nifly::AVObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiAVObjectPalette() {
  void * jresult ;
  nifly::NiAVObjectPalette *result = 0 ;
  
  result = (nifly::NiAVObjectPalette *)new nifly::NiAVObjectPalette();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiAVObjectPalette(void * jarg1) {
  nifly::NiAVObjectPalette *arg1 = (nifly::NiAVObjectPalette *) 0 ;
  
  arg1 = (nifly::NiAVObjectPalette *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDefaultAVObjectPalette_sceneRef_set(void * jarg1, void * jarg2) {
  nifly::NiDefaultAVObjectPalette *arg1 = (nifly::NiDefaultAVObjectPalette *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiDefaultAVObjectPalette *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->sceneRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiDefaultAVObjectPalette_sceneRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiDefaultAVObjectPalette *arg1 = (nifly::NiDefaultAVObjectPalette *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiDefaultAVObjectPalette *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiAVObject > *)& ((arg1)->sceneRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiDefaultAVObjectPalette_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiDefaultAVObjectPalette::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiDefaultAVObjectPalette_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiDefaultAVObjectPalette *arg1 = (nifly::NiDefaultAVObjectPalette *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiDefaultAVObjectPalette *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDefaultAVObjectPalette_Sync(void * jarg1, void * jarg2) {
  nifly::NiDefaultAVObjectPalette *arg1 = (nifly::NiDefaultAVObjectPalette *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiDefaultAVObjectPalette *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDefaultAVObjectPalette_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiDefaultAVObjectPalette *arg1 = (nifly::NiDefaultAVObjectPalette *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiDefaultAVObjectPalette *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiDefaultAVObjectPalette_GetAVObjects(void * jarg1) {
  void * jresult ;
  nifly::NiDefaultAVObjectPalette *arg1 = (nifly::NiDefaultAVObjectPalette *) 0 ;
  SwigValueWrapper< std::vector< nifly::AVObject > > result;
  
  arg1 = (nifly::NiDefaultAVObjectPalette *)jarg1; 
  result = ((nifly::NiDefaultAVObjectPalette const *)arg1)->GetAVObjects();
  jresult = new std::vector< nifly::AVObject >((const std::vector< nifly::AVObject > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDefaultAVObjectPalette_SetAVObjects(void * jarg1, void * jarg2) {
  nifly::NiDefaultAVObjectPalette *arg1 = (nifly::NiDefaultAVObjectPalette *) 0 ;
  std::vector< nifly::AVObject > *arg2 = 0 ;
  
  arg1 = (nifly::NiDefaultAVObjectPalette *)jarg1; 
  arg2 = (std::vector< nifly::AVObject > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::AVObject > & type is null", 0);
    return ;
  } 
  (arg1)->SetAVObjects(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiDefaultAVObjectPalette() {
  void * jresult ;
  nifly::NiDefaultAVObjectPalette *result = 0 ;
  
  result = (nifly::NiDefaultAVObjectPalette *)new nifly::NiDefaultAVObjectPalette();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiDefaultAVObjectPalette(void * jarg1) {
  nifly::NiDefaultAVObjectPalette *arg1 = (nifly::NiDefaultAVObjectPalette *) 0 ;
  
  arg1 = (nifly::NiDefaultAVObjectPalette *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_obsoleteFlags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->obsoleteFlags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiCamera_obsoleteFlags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (uint16_t) ((arg1)->obsoleteFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_frustumLeft_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frustumLeft = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_frustumLeft_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->frustumLeft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_frustumRight_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frustumRight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_frustumRight_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->frustumRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_frustumTop_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frustumTop = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_frustumTop_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->frustumTop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_frustomBottom_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frustomBottom = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_frustomBottom_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->frustomBottom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_frustumNear_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frustumNear = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_frustumNear_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->frustumNear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_frustumFar_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frustumFar = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_frustumFar_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->frustumFar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_useOrtho_set(void * jarg1, unsigned int jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useOrtho = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiCamera_useOrtho_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  bool result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (bool) ((arg1)->useOrtho);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_viewportLeft_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->viewportLeft = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_viewportLeft_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->viewportLeft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_viewportRight_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->viewportRight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_viewportRight_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->viewportRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_viewportTop_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->viewportTop = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_viewportTop_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->viewportTop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_viewportBottom_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->viewportBottom = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_viewportBottom_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->viewportBottom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_lodAdjust_set(void * jarg1, float jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lodAdjust = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiCamera_lodAdjust_get(void * jarg1) {
  float jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  float result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (float) ((arg1)->lodAdjust);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_sceneRef_set(void * jarg1, void * jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  nifly::NiBlockRef< nifly::NiAVObject > *arg2 = (nifly::NiBlockRef< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->sceneRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiCamera_sceneRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  nifly::NiBlockRef< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiAVObject > *)& ((arg1)->sceneRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_numScreenPolygons_set(void * jarg1, unsigned int jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numScreenPolygons = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiCamera_numScreenPolygons_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (uint32_t) ((arg1)->numScreenPolygons);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_numScreenTextures_set(void * jarg1, unsigned int jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numScreenTextures = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiCamera_numScreenTextures_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (uint32_t) ((arg1)->numScreenTextures);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiCamera_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiCamera::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiCamera_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_Sync(void * jarg1, void * jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCamera_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiCamera() {
  void * jresult ;
  nifly::NiCamera *result = 0 ;
  
  result = (nifly::NiCamera *)new nifly::NiCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiCamera(void * jarg1) {
  nifly::NiCamera *arg1 = (nifly::NiCamera *) 0 ;
  
  arg1 = (nifly::NiCamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSequenceStreamHelper_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSequenceStreamHelper::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSequenceStreamHelper_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSequenceStreamHelper *arg1 = (nifly::NiSequenceStreamHelper *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSequenceStreamHelper *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSequenceStreamHelper() {
  void * jresult ;
  nifly::NiSequenceStreamHelper *result = 0 ;
  
  result = (nifly::NiSequenceStreamHelper *)new nifly::NiSequenceStreamHelper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSequenceStreamHelper(void * jarg1) {
  nifly::NiSequenceStreamHelper *arg1 = (nifly::NiSequenceStreamHelper *) 0 ;
  
  arg1 = (nifly::NiSequenceStreamHelper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPalette_hasAlpha_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPalette *arg1 = (nifly::NiPalette *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPalette *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasAlpha = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPalette_hasAlpha_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPalette *arg1 = (nifly::NiPalette *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPalette *)jarg1; 
  result = (bool) ((arg1)->hasAlpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPalette_palette_set(void * jarg1, void * jarg2) {
  nifly::NiPalette *arg1 = (nifly::NiPalette *) 0 ;
  nifly::NiVector< ByteColor4 > *arg2 = (nifly::NiVector< ByteColor4 > *) 0 ;
  
  arg1 = (nifly::NiPalette *)jarg1; 
  arg2 = (nifly::NiVector< ByteColor4 > *)jarg2; 
  if (arg1) (arg1)->palette = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPalette_palette_get(void * jarg1) {
  void * jresult ;
  nifly::NiPalette *arg1 = (nifly::NiPalette *) 0 ;
  nifly::NiVector< ByteColor4 > *result = 0 ;
  
  arg1 = (nifly::NiPalette *)jarg1; 
  result = (nifly::NiVector< ByteColor4 > *)& ((arg1)->palette);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPalette_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPalette::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPalette_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPalette *arg1 = (nifly::NiPalette *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPalette *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPalette_Sync(void * jarg1, void * jarg2) {
  nifly::NiPalette *arg1 = (nifly::NiPalette *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPalette *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPalette() {
  void * jresult ;
  nifly::NiPalette *result = 0 ;
  
  result = (nifly::NiPalette *)new nifly::NiPalette();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPalette(void * jarg1) {
  nifly::NiPalette *arg1 = (nifly::NiPalette *) 0 ;
  
  arg1 = (nifly::NiPalette *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PixelFormatComponent_type_set(void * jarg1, int jarg2) {
  nifly::PixelFormatComponent *arg1 = (nifly::PixelFormatComponent *) 0 ;
  nifly::PixelComponent arg2 ;
  
  arg1 = (nifly::PixelFormatComponent *)jarg1; 
  arg2 = (nifly::PixelComponent)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_PixelFormatComponent_type_get(void * jarg1) {
  int jresult ;
  nifly::PixelFormatComponent *arg1 = (nifly::PixelFormatComponent *) 0 ;
  nifly::PixelComponent result;
  
  arg1 = (nifly::PixelFormatComponent *)jarg1; 
  result = (nifly::PixelComponent) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PixelFormatComponent_convention_set(void * jarg1, int jarg2) {
  nifly::PixelFormatComponent *arg1 = (nifly::PixelFormatComponent *) 0 ;
  nifly::PixelRepresentation arg2 ;
  
  arg1 = (nifly::PixelFormatComponent *)jarg1; 
  arg2 = (nifly::PixelRepresentation)jarg2; 
  if (arg1) (arg1)->convention = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_PixelFormatComponent_convention_get(void * jarg1) {
  int jresult ;
  nifly::PixelFormatComponent *arg1 = (nifly::PixelFormatComponent *) 0 ;
  nifly::PixelRepresentation result;
  
  arg1 = (nifly::PixelFormatComponent *)jarg1; 
  result = (nifly::PixelRepresentation) ((arg1)->convention);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PixelFormatComponent_bitsPerChannel_set(void * jarg1, unsigned char jarg2) {
  nifly::PixelFormatComponent *arg1 = (nifly::PixelFormatComponent *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::PixelFormatComponent *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bitsPerChannel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_PixelFormatComponent_bitsPerChannel_get(void * jarg1) {
  unsigned char jresult ;
  nifly::PixelFormatComponent *arg1 = (nifly::PixelFormatComponent *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::PixelFormatComponent *)jarg1; 
  result = (uint8_t) ((arg1)->bitsPerChannel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PixelFormatComponent_isSigned_set(void * jarg1, unsigned int jarg2) {
  nifly::PixelFormatComponent *arg1 = (nifly::PixelFormatComponent *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::PixelFormatComponent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSigned = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_PixelFormatComponent_isSigned_get(void * jarg1) {
  unsigned int jresult ;
  nifly::PixelFormatComponent *arg1 = (nifly::PixelFormatComponent *) 0 ;
  bool result;
  
  arg1 = (nifly::PixelFormatComponent *)jarg1; 
  result = (bool) ((arg1)->isSigned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_PixelFormatComponent() {
  void * jresult ;
  nifly::PixelFormatComponent *result = 0 ;
  
  result = (nifly::PixelFormatComponent *)new nifly::PixelFormatComponent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_PixelFormatComponent(void * jarg1) {
  nifly::PixelFormatComponent *arg1 = (nifly::PixelFormatComponent *) 0 ;
  
  arg1 = (nifly::PixelFormatComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MipMapInfo_width_set(void * jarg1, unsigned int jarg2) {
  nifly::MipMapInfo *arg1 = (nifly::MipMapInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::MipMapInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_MipMapInfo_width_get(void * jarg1) {
  unsigned int jresult ;
  nifly::MipMapInfo *arg1 = (nifly::MipMapInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::MipMapInfo *)jarg1; 
  result = (uint32_t) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MipMapInfo_height_set(void * jarg1, unsigned int jarg2) {
  nifly::MipMapInfo *arg1 = (nifly::MipMapInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::MipMapInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_MipMapInfo_height_get(void * jarg1) {
  unsigned int jresult ;
  nifly::MipMapInfo *arg1 = (nifly::MipMapInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::MipMapInfo *)jarg1; 
  result = (uint32_t) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MipMapInfo_offset_set(void * jarg1, unsigned int jarg2) {
  nifly::MipMapInfo *arg1 = (nifly::MipMapInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::MipMapInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_MipMapInfo_offset_get(void * jarg1) {
  unsigned int jresult ;
  nifly::MipMapInfo *arg1 = (nifly::MipMapInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::MipMapInfo *)jarg1; 
  result = (uint32_t) ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_MipMapInfo() {
  void * jresult ;
  nifly::MipMapInfo *result = 0 ;
  
  result = (nifly::MipMapInfo *)new nifly::MipMapInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_MipMapInfo(void * jarg1) {
  nifly::MipMapInfo *arg1 = (nifly::MipMapInfo *) 0 ;
  
  arg1 = (nifly::MipMapInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_pixelFormat_set(void * jarg1, int jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  nifly::PixelFormat arg2 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (nifly::PixelFormat)jarg2; 
  if (arg1) (arg1)->pixelFormat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_TextureRenderData_pixelFormat_get(void * jarg1) {
  int jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  nifly::PixelFormat result;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = (nifly::PixelFormat) ((arg1)->pixelFormat);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_bitsPerPixel_set(void * jarg1, unsigned char jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bitsPerPixel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_TextureRenderData_bitsPerPixel_get(void * jarg1) {
  unsigned char jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = (uint8_t) ((arg1)->bitsPerPixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_rendererHint_set(void * jarg1, unsigned int jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->rendererHint = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_TextureRenderData_rendererHint_get(void * jarg1) {
  unsigned int jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = (uint32_t) ((arg1)->rendererHint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_extraData_set(void * jarg1, unsigned int jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->extraData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_TextureRenderData_extraData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = (uint32_t) ((arg1)->extraData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_flags_set(void * jarg1, unsigned char jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_TextureRenderData_flags_get(void * jarg1) {
  unsigned char jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = (uint8_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_pixelTiling_set(void * jarg1, int jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  nifly::PixelTiling arg2 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (nifly::PixelTiling)jarg2; 
  if (arg1) (arg1)->pixelTiling = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_TextureRenderData_pixelTiling_get(void * jarg1) {
  int jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  nifly::PixelTiling result;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = (nifly::PixelTiling) ((arg1)->pixelTiling);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_channels_set(void * jarg1, void * jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  nifly::PixelFormatComponent *arg2 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (nifly::PixelFormatComponent *)jarg2; 
  {
    size_t ii;
    nifly::PixelFormatComponent *b = (nifly::PixelFormatComponent *) arg1->channels;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((nifly::PixelFormatComponent *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TextureRenderData_channels_get(void * jarg1) {
  void * jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  nifly::PixelFormatComponent *result = 0 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = (nifly::PixelFormatComponent *)(nifly::PixelFormatComponent *) ((arg1)->channels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_paletteRef_set(void * jarg1, void * jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  nifly::NiBlockRef< nifly::NiPalette > *arg2 = (nifly::NiBlockRef< nifly::NiPalette > *) 0 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPalette > *)jarg2; 
  if (arg1) (arg1)->paletteRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TextureRenderData_paletteRef_get(void * jarg1) {
  void * jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  nifly::NiBlockRef< nifly::NiPalette > *result = 0 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPalette > *)& ((arg1)->paletteRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_bytesPerPixel_set(void * jarg1, unsigned int jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bytesPerPixel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_TextureRenderData_bytesPerPixel_get(void * jarg1) {
  unsigned int jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = (uint32_t) ((arg1)->bytesPerPixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_Sync(void * jarg1, void * jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TextureRenderData_GetMipmaps(void * jarg1) {
  void * jresult ;
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  SwigValueWrapper< std::vector< nifly::MipMapInfo > > result;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  result = ((nifly::TextureRenderData const *)arg1)->GetMipmaps();
  jresult = new std::vector< nifly::MipMapInfo >((const std::vector< nifly::MipMapInfo > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TextureRenderData_SetMipmaps(void * jarg1, void * jarg2) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  std::vector< nifly::MipMapInfo > *arg2 = 0 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  arg2 = (std::vector< nifly::MipMapInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::MipMapInfo > & type is null", 0);
    return ;
  } 
  (arg1)->SetMipmaps(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_TextureRenderData() {
  void * jresult ;
  nifly::TextureRenderData *result = 0 ;
  
  result = (nifly::TextureRenderData *)new nifly::TextureRenderData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_TextureRenderData(void * jarg1) {
  nifly::TextureRenderData *arg1 = (nifly::TextureRenderData *) 0 ;
  
  arg1 = (nifly::TextureRenderData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_numPixels_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numPixels = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_numPixels_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  result = (uint32_t) ((arg1)->numPixels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_padNumPixels_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->padNumPixels = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_padNumPixels_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  result = (uint32_t) ((arg1)->padNumPixels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_numFaces_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numFaces = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_numFaces_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  result = (uint32_t) ((arg1)->numFaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_platform_set(void * jarg1, int jarg2) {
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  nifly::PlatformID arg2 ;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  arg2 = (nifly::PlatformID)jarg2; 
  if (arg1) (arg1)->platform = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_platform_get(void * jarg1) {
  int jresult ;
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  nifly::PlatformID result;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  result = (nifly::PlatformID) ((arg1)->platform);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_pixelData_set(void * jarg1, void * jarg2) {
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  arg2 = (std::vector< std::vector< uint8_t > > *)jarg2; 
  if (arg1) (arg1)->pixelData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_pixelData_get(void * jarg1) {
  void * jresult ;
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  result = (std::vector< std::vector< uint8_t > > *)& ((arg1)->pixelData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPersistentSrcTextureRendererData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPersistentSrcTextureRendererData_Sync(void * jarg1, void * jarg2) {
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPersistentSrcTextureRendererData() {
  void * jresult ;
  nifly::NiPersistentSrcTextureRendererData *result = 0 ;
  
  result = (nifly::NiPersistentSrcTextureRendererData *)new nifly::NiPersistentSrcTextureRendererData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPersistentSrcTextureRendererData(void * jarg1) {
  nifly::NiPersistentSrcTextureRendererData *arg1 = (nifly::NiPersistentSrcTextureRendererData *) 0 ;
  
  arg1 = (nifly::NiPersistentSrcTextureRendererData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPixelData_numPixels_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPixelData *arg1 = (nifly::NiPixelData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiPixelData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numPixels = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPixelData_numPixels_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPixelData *arg1 = (nifly::NiPixelData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiPixelData *)jarg1; 
  result = (uint32_t) ((arg1)->numPixels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPixelData_numFaces_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPixelData *arg1 = (nifly::NiPixelData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiPixelData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numFaces = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPixelData_numFaces_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPixelData *arg1 = (nifly::NiPixelData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiPixelData *)jarg1; 
  result = (uint32_t) ((arg1)->numFaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPixelData_pixelData_set(void * jarg1, void * jarg2) {
  nifly::NiPixelData *arg1 = (nifly::NiPixelData *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  arg1 = (nifly::NiPixelData *)jarg1; 
  arg2 = (std::vector< std::vector< uint8_t > > *)jarg2; 
  if (arg1) (arg1)->pixelData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPixelData_pixelData_get(void * jarg1) {
  void * jresult ;
  nifly::NiPixelData *arg1 = (nifly::NiPixelData *) 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  arg1 = (nifly::NiPixelData *)jarg1; 
  result = (std::vector< std::vector< uint8_t > > *)& ((arg1)->pixelData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPixelData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPixelData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPixelData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPixelData *arg1 = (nifly::NiPixelData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPixelData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPixelData_Sync(void * jarg1, void * jarg2) {
  nifly::NiPixelData *arg1 = (nifly::NiPixelData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPixelData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPixelData() {
  void * jresult ;
  nifly::NiPixelData *result = 0 ;
  
  result = (nifly::NiPixelData *)new nifly::NiPixelData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPixelData(void * jarg1) {
  nifly::NiPixelData *arg1 = (nifly::NiPixelData *) 0 ;
  
  arg1 = (nifly::NiPixelData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTexture() {
  void * jresult ;
  nifly::NiTexture *result = 0 ;
  
  result = (nifly::NiTexture *)new nifly::NiTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTexture(void * jarg1) {
  nifly::NiTexture *arg1 = (nifly::NiTexture *) 0 ;
  
  arg1 = (nifly::NiTexture *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_useExternal_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useExternal = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSourceTexture_useExternal_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (bool) ((arg1)->useExternal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_fileName_set(void * jarg1, void * jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->fileName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSourceTexture_fileName_get(void * jarg1) {
  void * jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->fileName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::NiBlockRef< nifly::TextureRenderData > *arg2 = (nifly::NiBlockRef< nifly::TextureRenderData > *) 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::TextureRenderData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSourceTexture_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::NiBlockRef< nifly::TextureRenderData > *result = 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (nifly::NiBlockRef< nifly::TextureRenderData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_pixelLayout_set(void * jarg1, int jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::PixelLayout arg2 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = (nifly::PixelLayout)jarg2; 
  if (arg1) (arg1)->pixelLayout = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiSourceTexture_pixelLayout_get(void * jarg1) {
  int jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::PixelLayout result;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (nifly::PixelLayout) ((arg1)->pixelLayout);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_mipMapFormat_set(void * jarg1, int jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::MipMapFormat arg2 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = (nifly::MipMapFormat)jarg2; 
  if (arg1) (arg1)->mipMapFormat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiSourceTexture_mipMapFormat_get(void * jarg1) {
  int jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::MipMapFormat result;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (nifly::MipMapFormat) ((arg1)->mipMapFormat);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_alphaFormat_set(void * jarg1, int jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::AlphaFormat arg2 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = (nifly::AlphaFormat)jarg2; 
  if (arg1) (arg1)->alphaFormat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiSourceTexture_alphaFormat_get(void * jarg1) {
  int jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::AlphaFormat result;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (nifly::AlphaFormat) ((arg1)->alphaFormat);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_isStatic_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isStatic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSourceTexture_isStatic_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (bool) ((arg1)->isStatic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_directRender_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->directRender = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSourceTexture_directRender_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (bool) ((arg1)->directRender);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_persistentRenderData_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->persistentRenderData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSourceTexture_persistentRenderData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (bool) ((arg1)->persistentRenderData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSourceTexture_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSourceTexture::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSourceTexture_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_Sync(void * jarg1, void * jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSourceTexture_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSourceTexture() {
  void * jresult ;
  nifly::NiSourceTexture *result = 0 ;
  
  result = (nifly::NiSourceTexture *)new nifly::NiSourceTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSourceTexture(void * jarg1) {
  nifly::NiSourceTexture *arg1 = (nifly::NiSourceTexture *) 0 ;
  
  arg1 = (nifly::NiSourceTexture *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSourceCubeMap_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSourceCubeMap::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSourceCubeMap_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSourceCubeMap *arg1 = (nifly::NiSourceCubeMap *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSourceCubeMap *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSourceCubeMap() {
  void * jresult ;
  nifly::NiSourceCubeMap *result = 0 ;
  
  result = (nifly::NiSourceCubeMap *)new nifly::NiSourceCubeMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSourceCubeMap(void * jarg1) {
  nifly::NiSourceCubeMap *arg1 = (nifly::NiSourceCubeMap *) 0 ;
  
  arg1 = (nifly::NiSourceCubeMap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDynamicEffect_switchState_set(void * jarg1, unsigned int jarg2) {
  nifly::NiDynamicEffect *arg1 = (nifly::NiDynamicEffect *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiDynamicEffect *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->switchState = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiDynamicEffect_switchState_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiDynamicEffect *arg1 = (nifly::NiDynamicEffect *) 0 ;
  bool result;
  
  arg1 = (nifly::NiDynamicEffect *)jarg1; 
  result = (bool) ((arg1)->switchState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDynamicEffect_affectedNodes_set(void * jarg1, void * jarg2) {
  nifly::NiDynamicEffect *arg1 = (nifly::NiDynamicEffect *) 0 ;
  nifly::NiBlockPtrArray< NiNode > *arg2 = (nifly::NiBlockPtrArray< NiNode > *) 0 ;
  
  arg1 = (nifly::NiDynamicEffect *)jarg1; 
  arg2 = (nifly::NiBlockPtrArray< NiNode > *)jarg2; 
  if (arg1) (arg1)->affectedNodes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiDynamicEffect_affectedNodes_get(void * jarg1) {
  void * jresult ;
  nifly::NiDynamicEffect *arg1 = (nifly::NiDynamicEffect *) 0 ;
  nifly::NiBlockPtrArray< NiNode > *result = 0 ;
  
  arg1 = (nifly::NiDynamicEffect *)jarg1; 
  result = (nifly::NiBlockPtrArray< NiNode > *)& ((arg1)->affectedNodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDynamicEffect_Sync(void * jarg1, void * jarg2) {
  nifly::NiDynamicEffect *arg1 = (nifly::NiDynamicEffect *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiDynamicEffect *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDynamicEffect_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiDynamicEffect *arg1 = (nifly::NiDynamicEffect *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiDynamicEffect *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiDynamicEffect() {
  void * jresult ;
  nifly::NiDynamicEffect *result = 0 ;
  
  result = (nifly::NiDynamicEffect *)new nifly::NiDynamicEffect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiDynamicEffect(void * jarg1) {
  nifly::NiDynamicEffect *arg1 = (nifly::NiDynamicEffect *) 0 ;
  
  arg1 = (nifly::NiDynamicEffect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_modelProjectionMatrix_set(void * jarg1, void * jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  Matrix3 arg2 ;
  Matrix3 *argp2 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  argp2 = (Matrix3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Matrix3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->modelProjectionMatrix = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTextureEffect_modelProjectionMatrix_get(void * jarg1) {
  void * jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  Matrix3 result;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result =  ((arg1)->modelProjectionMatrix);
  jresult = new Matrix3((const Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_modelProjectionTranslation_set(void * jarg1, void * jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->modelProjectionTranslation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTextureEffect_modelProjectionTranslation_get(void * jarg1) {
  void * jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result =  ((arg1)->modelProjectionTranslation);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_textureFiltering_set(void * jarg1, int jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::TexFilterMode arg2 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (nifly::TexFilterMode)jarg2; 
  if (arg1) (arg1)->textureFiltering = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiTextureEffect_textureFiltering_get(void * jarg1) {
  int jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::TexFilterMode result;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result = (nifly::TexFilterMode) ((arg1)->textureFiltering);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_textureClamping_set(void * jarg1, int jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::TexClampMode arg2 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (nifly::TexClampMode)jarg2; 
  if (arg1) (arg1)->textureClamping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiTextureEffect_textureClamping_get(void * jarg1) {
  int jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::TexClampMode result;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result = (nifly::TexClampMode) ((arg1)->textureClamping);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_textureType_set(void * jarg1, int jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::EffectType arg2 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (nifly::EffectType)jarg2; 
  if (arg1) (arg1)->textureType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiTextureEffect_textureType_get(void * jarg1) {
  int jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::EffectType result;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result = (nifly::EffectType) ((arg1)->textureType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_coordinateGenerationType_set(void * jarg1, int jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::CoordGenType arg2 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (nifly::CoordGenType)jarg2; 
  if (arg1) (arg1)->coordinateGenerationType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiTextureEffect_coordinateGenerationType_get(void * jarg1) {
  int jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::CoordGenType result;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result = (nifly::CoordGenType) ((arg1)->coordinateGenerationType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_sourceTexture_set(void * jarg1, void * jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::NiBlockRef< nifly::NiSourceTexture > *arg2 = (nifly::NiBlockRef< nifly::NiSourceTexture > *) 0 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiSourceTexture > *)jarg2; 
  if (arg1) (arg1)->sourceTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTextureEffect_sourceTexture_get(void * jarg1) {
  void * jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::NiBlockRef< nifly::NiSourceTexture > *result = 0 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiSourceTexture > *)& ((arg1)->sourceTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_clippingPlane_set(void * jarg1, unsigned char jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->clippingPlane = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiTextureEffect_clippingPlane_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result = (uint8_t) ((arg1)->clippingPlane);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_plane_set(void * jarg1, void * jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::NiPlane *arg2 = (nifly::NiPlane *) 0 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (nifly::NiPlane *)jarg2; 
  if (arg1) (arg1)->plane = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTextureEffect_plane_get(void * jarg1) {
  void * jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::NiPlane *result = 0 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result = (nifly::NiPlane *)& ((arg1)->plane);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTextureEffect_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTextureEffect::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTextureEffect_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_Sync(void * jarg1, void * jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureEffect_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTextureEffect() {
  void * jresult ;
  nifly::NiTextureEffect *result = 0 ;
  
  result = (nifly::NiTextureEffect *)new nifly::NiTextureEffect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTextureEffect(void * jarg1) {
  nifly::NiTextureEffect *arg1 = (nifly::NiTextureEffect *) 0 ;
  
  arg1 = (nifly::NiTextureEffect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLight_dimmer_set(void * jarg1, float jarg2) {
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiLight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dimmer = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiLight_dimmer_get(void * jarg1) {
  float jresult ;
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  float result;
  
  arg1 = (nifly::NiLight *)jarg1; 
  result = (float) ((arg1)->dimmer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLight_ambientColor_set(void * jarg1, void * jarg2) {
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  Color3 arg2 ;
  Color3 *argp2 ;
  
  arg1 = (nifly::NiLight *)jarg1; 
  argp2 = (Color3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ambientColor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLight_ambientColor_get(void * jarg1) {
  void * jresult ;
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  Color3 result;
  
  arg1 = (nifly::NiLight *)jarg1; 
  result =  ((arg1)->ambientColor);
  jresult = new Color3((const Color3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLight_diffuseColor_set(void * jarg1, void * jarg2) {
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  Color3 arg2 ;
  Color3 *argp2 ;
  
  arg1 = (nifly::NiLight *)jarg1; 
  argp2 = (Color3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->diffuseColor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLight_diffuseColor_get(void * jarg1) {
  void * jresult ;
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  Color3 result;
  
  arg1 = (nifly::NiLight *)jarg1; 
  result =  ((arg1)->diffuseColor);
  jresult = new Color3((const Color3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLight_specularColor_set(void * jarg1, void * jarg2) {
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  Color3 arg2 ;
  Color3 *argp2 ;
  
  arg1 = (nifly::NiLight *)jarg1; 
  argp2 = (Color3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->specularColor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLight_specularColor_get(void * jarg1) {
  void * jresult ;
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  Color3 result;
  
  arg1 = (nifly::NiLight *)jarg1; 
  result =  ((arg1)->specularColor);
  jresult = new Color3((const Color3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLight_Sync(void * jarg1, void * jarg2) {
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiLight *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLight() {
  void * jresult ;
  nifly::NiLight *result = 0 ;
  
  result = (nifly::NiLight *)new nifly::NiLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLight(void * jarg1) {
  nifly::NiLight *arg1 = (nifly::NiLight *) 0 ;
  
  arg1 = (nifly::NiLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAmbientLight_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiAmbientLight::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAmbientLight_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiAmbientLight *arg1 = (nifly::NiAmbientLight *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiAmbientLight *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiAmbientLight() {
  void * jresult ;
  nifly::NiAmbientLight *result = 0 ;
  
  result = (nifly::NiAmbientLight *)new nifly::NiAmbientLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiAmbientLight(void * jarg1) {
  nifly::NiAmbientLight *arg1 = (nifly::NiAmbientLight *) 0 ;
  
  arg1 = (nifly::NiAmbientLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiDirectionalLight_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiDirectionalLight::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiDirectionalLight_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiDirectionalLight *arg1 = (nifly::NiDirectionalLight *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiDirectionalLight *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiDirectionalLight() {
  void * jresult ;
  nifly::NiDirectionalLight *result = 0 ;
  
  result = (nifly::NiDirectionalLight *)new nifly::NiDirectionalLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiDirectionalLight(void * jarg1) {
  nifly::NiDirectionalLight *arg1 = (nifly::NiDirectionalLight *) 0 ;
  
  arg1 = (nifly::NiDirectionalLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPointLight_constantAttenuation_set(void * jarg1, float jarg2) {
  nifly::NiPointLight *arg1 = (nifly::NiPointLight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPointLight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->constantAttenuation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPointLight_constantAttenuation_get(void * jarg1) {
  float jresult ;
  nifly::NiPointLight *arg1 = (nifly::NiPointLight *) 0 ;
  float result;
  
  arg1 = (nifly::NiPointLight *)jarg1; 
  result = (float) ((arg1)->constantAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPointLight_linearAttenuation_set(void * jarg1, float jarg2) {
  nifly::NiPointLight *arg1 = (nifly::NiPointLight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPointLight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->linearAttenuation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPointLight_linearAttenuation_get(void * jarg1) {
  float jresult ;
  nifly::NiPointLight *arg1 = (nifly::NiPointLight *) 0 ;
  float result;
  
  arg1 = (nifly::NiPointLight *)jarg1; 
  result = (float) ((arg1)->linearAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPointLight_quadraticAttenuation_set(void * jarg1, float jarg2) {
  nifly::NiPointLight *arg1 = (nifly::NiPointLight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPointLight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->quadraticAttenuation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPointLight_quadraticAttenuation_get(void * jarg1) {
  float jresult ;
  nifly::NiPointLight *arg1 = (nifly::NiPointLight *) 0 ;
  float result;
  
  arg1 = (nifly::NiPointLight *)jarg1; 
  result = (float) ((arg1)->quadraticAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPointLight_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPointLight::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPointLight_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPointLight *arg1 = (nifly::NiPointLight *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPointLight *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPointLight_Sync(void * jarg1, void * jarg2) {
  nifly::NiPointLight *arg1 = (nifly::NiPointLight *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPointLight *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPointLight() {
  void * jresult ;
  nifly::NiPointLight *result = 0 ;
  
  result = (nifly::NiPointLight *)new nifly::NiPointLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPointLight(void * jarg1) {
  nifly::NiPointLight *arg1 = (nifly::NiPointLight *) 0 ;
  
  arg1 = (nifly::NiPointLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSpotLight_outerSpotAngle_set(void * jarg1, float jarg2) {
  nifly::NiSpotLight *arg1 = (nifly::NiSpotLight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiSpotLight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->outerSpotAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiSpotLight_outerSpotAngle_get(void * jarg1) {
  float jresult ;
  nifly::NiSpotLight *arg1 = (nifly::NiSpotLight *) 0 ;
  float result;
  
  arg1 = (nifly::NiSpotLight *)jarg1; 
  result = (float) ((arg1)->outerSpotAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSpotLight_innerSpotAngle_set(void * jarg1, float jarg2) {
  nifly::NiSpotLight *arg1 = (nifly::NiSpotLight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiSpotLight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->innerSpotAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiSpotLight_innerSpotAngle_get(void * jarg1) {
  float jresult ;
  nifly::NiSpotLight *arg1 = (nifly::NiSpotLight *) 0 ;
  float result;
  
  arg1 = (nifly::NiSpotLight *)jarg1; 
  result = (float) ((arg1)->innerSpotAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSpotLight_exponent_set(void * jarg1, float jarg2) {
  nifly::NiSpotLight *arg1 = (nifly::NiSpotLight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiSpotLight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->exponent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiSpotLight_exponent_get(void * jarg1) {
  float jresult ;
  nifly::NiSpotLight *arg1 = (nifly::NiSpotLight *) 0 ;
  float result;
  
  arg1 = (nifly::NiSpotLight *)jarg1; 
  result = (float) ((arg1)->exponent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSpotLight_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSpotLight::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSpotLight_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSpotLight *arg1 = (nifly::NiSpotLight *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSpotLight *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSpotLight_Sync(void * jarg1, void * jarg2) {
  nifly::NiSpotLight *arg1 = (nifly::NiSpotLight *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSpotLight *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSpotLight() {
  void * jresult ;
  nifly::NiSpotLight *result = 0 ;
  
  result = (nifly::NiSpotLight *)new nifly::NiSpotLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSpotLight(void * jarg1) {
  nifly::NiSpotLight *arg1 = (nifly::NiSpotLight *) 0 ;
  
  arg1 = (nifly::NiSpotLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiNodeNiAVObject(void * jarg1) {
  nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiNodeNiAVObject_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *) 0 ;
  nifly::NiNode *result = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *)jarg1; 
  result = (nifly::NiNode *)((nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiNodeNiAVObject_Get(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiNodeNiAVObject_Put(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Put(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiNodeNiAVObject() {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *result = 0 ;
  
  result = (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *)new nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiNode_childRefs_set(void * jarg1, void * jarg2) {
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg2 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->childRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiNode_childRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiAVObject > *)& ((arg1)->childRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiNode_effectRefs_set(void * jarg1, void * jarg2) {
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiDynamicEffect > *arg2 = (nifly::NiBlockRefArray< nifly::NiDynamicEffect > *) 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiDynamicEffect > *)jarg2; 
  if (arg1) (arg1)->effectRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiNode_effectRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiDynamicEffect > *result = 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiDynamicEffect > *)& ((arg1)->effectRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiNode_Sync(void * jarg1, void * jarg2) {
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiNode_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiNode_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiNode_GetChildren(void * jarg1) {
  void * jresult ;
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiAVObject > *) &(arg1)->GetChildren();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiNode_GetEffects(void * jarg1) {
  void * jresult ;
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiDynamicEffect > *result = 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiDynamicEffect > *) &(arg1)->GetEffects();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiNode() {
  void * jresult ;
  nifly::NiNode *result = 0 ;
  
  result = (nifly::NiNode *)new nifly::NiNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiNode(void * jarg1) {
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  
  arg1 = (nifly::NiNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSFadeNodeNiNode(void * jarg1) {
  nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *arg1 = (nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSFadeNodeNiNode_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *arg1 = (nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *) 0 ;
  nifly::BSFadeNode *result = 0 ;
  
  arg1 = (nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *)jarg1; 
  result = (nifly::BSFadeNode *)((nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSFadeNodeNiNode() {
  void * jresult ;
  nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *result = 0 ;
  
  result = (nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *)new nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSFadeNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSFadeNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSFadeNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSFadeNode *arg1 = (nifly::BSFadeNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSFadeNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSFadeNode() {
  void * jresult ;
  nifly::BSFadeNode *result = 0 ;
  
  result = (nifly::BSFadeNode *)new nifly::BSFadeNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSFadeNode(void * jarg1) {
  nifly::BSFadeNode *arg1 = (nifly::BSFadeNode *) 0 ;
  
  arg1 = (nifly::BSFadeNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSValueNode_value_set(void * jarg1, int jarg2) {
  nifly::BSValueNode *arg1 = (nifly::BSValueNode *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::BSValueNode *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BSValueNode_value_get(void * jarg1) {
  int jresult ;
  nifly::BSValueNode *arg1 = (nifly::BSValueNode *) 0 ;
  int result;
  
  arg1 = (nifly::BSValueNode *)jarg1; 
  result = (int) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSValueNode_valueFlags_set(void * jarg1, int jarg2) {
  nifly::BSValueNode *arg1 = (nifly::BSValueNode *) 0 ;
  nifly::BSValueNodeFlags arg2 ;
  
  arg1 = (nifly::BSValueNode *)jarg1; 
  arg2 = (nifly::BSValueNodeFlags)jarg2; 
  if (arg1) (arg1)->valueFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BSValueNode_valueFlags_get(void * jarg1) {
  int jresult ;
  nifly::BSValueNode *arg1 = (nifly::BSValueNode *) 0 ;
  nifly::BSValueNodeFlags result;
  
  arg1 = (nifly::BSValueNode *)jarg1; 
  result = (nifly::BSValueNodeFlags) ((arg1)->valueFlags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSValueNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSValueNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSValueNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSValueNode *arg1 = (nifly::BSValueNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSValueNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSValueNode_Sync(void * jarg1, void * jarg2) {
  nifly::BSValueNode *arg1 = (nifly::BSValueNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSValueNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSValueNode() {
  void * jresult ;
  nifly::BSValueNode *result = 0 ;
  
  result = (nifly::BSValueNode *)new nifly::BSValueNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSValueNode(void * jarg1) {
  nifly::BSValueNode *arg1 = (nifly::BSValueNode *) 0 ;
  
  arg1 = (nifly::BSValueNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLeafAnimNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSLeafAnimNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLeafAnimNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSLeafAnimNode *arg1 = (nifly::BSLeafAnimNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSLeafAnimNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSLeafAnimNode() {
  void * jresult ;
  nifly::BSLeafAnimNode *result = 0 ;
  
  result = (nifly::BSLeafAnimNode *)new nifly::BSLeafAnimNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSLeafAnimNode(void * jarg1) {
  nifly::BSLeafAnimNode *arg1 = (nifly::BSLeafAnimNode *) 0 ;
  
  arg1 = (nifly::BSLeafAnimNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreeNode_bones1_set(void * jarg1, void * jarg2) {
  nifly::BSTreeNode *arg1 = (nifly::BSTreeNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiNode > *arg2 = (nifly::NiBlockRefArray< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::BSTreeNode *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->bones1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTreeNode_bones1_get(void * jarg1) {
  void * jresult ;
  nifly::BSTreeNode *arg1 = (nifly::BSTreeNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::BSTreeNode *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiNode > *)& ((arg1)->bones1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreeNode_bones2_set(void * jarg1, void * jarg2) {
  nifly::BSTreeNode *arg1 = (nifly::BSTreeNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiNode > *arg2 = (nifly::NiBlockRefArray< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::BSTreeNode *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->bones2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTreeNode_bones2_get(void * jarg1) {
  void * jresult ;
  nifly::BSTreeNode *arg1 = (nifly::BSTreeNode *) 0 ;
  nifly::NiBlockRefArray< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::BSTreeNode *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiNode > *)& ((arg1)->bones2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSTreeNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSTreeNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSTreeNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSTreeNode *arg1 = (nifly::BSTreeNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSTreeNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreeNode_Sync(void * jarg1, void * jarg2) {
  nifly::BSTreeNode *arg1 = (nifly::BSTreeNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSTreeNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreeNode_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSTreeNode *arg1 = (nifly::BSTreeNode *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSTreeNode *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreeNode_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSTreeNode *arg1 = (nifly::BSTreeNode *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSTreeNode *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSTreeNode() {
  void * jresult ;
  nifly::BSTreeNode *result = 0 ;
  
  result = (nifly::BSTreeNode *)new nifly::BSTreeNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSTreeNode(void * jarg1) {
  nifly::BSTreeNode *arg1 = (nifly::BSTreeNode *) 0 ;
  
  arg1 = (nifly::BSTreeNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSOrderedNode_alphaSortBound_set(void * jarg1, void * jarg2) {
  nifly::BSOrderedNode *arg1 = (nifly::BSOrderedNode *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::BSOrderedNode *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->alphaSortBound = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSOrderedNode_alphaSortBound_get(void * jarg1) {
  void * jresult ;
  nifly::BSOrderedNode *arg1 = (nifly::BSOrderedNode *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::BSOrderedNode *)jarg1; 
  result =  ((arg1)->alphaSortBound);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSOrderedNode_isStaticBound_set(void * jarg1, unsigned int jarg2) {
  nifly::BSOrderedNode *arg1 = (nifly::BSOrderedNode *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSOrderedNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isStaticBound = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSOrderedNode_isStaticBound_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSOrderedNode *arg1 = (nifly::BSOrderedNode *) 0 ;
  bool result;
  
  arg1 = (nifly::BSOrderedNode *)jarg1; 
  result = (bool) ((arg1)->isStaticBound);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSOrderedNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSOrderedNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSOrderedNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSOrderedNode *arg1 = (nifly::BSOrderedNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSOrderedNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSOrderedNode_Sync(void * jarg1, void * jarg2) {
  nifly::BSOrderedNode *arg1 = (nifly::BSOrderedNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSOrderedNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSOrderedNode() {
  void * jresult ;
  nifly::BSOrderedNode *result = 0 ;
  
  result = (nifly::BSOrderedNode *)new nifly::BSOrderedNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSOrderedNode(void * jarg1) {
  nifly::BSOrderedNode *arg1 = (nifly::BSOrderedNode *) 0 ;
  
  arg1 = (nifly::BSOrderedNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSMultiBoundData() {
  void * jresult ;
  nifly::BSMultiBoundData *result = 0 ;
  
  result = (nifly::BSMultiBoundData *)new nifly::BSMultiBoundData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSMultiBoundData(void * jarg1) {
  nifly::BSMultiBoundData *arg1 = (nifly::BSMultiBoundData *) 0 ;
  
  arg1 = (nifly::BSMultiBoundData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundOBB_center_set(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundOBB *arg1 = (nifly::BSMultiBoundOBB *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSMultiBoundOBB *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSMultiBoundOBB_center_get(void * jarg1) {
  void * jresult ;
  nifly::BSMultiBoundOBB *arg1 = (nifly::BSMultiBoundOBB *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSMultiBoundOBB *)jarg1; 
  result =  ((arg1)->center);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundOBB_size_set(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundOBB *arg1 = (nifly::BSMultiBoundOBB *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSMultiBoundOBB *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSMultiBoundOBB_size_get(void * jarg1) {
  void * jresult ;
  nifly::BSMultiBoundOBB *arg1 = (nifly::BSMultiBoundOBB *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSMultiBoundOBB *)jarg1; 
  result =  ((arg1)->size);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundOBB_rotation_set(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundOBB *arg1 = (nifly::BSMultiBoundOBB *) 0 ;
  Matrix3 arg2 ;
  Matrix3 *argp2 ;
  
  arg1 = (nifly::BSMultiBoundOBB *)jarg1; 
  argp2 = (Matrix3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Matrix3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSMultiBoundOBB_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::BSMultiBoundOBB *arg1 = (nifly::BSMultiBoundOBB *) 0 ;
  Matrix3 result;
  
  arg1 = (nifly::BSMultiBoundOBB *)jarg1; 
  result =  ((arg1)->rotation);
  jresult = new Matrix3((const Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBoundOBB_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSMultiBoundOBB::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBoundOBB_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSMultiBoundOBB *arg1 = (nifly::BSMultiBoundOBB *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSMultiBoundOBB *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundOBB_Sync(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundOBB *arg1 = (nifly::BSMultiBoundOBB *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSMultiBoundOBB *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSMultiBoundOBB() {
  void * jresult ;
  nifly::BSMultiBoundOBB *result = 0 ;
  
  result = (nifly::BSMultiBoundOBB *)new nifly::BSMultiBoundOBB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSMultiBoundOBB(void * jarg1) {
  nifly::BSMultiBoundOBB *arg1 = (nifly::BSMultiBoundOBB *) 0 ;
  
  arg1 = (nifly::BSMultiBoundOBB *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundAABB_center_set(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundAABB *arg1 = (nifly::BSMultiBoundAABB *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSMultiBoundAABB *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSMultiBoundAABB_center_get(void * jarg1) {
  void * jresult ;
  nifly::BSMultiBoundAABB *arg1 = (nifly::BSMultiBoundAABB *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSMultiBoundAABB *)jarg1; 
  result =  ((arg1)->center);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundAABB_halfExtent_set(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundAABB *arg1 = (nifly::BSMultiBoundAABB *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSMultiBoundAABB *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->halfExtent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSMultiBoundAABB_halfExtent_get(void * jarg1) {
  void * jresult ;
  nifly::BSMultiBoundAABB *arg1 = (nifly::BSMultiBoundAABB *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSMultiBoundAABB *)jarg1; 
  result =  ((arg1)->halfExtent);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBoundAABB_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSMultiBoundAABB::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBoundAABB_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSMultiBoundAABB *arg1 = (nifly::BSMultiBoundAABB *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSMultiBoundAABB *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundAABB_Sync(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundAABB *arg1 = (nifly::BSMultiBoundAABB *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSMultiBoundAABB *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSMultiBoundAABB() {
  void * jresult ;
  nifly::BSMultiBoundAABB *result = 0 ;
  
  result = (nifly::BSMultiBoundAABB *)new nifly::BSMultiBoundAABB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSMultiBoundAABB(void * jarg1) {
  nifly::BSMultiBoundAABB *arg1 = (nifly::BSMultiBoundAABB *) 0 ;
  
  arg1 = (nifly::BSMultiBoundAABB *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundSphere_center_set(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundSphere *arg1 = (nifly::BSMultiBoundSphere *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSMultiBoundSphere *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSMultiBoundSphere_center_get(void * jarg1) {
  void * jresult ;
  nifly::BSMultiBoundSphere *arg1 = (nifly::BSMultiBoundSphere *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSMultiBoundSphere *)jarg1; 
  result =  ((arg1)->center);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundSphere_radius_set(void * jarg1, float jarg2) {
  nifly::BSMultiBoundSphere *arg1 = (nifly::BSMultiBoundSphere *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSMultiBoundSphere *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSMultiBoundSphere_radius_get(void * jarg1) {
  float jresult ;
  nifly::BSMultiBoundSphere *arg1 = (nifly::BSMultiBoundSphere *) 0 ;
  float result;
  
  arg1 = (nifly::BSMultiBoundSphere *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBoundSphere_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSMultiBoundSphere::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBoundSphere_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSMultiBoundSphere *arg1 = (nifly::BSMultiBoundSphere *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSMultiBoundSphere *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundSphere_Sync(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundSphere *arg1 = (nifly::BSMultiBoundSphere *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSMultiBoundSphere *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSMultiBoundSphere() {
  void * jresult ;
  nifly::BSMultiBoundSphere *result = 0 ;
  
  result = (nifly::BSMultiBoundSphere *)new nifly::BSMultiBoundSphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSMultiBoundSphere(void * jarg1) {
  nifly::BSMultiBoundSphere *arg1 = (nifly::BSMultiBoundSphere *) 0 ;
  
  arg1 = (nifly::BSMultiBoundSphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBound_dataRef_set(void * jarg1, void * jarg2) {
  nifly::BSMultiBound *arg1 = (nifly::BSMultiBound *) 0 ;
  nifly::NiBlockRef< nifly::BSMultiBoundData > *arg2 = (nifly::NiBlockRef< nifly::BSMultiBoundData > *) 0 ;
  
  arg1 = (nifly::BSMultiBound *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::BSMultiBoundData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSMultiBound_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSMultiBound *arg1 = (nifly::BSMultiBound *) 0 ;
  nifly::NiBlockRef< nifly::BSMultiBoundData > *result = 0 ;
  
  arg1 = (nifly::BSMultiBound *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSMultiBoundData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBound_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSMultiBound::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBound_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSMultiBound *arg1 = (nifly::BSMultiBound *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSMultiBound *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBound_Sync(void * jarg1, void * jarg2) {
  nifly::BSMultiBound *arg1 = (nifly::BSMultiBound *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSMultiBound *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBound_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSMultiBound *arg1 = (nifly::BSMultiBound *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSMultiBound *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBound_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSMultiBound *arg1 = (nifly::BSMultiBound *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSMultiBound *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSMultiBound() {
  void * jresult ;
  nifly::BSMultiBound *result = 0 ;
  
  result = (nifly::BSMultiBound *)new nifly::BSMultiBound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSMultiBound(void * jarg1) {
  nifly::BSMultiBound *arg1 = (nifly::BSMultiBound *) 0 ;
  
  arg1 = (nifly::BSMultiBound *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundNode_multiBoundRef_set(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundNode *arg1 = (nifly::BSMultiBoundNode *) 0 ;
  nifly::NiBlockRef< nifly::BSMultiBound > *arg2 = (nifly::NiBlockRef< nifly::BSMultiBound > *) 0 ;
  
  arg1 = (nifly::BSMultiBoundNode *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::BSMultiBound > *)jarg2; 
  if (arg1) (arg1)->multiBoundRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSMultiBoundNode_multiBoundRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSMultiBoundNode *arg1 = (nifly::BSMultiBoundNode *) 0 ;
  nifly::NiBlockRef< nifly::BSMultiBound > *result = 0 ;
  
  arg1 = (nifly::BSMultiBoundNode *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSMultiBound > *)& ((arg1)->multiBoundRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundNode_cullingMode_set(void * jarg1, int jarg2) {
  nifly::BSMultiBoundNode *arg1 = (nifly::BSMultiBoundNode *) 0 ;
  nifly::BSCPCullingType arg2 ;
  
  arg1 = (nifly::BSMultiBoundNode *)jarg1; 
  arg2 = (nifly::BSCPCullingType)jarg2; 
  if (arg1) (arg1)->cullingMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BSMultiBoundNode_cullingMode_get(void * jarg1) {
  int jresult ;
  nifly::BSMultiBoundNode *arg1 = (nifly::BSMultiBoundNode *) 0 ;
  nifly::BSCPCullingType result;
  
  arg1 = (nifly::BSMultiBoundNode *)jarg1; 
  result = (nifly::BSCPCullingType) ((arg1)->cullingMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBoundNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSMultiBoundNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMultiBoundNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSMultiBoundNode *arg1 = (nifly::BSMultiBoundNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSMultiBoundNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundNode_Sync(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundNode *arg1 = (nifly::BSMultiBoundNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSMultiBoundNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundNode_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundNode *arg1 = (nifly::BSMultiBoundNode *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSMultiBoundNode *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMultiBoundNode_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSMultiBoundNode *arg1 = (nifly::BSMultiBoundNode *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSMultiBoundNode *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSMultiBoundNode() {
  void * jresult ;
  nifly::BSMultiBoundNode *result = 0 ;
  
  result = (nifly::BSMultiBoundNode *)new nifly::BSMultiBoundNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSMultiBoundNode(void * jarg1) {
  nifly::BSMultiBoundNode *arg1 = (nifly::BSMultiBoundNode *) 0 ;
  
  arg1 = (nifly::BSMultiBoundNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSRangeNode_min_set(void * jarg1, unsigned char jarg2) {
  nifly::BSRangeNode *arg1 = (nifly::BSRangeNode *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BSRangeNode *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BSRangeNode_min_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BSRangeNode *arg1 = (nifly::BSRangeNode *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BSRangeNode *)jarg1; 
  result = (uint8_t) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSRangeNode_max_set(void * jarg1, unsigned char jarg2) {
  nifly::BSRangeNode *arg1 = (nifly::BSRangeNode *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BSRangeNode *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BSRangeNode_max_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BSRangeNode *arg1 = (nifly::BSRangeNode *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BSRangeNode *)jarg1; 
  result = (uint8_t) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSRangeNode_current_set(void * jarg1, unsigned char jarg2) {
  nifly::BSRangeNode *arg1 = (nifly::BSRangeNode *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BSRangeNode *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->current = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BSRangeNode_current_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BSRangeNode *arg1 = (nifly::BSRangeNode *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BSRangeNode *)jarg1; 
  result = (uint8_t) ((arg1)->current);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSRangeNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSRangeNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSRangeNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSRangeNode *arg1 = (nifly::BSRangeNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSRangeNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSRangeNode_Sync(void * jarg1, void * jarg2) {
  nifly::BSRangeNode *arg1 = (nifly::BSRangeNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSRangeNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSRangeNode() {
  void * jresult ;
  nifly::BSRangeNode *result = 0 ;
  
  result = (nifly::BSRangeNode *)new nifly::BSRangeNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSRangeNode(void * jarg1) {
  nifly::BSRangeNode *arg1 = (nifly::BSRangeNode *) 0 ;
  
  arg1 = (nifly::BSRangeNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDebrisNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSDebrisNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDebrisNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSDebrisNode *arg1 = (nifly::BSDebrisNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSDebrisNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSDebrisNode() {
  void * jresult ;
  nifly::BSDebrisNode *result = 0 ;
  
  result = (nifly::BSDebrisNode *)new nifly::BSDebrisNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSDebrisNode(void * jarg1) {
  nifly::BSDebrisNode *arg1 = (nifly::BSDebrisNode *) 0 ;
  
  arg1 = (nifly::BSDebrisNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSBlastNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSBlastNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSBlastNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSBlastNode *arg1 = (nifly::BSBlastNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSBlastNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSBlastNode() {
  void * jresult ;
  nifly::BSBlastNode *result = 0 ;
  
  result = (nifly::BSBlastNode *)new nifly::BSBlastNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSBlastNode(void * jarg1) {
  nifly::BSBlastNode *arg1 = (nifly::BSBlastNode *) 0 ;
  
  arg1 = (nifly::BSBlastNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDamageStage_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSDamageStage::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDamageStage_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSDamageStage *arg1 = (nifly::BSDamageStage *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSDamageStage *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSDamageStage() {
  void * jresult ;
  nifly::BSDamageStage *result = 0 ;
  
  result = (nifly::BSDamageStage *)new nifly::BSDamageStage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSDamageStage(void * jarg1) {
  nifly::BSDamageStage *arg1 = (nifly::BSDamageStage *) 0 ;
  
  arg1 = (nifly::BSDamageStage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBillboardNode_billboardMode_set(void * jarg1, int jarg2) {
  nifly::NiBillboardNode *arg1 = (nifly::NiBillboardNode *) 0 ;
  nifly::BillboardMode arg2 ;
  
  arg1 = (nifly::NiBillboardNode *)jarg1; 
  arg2 = (nifly::BillboardMode)jarg2; 
  if (arg1) (arg1)->billboardMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiBillboardNode_billboardMode_get(void * jarg1) {
  int jresult ;
  nifly::NiBillboardNode *arg1 = (nifly::NiBillboardNode *) 0 ;
  nifly::BillboardMode result;
  
  arg1 = (nifly::NiBillboardNode *)jarg1; 
  result = (nifly::BillboardMode) ((arg1)->billboardMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBillboardNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBillboardNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBillboardNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBillboardNode *arg1 = (nifly::NiBillboardNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBillboardNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBillboardNode_Sync(void * jarg1, void * jarg2) {
  nifly::NiBillboardNode *arg1 = (nifly::NiBillboardNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBillboardNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBillboardNode() {
  void * jresult ;
  nifly::NiBillboardNode *result = 0 ;
  
  result = (nifly::NiBillboardNode *)new nifly::NiBillboardNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBillboardNode(void * jarg1) {
  nifly::NiBillboardNode *arg1 = (nifly::NiBillboardNode *) 0 ;
  
  arg1 = (nifly::NiBillboardNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSwitchNode_flags_set(void * jarg1, int jarg2) {
  nifly::NiSwitchNode *arg1 = (nifly::NiSwitchNode *) 0 ;
  nifly::NiSwitchFlags arg2 ;
  
  arg1 = (nifly::NiSwitchNode *)jarg1; 
  arg2 = (nifly::NiSwitchFlags)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiSwitchNode_flags_get(void * jarg1) {
  int jresult ;
  nifly::NiSwitchNode *arg1 = (nifly::NiSwitchNode *) 0 ;
  nifly::NiSwitchFlags result;
  
  arg1 = (nifly::NiSwitchNode *)jarg1; 
  result = (nifly::NiSwitchFlags) ((arg1)->flags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSwitchNode_index_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSwitchNode *arg1 = (nifly::NiSwitchNode *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiSwitchNode *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSwitchNode_index_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSwitchNode *arg1 = (nifly::NiSwitchNode *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiSwitchNode *)jarg1; 
  result = (uint32_t) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSwitchNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSwitchNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSwitchNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSwitchNode *arg1 = (nifly::NiSwitchNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSwitchNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSwitchNode_Sync(void * jarg1, void * jarg2) {
  nifly::NiSwitchNode *arg1 = (nifly::NiSwitchNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSwitchNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSwitchNode() {
  void * jresult ;
  nifly::NiSwitchNode *result = 0 ;
  
  result = (nifly::NiSwitchNode *)new nifly::NiSwitchNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSwitchNode(void * jarg1) {
  nifly::NiSwitchNode *arg1 = (nifly::NiSwitchNode *) 0 ;
  
  arg1 = (nifly::NiSwitchNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_LODRange_nearExtent_set(void * jarg1, float jarg2) {
  nifly::LODRange *arg1 = (nifly::LODRange *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::LODRange *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->nearExtent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_LODRange_nearExtent_get(void * jarg1) {
  float jresult ;
  nifly::LODRange *arg1 = (nifly::LODRange *) 0 ;
  float result;
  
  arg1 = (nifly::LODRange *)jarg1; 
  result = (float) ((arg1)->nearExtent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_LODRange_farExtent_set(void * jarg1, float jarg2) {
  nifly::LODRange *arg1 = (nifly::LODRange *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::LODRange *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->farExtent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_LODRange_farExtent_get(void * jarg1) {
  float jresult ;
  nifly::LODRange *arg1 = (nifly::LODRange *) 0 ;
  float result;
  
  arg1 = (nifly::LODRange *)jarg1; 
  result = (float) ((arg1)->farExtent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_LODRange() {
  void * jresult ;
  nifly::LODRange *result = 0 ;
  
  result = (nifly::LODRange *)new nifly::LODRange();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_LODRange(void * jarg1) {
  nifly::LODRange *arg1 = (nifly::LODRange *) 0 ;
  
  arg1 = (nifly::LODRange *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLODData() {
  void * jresult ;
  nifly::NiLODData *result = 0 ;
  
  result = (nifly::NiLODData *)new nifly::NiLODData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLODData(void * jarg1) {
  nifly::NiLODData *arg1 = (nifly::NiLODData *) 0 ;
  
  arg1 = (nifly::NiLODData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRangeLODData_lodCenter_set(void * jarg1, void * jarg2) {
  nifly::NiRangeLODData *arg1 = (nifly::NiRangeLODData *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiRangeLODData *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->lodCenter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiRangeLODData_lodCenter_get(void * jarg1) {
  void * jresult ;
  nifly::NiRangeLODData *arg1 = (nifly::NiRangeLODData *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiRangeLODData *)jarg1; 
  result =  ((arg1)->lodCenter);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRangeLODData_lodLevels_set(void * jarg1, void * jarg2) {
  nifly::NiRangeLODData *arg1 = (nifly::NiRangeLODData *) 0 ;
  nifly::NiVector< nifly::LODRange > *arg2 = (nifly::NiVector< nifly::LODRange > *) 0 ;
  
  arg1 = (nifly::NiRangeLODData *)jarg1; 
  arg2 = (nifly::NiVector< nifly::LODRange > *)jarg2; 
  if (arg1) (arg1)->lodLevels = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiRangeLODData_lodLevels_get(void * jarg1) {
  void * jresult ;
  nifly::NiRangeLODData *arg1 = (nifly::NiRangeLODData *) 0 ;
  nifly::NiVector< nifly::LODRange > *result = 0 ;
  
  arg1 = (nifly::NiRangeLODData *)jarg1; 
  result = (nifly::NiVector< nifly::LODRange > *)& ((arg1)->lodLevels);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiRangeLODData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiRangeLODData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiRangeLODData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiRangeLODData *arg1 = (nifly::NiRangeLODData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiRangeLODData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRangeLODData_Sync(void * jarg1, void * jarg2) {
  nifly::NiRangeLODData *arg1 = (nifly::NiRangeLODData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiRangeLODData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiRangeLODData() {
  void * jresult ;
  nifly::NiRangeLODData *result = 0 ;
  
  result = (nifly::NiRangeLODData *)new nifly::NiRangeLODData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiRangeLODData(void * jarg1) {
  nifly::NiRangeLODData *arg1 = (nifly::NiRangeLODData *) 0 ;
  
  arg1 = (nifly::NiRangeLODData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiScreenLODData_boundCenter_set(void * jarg1, void * jarg2) {
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->boundCenter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiScreenLODData_boundCenter_get(void * jarg1) {
  void * jresult ;
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  result =  ((arg1)->boundCenter);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiScreenLODData_boundRadius_set(void * jarg1, float jarg2) {
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->boundRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiScreenLODData_boundRadius_get(void * jarg1) {
  float jresult ;
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  float result;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  result = (float) ((arg1)->boundRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiScreenLODData_worldCenter_set(void * jarg1, void * jarg2) {
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->worldCenter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiScreenLODData_worldCenter_get(void * jarg1) {
  void * jresult ;
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  result =  ((arg1)->worldCenter);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiScreenLODData_worldRadius_set(void * jarg1, float jarg2) {
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->worldRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiScreenLODData_worldRadius_get(void * jarg1) {
  float jresult ;
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  float result;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  result = (float) ((arg1)->worldRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiScreenLODData_proportionLevels_set(void * jarg1, void * jarg2) {
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  nifly::NiVector< float > *arg2 = (nifly::NiVector< float > *) 0 ;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  arg2 = (nifly::NiVector< float > *)jarg2; 
  if (arg1) (arg1)->proportionLevels = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiScreenLODData_proportionLevels_get(void * jarg1) {
  void * jresult ;
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  nifly::NiVector< float > *result = 0 ;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  result = (nifly::NiVector< float > *)& ((arg1)->proportionLevels);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiScreenLODData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiScreenLODData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiScreenLODData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiScreenLODData_Sync(void * jarg1, void * jarg2) {
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiScreenLODData() {
  void * jresult ;
  nifly::NiScreenLODData *result = 0 ;
  
  result = (nifly::NiScreenLODData *)new nifly::NiScreenLODData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiScreenLODData(void * jarg1) {
  nifly::NiScreenLODData *arg1 = (nifly::NiScreenLODData *) 0 ;
  
  arg1 = (nifly::NiScreenLODData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLODNode_lodLevelData_set(void * jarg1, void * jarg2) {
  nifly::NiLODNode *arg1 = (nifly::NiLODNode *) 0 ;
  nifly::NiBlockRef< nifly::NiLODData > *arg2 = (nifly::NiBlockRef< nifly::NiLODData > *) 0 ;
  
  arg1 = (nifly::NiLODNode *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiLODData > *)jarg2; 
  if (arg1) (arg1)->lodLevelData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLODNode_lodLevelData_get(void * jarg1) {
  void * jresult ;
  nifly::NiLODNode *arg1 = (nifly::NiLODNode *) 0 ;
  nifly::NiBlockRef< nifly::NiLODData > *result = 0 ;
  
  arg1 = (nifly::NiLODNode *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiLODData > *)& ((arg1)->lodLevelData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLODNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiLODNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLODNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiLODNode *arg1 = (nifly::NiLODNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiLODNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLODNode_Sync(void * jarg1, void * jarg2) {
  nifly::NiLODNode *arg1 = (nifly::NiLODNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiLODNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLODNode_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiLODNode *arg1 = (nifly::NiLODNode *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiLODNode *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLODNode_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiLODNode *arg1 = (nifly::NiLODNode *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiLODNode *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLODNode() {
  void * jresult ;
  nifly::NiLODNode *result = 0 ;
  
  result = (nifly::NiLODNode *)new nifly::NiLODNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLODNode(void * jarg1) {
  nifly::NiLODNode *arg1 = (nifly::NiLODNode *) 0 ;
  
  arg1 = (nifly::NiLODNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBone_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBone::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBone_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBone *arg1 = (nifly::NiBone *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBone *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBone() {
  void * jresult ;
  nifly::NiBone *result = 0 ;
  
  result = (nifly::NiBone *)new nifly::NiBone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBone(void * jarg1) {
  nifly::NiBone *arg1 = (nifly::NiBone *) 0 ;
  
  arg1 = (nifly::NiBone *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSortAdjustNode_sortingMode_set(void * jarg1, int jarg2) {
  nifly::NiSortAdjustNode *arg1 = (nifly::NiSortAdjustNode *) 0 ;
  nifly::SortingMode arg2 ;
  
  arg1 = (nifly::NiSortAdjustNode *)jarg1; 
  arg2 = (nifly::SortingMode)jarg2; 
  if (arg1) (arg1)->sortingMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiSortAdjustNode_sortingMode_get(void * jarg1) {
  int jresult ;
  nifly::NiSortAdjustNode *arg1 = (nifly::NiSortAdjustNode *) 0 ;
  nifly::SortingMode result;
  
  arg1 = (nifly::NiSortAdjustNode *)jarg1; 
  result = (nifly::SortingMode) ((arg1)->sortingMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSortAdjustNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSortAdjustNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSortAdjustNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSortAdjustNode *arg1 = (nifly::NiSortAdjustNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSortAdjustNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSortAdjustNode_Sync(void * jarg1, void * jarg2) {
  nifly::NiSortAdjustNode *arg1 = (nifly::NiSortAdjustNode *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSortAdjustNode *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSortAdjustNode() {
  void * jresult ;
  nifly::NiSortAdjustNode *result = 0 ;
  
  result = (nifly::NiSortAdjustNode *)new nifly::NiSortAdjustNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSortAdjustNode(void * jarg1) {
  nifly::NiSortAdjustNode *arg1 = (nifly::NiSortAdjustNode *) 0 ;
  
  arg1 = (nifly::NiSortAdjustNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiKeyframeData_rotationType_set(void * jarg1, void * jarg2) {
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyType arg2 ;
  KeyType *argp2 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  argp2 = (KeyType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyType", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotationType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiKeyframeData_rotationType_get(void * jarg1) {
  void * jresult ;
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyType result;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  result =  ((arg1)->rotationType);
  jresult = new KeyType((const KeyType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiKeyframeData_xRotations_set(void * jarg1, void * jarg2) {
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< float > arg2 ;
  KeyGroup< float > *argp2 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  argp2 = (KeyGroup< float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< float >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->xRotations = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiKeyframeData_xRotations_get(void * jarg1) {
  void * jresult ;
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< float > result;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  result =  ((arg1)->xRotations);
  jresult = new KeyGroup< float >((const KeyGroup< float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiKeyframeData_yRotations_set(void * jarg1, void * jarg2) {
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< float > arg2 ;
  KeyGroup< float > *argp2 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  argp2 = (KeyGroup< float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< float >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->yRotations = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiKeyframeData_yRotations_get(void * jarg1) {
  void * jresult ;
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< float > result;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  result =  ((arg1)->yRotations);
  jresult = new KeyGroup< float >((const KeyGroup< float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiKeyframeData_zRotations_set(void * jarg1, void * jarg2) {
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< float > arg2 ;
  KeyGroup< float > *argp2 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  argp2 = (KeyGroup< float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< float >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->zRotations = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiKeyframeData_zRotations_get(void * jarg1) {
  void * jresult ;
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< float > result;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  result =  ((arg1)->zRotations);
  jresult = new KeyGroup< float >((const KeyGroup< float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiKeyframeData_translations_set(void * jarg1, void * jarg2) {
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< Vector3 > arg2 ;
  KeyGroup< Vector3 > *argp2 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  argp2 = (KeyGroup< Vector3 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< Vector3 >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translations = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiKeyframeData_translations_get(void * jarg1) {
  void * jresult ;
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< Vector3 > result;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  result =  ((arg1)->translations);
  jresult = new KeyGroup< Vector3 >((const KeyGroup< Vector3 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiKeyframeData_scales_set(void * jarg1, void * jarg2) {
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< float > arg2 ;
  KeyGroup< float > *argp2 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  argp2 = (KeyGroup< float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< float >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->scales = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiKeyframeData_scales_get(void * jarg1) {
  void * jresult ;
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  KeyGroup< float > result;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  result =  ((arg1)->scales);
  jresult = new KeyGroup< float >((const KeyGroup< float > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiKeyframeData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiKeyframeData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiKeyframeData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiKeyframeData_Sync(void * jarg1, void * jarg2) {
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiKeyframeData_GetQuaternionKeys(void * jarg1) {
  void * jresult ;
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  SwigValueWrapper< std::vector< nifly::Key< nifly::Quaternion > > > result;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  result = ((nifly::NiKeyframeData const *)arg1)->GetQuaternionKeys();
  jresult = new std::vector< nifly::Key< nifly::Quaternion > >((const std::vector< nifly::Key< nifly::Quaternion > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiKeyframeData_SetQuaternionKeys(void * jarg1, void * jarg2) {
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  std::vector< nifly::Key< nifly::Quaternion > > *arg2 = 0 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  arg2 = (std::vector< nifly::Key< nifly::Quaternion > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Key< nifly::Quaternion > > const & type is null", 0);
    return ;
  } 
  (arg1)->SetQuaternionKeys((std::vector< nifly::Key< nifly::Quaternion > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiKeyframeData() {
  void * jresult ;
  nifly::NiKeyframeData *result = 0 ;
  
  result = (nifly::NiKeyframeData *)new nifly::NiKeyframeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiKeyframeData(void * jarg1) {
  nifly::NiKeyframeData *arg1 = (nifly::NiKeyframeData *) 0 ;
  
  arg1 = (nifly::NiKeyframeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTransformData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTransformData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTransformData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTransformData *arg1 = (nifly::NiTransformData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTransformData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTransformData() {
  void * jresult ;
  nifly::NiTransformData *result = 0 ;
  
  result = (nifly::NiTransformData *)new nifly::NiTransformData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTransformData(void * jarg1) {
  nifly::NiTransformData *arg1 = (nifly::NiTransformData *) 0 ;
  
  arg1 = (nifly::NiTransformData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPosData_data_set(void * jarg1, void * jarg2) {
  nifly::NiPosData *arg1 = (nifly::NiPosData *) 0 ;
  KeyGroup< Vector3 > arg2 ;
  KeyGroup< Vector3 > *argp2 ;
  
  arg1 = (nifly::NiPosData *)jarg1; 
  argp2 = (KeyGroup< Vector3 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< Vector3 >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPosData_data_get(void * jarg1) {
  void * jresult ;
  nifly::NiPosData *arg1 = (nifly::NiPosData *) 0 ;
  KeyGroup< Vector3 > result;
  
  arg1 = (nifly::NiPosData *)jarg1; 
  result =  ((arg1)->data);
  jresult = new KeyGroup< Vector3 >((const KeyGroup< Vector3 > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPosData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPosData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPosData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPosData *arg1 = (nifly::NiPosData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPosData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPosData_Sync(void * jarg1, void * jarg2) {
  nifly::NiPosData *arg1 = (nifly::NiPosData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPosData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPosData() {
  void * jresult ;
  nifly::NiPosData *result = 0 ;
  
  result = (nifly::NiPosData *)new nifly::NiPosData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPosData(void * jarg1) {
  nifly::NiPosData *arg1 = (nifly::NiPosData *) 0 ;
  
  arg1 = (nifly::NiPosData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoolData_data_set(void * jarg1, void * jarg2) {
  nifly::NiBoolData *arg1 = (nifly::NiBoolData *) 0 ;
  KeyGroup< uint8_t > arg2 ;
  KeyGroup< uint8_t > *argp2 ;
  
  arg1 = (nifly::NiBoolData *)jarg1; 
  argp2 = (KeyGroup< uint8_t > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< uint8_t >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBoolData_data_get(void * jarg1) {
  void * jresult ;
  nifly::NiBoolData *arg1 = (nifly::NiBoolData *) 0 ;
  KeyGroup< uint8_t > result;
  
  arg1 = (nifly::NiBoolData *)jarg1; 
  result =  ((arg1)->data);
  jresult = new KeyGroup< uint8_t >((const KeyGroup< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBoolData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBoolData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBoolData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBoolData *arg1 = (nifly::NiBoolData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBoolData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoolData_Sync(void * jarg1, void * jarg2) {
  nifly::NiBoolData *arg1 = (nifly::NiBoolData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBoolData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBoolData() {
  void * jresult ;
  nifly::NiBoolData *result = 0 ;
  
  result = (nifly::NiBoolData *)new nifly::NiBoolData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBoolData(void * jarg1) {
  nifly::NiBoolData *arg1 = (nifly::NiBoolData *) 0 ;
  
  arg1 = (nifly::NiBoolData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatData_data_set(void * jarg1, void * jarg2) {
  nifly::NiFloatData *arg1 = (nifly::NiFloatData *) 0 ;
  KeyGroup< float > arg2 ;
  KeyGroup< float > *argp2 ;
  
  arg1 = (nifly::NiFloatData *)jarg1; 
  argp2 = (KeyGroup< float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< float >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFloatData_data_get(void * jarg1) {
  void * jresult ;
  nifly::NiFloatData *arg1 = (nifly::NiFloatData *) 0 ;
  KeyGroup< float > result;
  
  arg1 = (nifly::NiFloatData *)jarg1; 
  result =  ((arg1)->data);
  jresult = new KeyGroup< float >((const KeyGroup< float > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiFloatData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiFloatData *arg1 = (nifly::NiFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiFloatData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatData_Sync(void * jarg1, void * jarg2) {
  nifly::NiFloatData *arg1 = (nifly::NiFloatData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiFloatData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiFloatData() {
  void * jresult ;
  nifly::NiFloatData *result = 0 ;
  
  result = (nifly::NiFloatData *)new nifly::NiFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFloatData(void * jarg1) {
  nifly::NiFloatData *arg1 = (nifly::NiFloatData *) 0 ;
  
  arg1 = (nifly::NiFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineData_floatControlPoints_set(void * jarg1, void * jarg2) {
  nifly::NiBSplineData *arg1 = (nifly::NiBSplineData *) 0 ;
  nifly::NiVector< float > *arg2 = (nifly::NiVector< float > *) 0 ;
  
  arg1 = (nifly::NiBSplineData *)jarg1; 
  arg2 = (nifly::NiVector< float > *)jarg2; 
  if (arg1) (arg1)->floatControlPoints = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBSplineData_floatControlPoints_get(void * jarg1) {
  void * jresult ;
  nifly::NiBSplineData *arg1 = (nifly::NiBSplineData *) 0 ;
  nifly::NiVector< float > *result = 0 ;
  
  arg1 = (nifly::NiBSplineData *)jarg1; 
  result = (nifly::NiVector< float > *)& ((arg1)->floatControlPoints);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineData_shortControlPoints_set(void * jarg1, void * jarg2) {
  nifly::NiBSplineData *arg1 = (nifly::NiBSplineData *) 0 ;
  nifly::NiVector< short > *arg2 = (nifly::NiVector< short > *) 0 ;
  
  arg1 = (nifly::NiBSplineData *)jarg1; 
  arg2 = (nifly::NiVector< short > *)jarg2; 
  if (arg1) (arg1)->shortControlPoints = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBSplineData_shortControlPoints_get(void * jarg1) {
  void * jresult ;
  nifly::NiBSplineData *arg1 = (nifly::NiBSplineData *) 0 ;
  nifly::NiVector< short > *result = 0 ;
  
  arg1 = (nifly::NiBSplineData *)jarg1; 
  result = (nifly::NiVector< short > *)& ((arg1)->shortControlPoints);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBSplineData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBSplineData *arg1 = (nifly::NiBSplineData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBSplineData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineData_Sync(void * jarg1, void * jarg2) {
  nifly::NiBSplineData *arg1 = (nifly::NiBSplineData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplineData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSplineData() {
  void * jresult ;
  nifly::NiBSplineData *result = 0 ;
  
  result = (nifly::NiBSplineData *)new nifly::NiBSplineData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSplineData(void * jarg1) {
  nifly::NiBSplineData *arg1 = (nifly::NiBSplineData *) 0 ;
  
  arg1 = (nifly::NiBSplineData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineBasisData_numControlPoints_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBSplineBasisData *arg1 = (nifly::NiBSplineBasisData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiBSplineBasisData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numControlPoints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBSplineBasisData_numControlPoints_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBSplineBasisData *arg1 = (nifly::NiBSplineBasisData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiBSplineBasisData *)jarg1; 
  result = (uint32_t) ((arg1)->numControlPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineBasisData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBSplineBasisData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineBasisData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBSplineBasisData *arg1 = (nifly::NiBSplineBasisData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBSplineBasisData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineBasisData_Sync(void * jarg1, void * jarg2) {
  nifly::NiBSplineBasisData *arg1 = (nifly::NiBSplineBasisData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplineBasisData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSplineBasisData() {
  void * jresult ;
  nifly::NiBSplineBasisData *result = 0 ;
  
  result = (nifly::NiBSplineBasisData *)new nifly::NiBSplineBasisData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSplineBasisData(void * jarg1) {
  nifly::NiBSplineBasisData *arg1 = (nifly::NiBSplineBasisData *) 0 ;
  
  arg1 = (nifly::NiBSplineBasisData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiInterpolator() {
  void * jresult ;
  nifly::NiInterpolator *result = 0 ;
  
  result = (nifly::NiInterpolator *)new nifly::NiInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiInterpolator(void * jarg1) {
  nifly::NiInterpolator *arg1 = (nifly::NiInterpolator *) 0 ;
  
  arg1 = (nifly::NiInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_startTime_set(void * jarg1, float jarg2) {
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->startTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_startTime_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  result = (float) ((arg1)->startTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_stopTime_set(void * jarg1, float jarg2) {
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->stopTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_stopTime_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  result = (float) ((arg1)->stopTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_splineDataRef_set(void * jarg1, void * jarg2) {
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiBSplineData > *arg2 = (nifly::NiBlockRef< nifly::NiBSplineData > *) 0 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiBSplineData > *)jarg2; 
  if (arg1) (arg1)->splineDataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_splineDataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiBSplineData > *result = 0 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiBSplineData > *)& ((arg1)->splineDataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_basisDataRef_set(void * jarg1, void * jarg2) {
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiBSplineBasisData > *arg2 = (nifly::NiBlockRef< nifly::NiBSplineBasisData > *) 0 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiBSplineBasisData > *)jarg2; 
  if (arg1) (arg1)->basisDataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_basisDataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiBSplineBasisData > *result = 0 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiBSplineBasisData > *)& ((arg1)->basisDataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineInterpolator_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSplineInterpolator() {
  void * jresult ;
  nifly::NiBSplineInterpolator *result = 0 ;
  
  result = (nifly::NiBSplineInterpolator *)new nifly::NiBSplineInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSplineInterpolator(void * jarg1) {
  nifly::NiBSplineInterpolator *arg1 = (nifly::NiBSplineInterpolator *) 0 ;
  
  arg1 = (nifly::NiBSplineInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSplineFloatInterpolator() {
  void * jresult ;
  nifly::NiBSplineFloatInterpolator *result = 0 ;
  
  result = (nifly::NiBSplineFloatInterpolator *)new nifly::NiBSplineFloatInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSplineFloatInterpolator(void * jarg1) {
  nifly::NiBSplineFloatInterpolator *arg1 = (nifly::NiBSplineFloatInterpolator *) 0 ;
  
  arg1 = (nifly::NiBSplineFloatInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_radix_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radix = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_radix_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  result = (float) ((arg1)->radix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_offset_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_offset_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  result = (uint32_t) ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_bias_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bias = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_bias_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  result = (float) ((arg1)->bias);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_multiplier_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->multiplier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_multiplier_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  result = (float) ((arg1)->multiplier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBSplineCompFloatInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompFloatInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSplineCompFloatInterpolator() {
  void * jresult ;
  nifly::NiBSplineCompFloatInterpolator *result = 0 ;
  
  result = (nifly::NiBSplineCompFloatInterpolator *)new nifly::NiBSplineCompFloatInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSplineCompFloatInterpolator(void * jarg1) {
  nifly::NiBSplineCompFloatInterpolator *arg1 = (nifly::NiBSplineCompFloatInterpolator *) 0 ;
  
  arg1 = (nifly::NiBSplineCompFloatInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplinePoint3Interpolator_value_set(void * jarg1, void * jarg2) {
  nifly::NiBSplinePoint3Interpolator *arg1 = (nifly::NiBSplinePoint3Interpolator *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiBSplinePoint3Interpolator *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBSplinePoint3Interpolator_value_get(void * jarg1) {
  void * jresult ;
  nifly::NiBSplinePoint3Interpolator *arg1 = (nifly::NiBSplinePoint3Interpolator *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiBSplinePoint3Interpolator *)jarg1; 
  result =  ((arg1)->value);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplinePoint3Interpolator_handle_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBSplinePoint3Interpolator *arg1 = (nifly::NiBSplinePoint3Interpolator *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiBSplinePoint3Interpolator *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->handle = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBSplinePoint3Interpolator_handle_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBSplinePoint3Interpolator *arg1 = (nifly::NiBSplinePoint3Interpolator *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiBSplinePoint3Interpolator *)jarg1; 
  result = (uint32_t) ((arg1)->handle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplinePoint3Interpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBSplinePoint3Interpolator *arg1 = (nifly::NiBSplinePoint3Interpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplinePoint3Interpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSplinePoint3Interpolator() {
  void * jresult ;
  nifly::NiBSplinePoint3Interpolator *result = 0 ;
  
  result = (nifly::NiBSplinePoint3Interpolator *)new nifly::NiBSplinePoint3Interpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSplinePoint3Interpolator(void * jarg1) {
  nifly::NiBSplinePoint3Interpolator *arg1 = (nifly::NiBSplinePoint3Interpolator *) 0 ;
  
  arg1 = (nifly::NiBSplinePoint3Interpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompPoint3Interpolator_positionOffset_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompPoint3Interpolator *arg1 = (nifly::NiBSplineCompPoint3Interpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompPoint3Interpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->positionOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompPoint3Interpolator_positionOffset_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompPoint3Interpolator *arg1 = (nifly::NiBSplineCompPoint3Interpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompPoint3Interpolator *)jarg1; 
  result = (float) ((arg1)->positionOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompPoint3Interpolator_positionHalfRange_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompPoint3Interpolator *arg1 = (nifly::NiBSplineCompPoint3Interpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompPoint3Interpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->positionHalfRange = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompPoint3Interpolator_positionHalfRange_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompPoint3Interpolator *arg1 = (nifly::NiBSplineCompPoint3Interpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompPoint3Interpolator *)jarg1; 
  result = (float) ((arg1)->positionHalfRange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineCompPoint3Interpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBSplineCompPoint3Interpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineCompPoint3Interpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBSplineCompPoint3Interpolator *arg1 = (nifly::NiBSplineCompPoint3Interpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBSplineCompPoint3Interpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompPoint3Interpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBSplineCompPoint3Interpolator *arg1 = (nifly::NiBSplineCompPoint3Interpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplineCompPoint3Interpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSplineCompPoint3Interpolator() {
  void * jresult ;
  nifly::NiBSplineCompPoint3Interpolator *result = 0 ;
  
  result = (nifly::NiBSplineCompPoint3Interpolator *)new nifly::NiBSplineCompPoint3Interpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSplineCompPoint3Interpolator(void * jarg1) {
  nifly::NiBSplineCompPoint3Interpolator *arg1 = (nifly::NiBSplineCompPoint3Interpolator *) 0 ;
  
  arg1 = (nifly::NiBSplineCompPoint3Interpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_translation_set(void * jarg1, void * jarg2) {
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_translation_get(void * jarg1) {
  void * jresult ;
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  result =  ((arg1)->translation);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_rotation_set(void * jarg1, void * jarg2) {
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  Quaternion arg2 ;
  Quaternion *argp2 ;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  argp2 = (Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  Quaternion result;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  result =  ((arg1)->rotation);
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_scale_set(void * jarg1, float jarg2) {
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_scale_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_translationOffset_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->translationOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_translationOffset_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  result = (uint32_t) ((arg1)->translationOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_rotationOffset_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->rotationOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_rotationOffset_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  result = (uint32_t) ((arg1)->rotationOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_scaleOffset_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->scaleOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_scaleOffset_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  result = (uint32_t) ((arg1)->scaleOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBSplineTransformInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineTransformInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSplineTransformInterpolator() {
  void * jresult ;
  nifly::NiBSplineTransformInterpolator *result = 0 ;
  
  result = (nifly::NiBSplineTransformInterpolator *)new nifly::NiBSplineTransformInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSplineTransformInterpolator(void * jarg1) {
  nifly::NiBSplineTransformInterpolator *arg1 = (nifly::NiBSplineTransformInterpolator *) 0 ;
  
  arg1 = (nifly::NiBSplineTransformInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_translationBias_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->translationBias = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_translationBias_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  result = (float) ((arg1)->translationBias);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_translationMultiplier_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->translationMultiplier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_translationMultiplier_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  result = (float) ((arg1)->translationMultiplier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_rotationBias_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rotationBias = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_rotationBias_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  result = (float) ((arg1)->rotationBias);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_rotationMultiplier_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rotationMultiplier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_rotationMultiplier_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  result = (float) ((arg1)->rotationMultiplier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_scaleBias_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scaleBias = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_scaleBias_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  result = (float) ((arg1)->scaleBias);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_scaleMultiplier_set(void * jarg1, float jarg2) {
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scaleMultiplier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_scaleMultiplier_get(void * jarg1) {
  float jresult ;
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  result = (float) ((arg1)->scaleMultiplier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBSplineCompTransformInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBSplineCompTransformInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSplineCompTransformInterpolator() {
  void * jresult ;
  nifly::NiBSplineCompTransformInterpolator *result = 0 ;
  
  result = (nifly::NiBSplineCompTransformInterpolator *)new nifly::NiBSplineCompTransformInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSplineCompTransformInterpolator(void * jarg1) {
  nifly::NiBSplineCompTransformInterpolator *arg1 = (nifly::NiBSplineCompTransformInterpolator *) 0 ;
  
  arg1 = (nifly::NiBSplineCompTransformInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_InterpBlendItem_interpolatorRef_set(void * jarg1, void * jarg2) {
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->interpolatorRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_InterpBlendItem_interpolatorRef_get(void * jarg1) {
  void * jresult ;
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->interpolatorRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_InterpBlendItem_weight_set(void * jarg1, float jarg2) {
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_InterpBlendItem_weight_get(void * jarg1) {
  float jresult ;
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  float result;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  result = (float) ((arg1)->weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_InterpBlendItem_normalizedWeight_set(void * jarg1, float jarg2) {
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->normalizedWeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_InterpBlendItem_normalizedWeight_get(void * jarg1) {
  float jresult ;
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  float result;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  result = (float) ((arg1)->normalizedWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_InterpBlendItem_priority_set(void * jarg1, unsigned char jarg2) {
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_InterpBlendItem_priority_get(void * jarg1) {
  unsigned char jresult ;
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  result = (uint8_t) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_InterpBlendItem_easeSpinner_set(void * jarg1, float jarg2) {
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->easeSpinner = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_InterpBlendItem_easeSpinner_get(void * jarg1) {
  float jresult ;
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  float result;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  result = (float) ((arg1)->easeSpinner);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_InterpBlendItem_Sync(void * jarg1, void * jarg2) {
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_InterpBlendItem() {
  void * jresult ;
  nifly::InterpBlendItem *result = 0 ;
  
  result = (nifly::InterpBlendItem *)new nifly::InterpBlendItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_InterpBlendItem(void * jarg1) {
  nifly::InterpBlendItem *arg1 = (nifly::InterpBlendItem *) 0 ;
  
  arg1 = (nifly::InterpBlendItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_flags_set(void * jarg1, int jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  nifly::InterpBlendFlags arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (nifly::InterpBlendFlags)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_flags_get(void * jarg1) {
  int jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  nifly::InterpBlendFlags result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (nifly::InterpBlendFlags) ((arg1)->flags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_arraySize_set(void * jarg1, unsigned char jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->arraySize = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_arraySize_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (uint8_t) ((arg1)->arraySize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_weightThreshold_set(void * jarg1, float jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->weightThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_weightThreshold_get(void * jarg1) {
  float jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (float) ((arg1)->weightThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_interpCount_set(void * jarg1, unsigned char jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->interpCount = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_interpCount_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (uint8_t) ((arg1)->interpCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_singleIndex_set(void * jarg1, unsigned char jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->singleIndex = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_singleIndex_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (uint8_t) ((arg1)->singleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_highPriority_set(void * jarg1, char jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  char arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->highPriority = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_highPriority_get(void * jarg1) {
  char jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  char result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (char) ((arg1)->highPriority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_nextHighPriority_set(void * jarg1, char jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  char arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->nextHighPriority = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_nextHighPriority_get(void * jarg1) {
  char jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  char result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (char) ((arg1)->nextHighPriority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_singleTime_set(void * jarg1, float jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->singleTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_singleTime_get(void * jarg1) {
  float jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (float) ((arg1)->singleTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_highWeightsSum_set(void * jarg1, float jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->highWeightsSum = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_highWeightsSum_get(void * jarg1) {
  float jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (float) ((arg1)->highWeightsSum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_nextHighWeightsSum_set(void * jarg1, float jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->nextHighWeightsSum = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_nextHighWeightsSum_get(void * jarg1) {
  float jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (float) ((arg1)->nextHighWeightsSum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_highEaseSpinner_set(void * jarg1, float jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->highEaseSpinner = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_highEaseSpinner_get(void * jarg1) {
  float jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (float) ((arg1)->highEaseSpinner);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_interpItems_set(void * jarg1, void * jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  std::vector< nifly::InterpBlendItem > *arg2 = (std::vector< nifly::InterpBlendItem > *) 0 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (std::vector< nifly::InterpBlendItem > *)jarg2; 
  if (arg1) (arg1)->interpItems = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_interpItems_get(void * jarg1) {
  void * jresult ;
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  std::vector< nifly::InterpBlendItem > *result = 0 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  result = (std::vector< nifly::InterpBlendItem > *)& ((arg1)->interpItems);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBlendInterpolator() {
  void * jresult ;
  nifly::NiBlendInterpolator *result = 0 ;
  
  result = (nifly::NiBlendInterpolator *)new nifly::NiBlendInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBlendInterpolator(void * jarg1) {
  nifly::NiBlendInterpolator *arg1 = (nifly::NiBlendInterpolator *) 0 ;
  
  arg1 = (nifly::NiBlendInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendBoolInterpolator_value_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBlendBoolInterpolator *arg1 = (nifly::NiBlendBoolInterpolator *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiBlendBoolInterpolator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBlendBoolInterpolator_value_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBlendBoolInterpolator *arg1 = (nifly::NiBlendBoolInterpolator *) 0 ;
  bool result;
  
  arg1 = (nifly::NiBlendBoolInterpolator *)jarg1; 
  result = (bool) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBlendBoolInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBlendBoolInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBlendBoolInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBlendBoolInterpolator *arg1 = (nifly::NiBlendBoolInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBlendBoolInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendBoolInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBlendBoolInterpolator *arg1 = (nifly::NiBlendBoolInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBlendBoolInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBlendBoolInterpolator() {
  void * jresult ;
  nifly::NiBlendBoolInterpolator *result = 0 ;
  
  result = (nifly::NiBlendBoolInterpolator *)new nifly::NiBlendBoolInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBlendBoolInterpolator(void * jarg1) {
  nifly::NiBlendBoolInterpolator *arg1 = (nifly::NiBlendBoolInterpolator *) 0 ;
  
  arg1 = (nifly::NiBlendBoolInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendFloatInterpolator_value_set(void * jarg1, float jarg2) {
  nifly::NiBlendFloatInterpolator *arg1 = (nifly::NiBlendFloatInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiBlendFloatInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiBlendFloatInterpolator_value_get(void * jarg1) {
  float jresult ;
  nifly::NiBlendFloatInterpolator *arg1 = (nifly::NiBlendFloatInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiBlendFloatInterpolator *)jarg1; 
  result = (float) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBlendFloatInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBlendFloatInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBlendFloatInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBlendFloatInterpolator *arg1 = (nifly::NiBlendFloatInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBlendFloatInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendFloatInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBlendFloatInterpolator *arg1 = (nifly::NiBlendFloatInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBlendFloatInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBlendFloatInterpolator() {
  void * jresult ;
  nifly::NiBlendFloatInterpolator *result = 0 ;
  
  result = (nifly::NiBlendFloatInterpolator *)new nifly::NiBlendFloatInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBlendFloatInterpolator(void * jarg1) {
  nifly::NiBlendFloatInterpolator *arg1 = (nifly::NiBlendFloatInterpolator *) 0 ;
  
  arg1 = (nifly::NiBlendFloatInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendPoint3Interpolator_point_set(void * jarg1, void * jarg2) {
  nifly::NiBlendPoint3Interpolator *arg1 = (nifly::NiBlendPoint3Interpolator *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiBlendPoint3Interpolator *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->point = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBlendPoint3Interpolator_point_get(void * jarg1) {
  void * jresult ;
  nifly::NiBlendPoint3Interpolator *arg1 = (nifly::NiBlendPoint3Interpolator *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiBlendPoint3Interpolator *)jarg1; 
  result =  ((arg1)->point);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBlendPoint3Interpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBlendPoint3Interpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBlendPoint3Interpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBlendPoint3Interpolator *arg1 = (nifly::NiBlendPoint3Interpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBlendPoint3Interpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBlendPoint3Interpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBlendPoint3Interpolator *arg1 = (nifly::NiBlendPoint3Interpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBlendPoint3Interpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBlendPoint3Interpolator() {
  void * jresult ;
  nifly::NiBlendPoint3Interpolator *result = 0 ;
  
  result = (nifly::NiBlendPoint3Interpolator *)new nifly::NiBlendPoint3Interpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBlendPoint3Interpolator(void * jarg1) {
  nifly::NiBlendPoint3Interpolator *arg1 = (nifly::NiBlendPoint3Interpolator *) 0 ;
  
  arg1 = (nifly::NiBlendPoint3Interpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBlendTransformInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBlendTransformInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBlendTransformInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBlendTransformInterpolator *arg1 = (nifly::NiBlendTransformInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBlendTransformInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBlendTransformInterpolator() {
  void * jresult ;
  nifly::NiBlendTransformInterpolator *result = 0 ;
  
  result = (nifly::NiBlendTransformInterpolator *)new nifly::NiBlendTransformInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBlendTransformInterpolator(void * jarg1) {
  nifly::NiBlendTransformInterpolator *arg1 = (nifly::NiBlendTransformInterpolator *) 0 ;
  
  arg1 = (nifly::NiBlendTransformInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiKeyBasedInterpolator() {
  void * jresult ;
  nifly::NiKeyBasedInterpolator *result = 0 ;
  
  result = (nifly::NiKeyBasedInterpolator *)new nifly::NiKeyBasedInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiKeyBasedInterpolator(void * jarg1) {
  nifly::NiKeyBasedInterpolator *arg1 = (nifly::NiKeyBasedInterpolator *) 0 ;
  
  arg1 = (nifly::NiKeyBasedInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoolInterpolator_boolValue_set(void * jarg1, unsigned char jarg2) {
  nifly::NiBoolInterpolator *arg1 = (nifly::NiBoolInterpolator *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiBoolInterpolator *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->boolValue = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiBoolInterpolator_boolValue_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiBoolInterpolator *arg1 = (nifly::NiBoolInterpolator *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiBoolInterpolator *)jarg1; 
  result = (uint8_t) ((arg1)->boolValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoolInterpolator_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiBoolInterpolator *arg1 = (nifly::NiBoolInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiBoolData > *arg2 = (nifly::NiBlockRef< nifly::NiBoolData > *) 0 ;
  
  arg1 = (nifly::NiBoolInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiBoolData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBoolInterpolator_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiBoolInterpolator *arg1 = (nifly::NiBoolInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiBoolData > *result = 0 ;
  
  arg1 = (nifly::NiBoolInterpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiBoolData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBoolInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBoolInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBoolInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBoolInterpolator *arg1 = (nifly::NiBoolInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBoolInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoolInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiBoolInterpolator *arg1 = (nifly::NiBoolInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBoolInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoolInterpolator_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiBoolInterpolator *arg1 = (nifly::NiBoolInterpolator *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiBoolInterpolator *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoolInterpolator_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiBoolInterpolator *arg1 = (nifly::NiBoolInterpolator *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiBoolInterpolator *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBoolInterpolator() {
  void * jresult ;
  nifly::NiBoolInterpolator *result = 0 ;
  
  result = (nifly::NiBoolInterpolator *)new nifly::NiBoolInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBoolInterpolator(void * jarg1) {
  nifly::NiBoolInterpolator *arg1 = (nifly::NiBoolInterpolator *) 0 ;
  
  arg1 = (nifly::NiBoolInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBoolTimelineInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBoolTimelineInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBoolTimelineInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBoolTimelineInterpolator *arg1 = (nifly::NiBoolTimelineInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBoolTimelineInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBoolTimelineInterpolator() {
  void * jresult ;
  nifly::NiBoolTimelineInterpolator *result = 0 ;
  
  result = (nifly::NiBoolTimelineInterpolator *)new nifly::NiBoolTimelineInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBoolTimelineInterpolator(void * jarg1) {
  nifly::NiBoolTimelineInterpolator *arg1 = (nifly::NiBoolTimelineInterpolator *) 0 ;
  
  arg1 = (nifly::NiBoolTimelineInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatInterpolator_floatValue_set(void * jarg1, float jarg2) {
  nifly::NiFloatInterpolator *arg1 = (nifly::NiFloatInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiFloatInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->floatValue = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiFloatInterpolator_floatValue_get(void * jarg1) {
  float jresult ;
  nifly::NiFloatInterpolator *arg1 = (nifly::NiFloatInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiFloatInterpolator *)jarg1; 
  result = (float) ((arg1)->floatValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatInterpolator_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiFloatInterpolator *arg1 = (nifly::NiFloatInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatData > *arg2 = (nifly::NiBlockRef< nifly::NiFloatData > *) 0 ;
  
  arg1 = (nifly::NiFloatInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiFloatData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFloatInterpolator_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiFloatInterpolator *arg1 = (nifly::NiFloatInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatData > *result = 0 ;
  
  arg1 = (nifly::NiFloatInterpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiFloatData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiFloatInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiFloatInterpolator *arg1 = (nifly::NiFloatInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiFloatInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiFloatInterpolator *arg1 = (nifly::NiFloatInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiFloatInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatInterpolator_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiFloatInterpolator *arg1 = (nifly::NiFloatInterpolator *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiFloatInterpolator *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatInterpolator_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiFloatInterpolator *arg1 = (nifly::NiFloatInterpolator *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiFloatInterpolator *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiFloatInterpolator() {
  void * jresult ;
  nifly::NiFloatInterpolator *result = 0 ;
  
  result = (nifly::NiFloatInterpolator *)new nifly::NiFloatInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFloatInterpolator(void * jarg1) {
  nifly::NiFloatInterpolator *arg1 = (nifly::NiFloatInterpolator *) 0 ;
  
  arg1 = (nifly::NiFloatInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_translation_set(void * jarg1, void * jarg2) {
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_translation_get(void * jarg1) {
  void * jresult ;
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  result =  ((arg1)->translation);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_rotation_set(void * jarg1, void * jarg2) {
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  Quaternion arg2 ;
  Quaternion *argp2 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  argp2 = (Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  Quaternion result;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  result =  ((arg1)->rotation);
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_scale_set(void * jarg1, float jarg2) {
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_scale_get(void * jarg1) {
  float jresult ;
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  float result;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiTransformData > *arg2 = (nifly::NiBlockRef< nifly::NiTransformData > *) 0 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiTransformData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiTransformData > *result = 0 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiTransformData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTransformInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTransformInterpolator_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTransformInterpolator() {
  void * jresult ;
  nifly::NiTransformInterpolator *result = 0 ;
  
  result = (nifly::NiTransformInterpolator *)new nifly::NiTransformInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTransformInterpolator(void * jarg1) {
  nifly::NiTransformInterpolator *arg1 = (nifly::NiTransformInterpolator *) 0 ;
  
  arg1 = (nifly::NiTransformInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSRotAccumTransfInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSRotAccumTransfInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSRotAccumTransfInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSRotAccumTransfInterpolator *arg1 = (nifly::BSRotAccumTransfInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSRotAccumTransfInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSRotAccumTransfInterpolator() {
  void * jresult ;
  nifly::BSRotAccumTransfInterpolator *result = 0 ;
  
  result = (nifly::BSRotAccumTransfInterpolator *)new nifly::BSRotAccumTransfInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSRotAccumTransfInterpolator(void * jarg1) {
  nifly::BSRotAccumTransfInterpolator *arg1 = (nifly::BSRotAccumTransfInterpolator *) 0 ;
  
  arg1 = (nifly::BSRotAccumTransfInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPoint3Interpolator_point3Value_set(void * jarg1, void * jarg2) {
  nifly::NiPoint3Interpolator *arg1 = (nifly::NiPoint3Interpolator *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::NiPoint3Interpolator *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->point3Value = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPoint3Interpolator_point3Value_get(void * jarg1) {
  void * jresult ;
  nifly::NiPoint3Interpolator *arg1 = (nifly::NiPoint3Interpolator *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::NiPoint3Interpolator *)jarg1; 
  result =  ((arg1)->point3Value);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPoint3Interpolator_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiPoint3Interpolator *arg1 = (nifly::NiPoint3Interpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiPosData > *arg2 = (nifly::NiBlockRef< nifly::NiPosData > *) 0 ;
  
  arg1 = (nifly::NiPoint3Interpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPosData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPoint3Interpolator_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPoint3Interpolator *arg1 = (nifly::NiPoint3Interpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiPosData > *result = 0 ;
  
  arg1 = (nifly::NiPoint3Interpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPosData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPoint3Interpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPoint3Interpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPoint3Interpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPoint3Interpolator *arg1 = (nifly::NiPoint3Interpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPoint3Interpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPoint3Interpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiPoint3Interpolator *arg1 = (nifly::NiPoint3Interpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPoint3Interpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPoint3Interpolator_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPoint3Interpolator *arg1 = (nifly::NiPoint3Interpolator *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPoint3Interpolator *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPoint3Interpolator_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPoint3Interpolator *arg1 = (nifly::NiPoint3Interpolator *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPoint3Interpolator *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPoint3Interpolator() {
  void * jresult ;
  nifly::NiPoint3Interpolator *result = 0 ;
  
  result = (nifly::NiPoint3Interpolator *)new nifly::NiPoint3Interpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPoint3Interpolator(void * jarg1) {
  nifly::NiPoint3Interpolator *arg1 = (nifly::NiPoint3Interpolator *) 0 ;
  
  arg1 = (nifly::NiPoint3Interpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPathInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPathInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPathInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPathInterpolator *arg1 = (nifly::NiPathInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPathInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiPathInterpolator *arg1 = (nifly::NiPathInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPathInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathInterpolator_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPathInterpolator *arg1 = (nifly::NiPathInterpolator *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPathInterpolator *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathInterpolator_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPathInterpolator *arg1 = (nifly::NiPathInterpolator *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPathInterpolator *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPathInterpolator() {
  void * jresult ;
  nifly::NiPathInterpolator *result = 0 ;
  
  result = (nifly::NiPathInterpolator *)new nifly::NiPathInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPathInterpolator(void * jarg1) {
  nifly::NiPathInterpolator *arg1 = (nifly::NiPathInterpolator *) 0 ;
  
  arg1 = (nifly::NiPathInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_flags_set(void * jarg1, int jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::LookAtFlags arg2 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (nifly::LookAtFlags)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_flags_get(void * jarg1) {
  int jresult ;
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::LookAtFlags result;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  result = (nifly::LookAtFlags) ((arg1)->flags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_lookAtRef_set(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *arg2 = (nifly::NiBlockPtr< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->lookAtRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_lookAtRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiNode > *)& ((arg1)->lookAtRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_lookAtName_set(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->lookAtName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_lookAtName_get(void * jarg1) {
  void * jresult ;
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->lookAtName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_transform_set(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  QuatTransform arg2 ;
  QuatTransform *argp2 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  argp2 = (QuatTransform *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null QuatTransform", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->transform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_transform_get(void * jarg1) {
  void * jresult ;
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  QuatTransform result;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  result =  ((arg1)->transform);
  jresult = new QuatTransform((const QuatTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_translateInterpRef_set(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiPoint3Interpolator > *arg2 = (nifly::NiBlockRef< nifly::NiPoint3Interpolator > *) 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPoint3Interpolator > *)jarg2; 
  if (arg1) (arg1)->translateInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_translateInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiPoint3Interpolator > *result = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPoint3Interpolator > *)& ((arg1)->translateInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_rollInterpRef_set(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiFloatInterpolator > *) 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiFloatInterpolator > *)jarg2; 
  if (arg1) (arg1)->rollInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_rollInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatInterpolator > *result = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiFloatInterpolator > *)& ((arg1)->rollInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_scaleInterpRef_set(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiFloatInterpolator > *) 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiFloatInterpolator > *)jarg2; 
  if (arg1) (arg1)->scaleInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_scaleInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatInterpolator > *result = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiFloatInterpolator > *)& ((arg1)->scaleInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiLookAtInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtInterpolator_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLookAtInterpolator() {
  void * jresult ;
  nifly::NiLookAtInterpolator *result = 0 ;
  
  result = (nifly::NiLookAtInterpolator *)new nifly::NiLookAtInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLookAtInterpolator(void * jarg1) {
  nifly::NiLookAtInterpolator *arg1 = (nifly::NiLookAtInterpolator *) 0 ;
  
  arg1 = (nifly::NiLookAtInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransformData_translation_set(void * jarg1, void * jarg2) {
  nifly::BSTreadTransformData *arg1 = (nifly::BSTreadTransformData *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSTreadTransformData *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTreadTransformData_translation_get(void * jarg1) {
  void * jresult ;
  nifly::BSTreadTransformData *arg1 = (nifly::BSTreadTransformData *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSTreadTransformData *)jarg1; 
  result =  ((arg1)->translation);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransformData_rotation_set(void * jarg1, void * jarg2) {
  nifly::BSTreadTransformData *arg1 = (nifly::BSTreadTransformData *) 0 ;
  Quaternion arg2 ;
  Quaternion *argp2 ;
  
  arg1 = (nifly::BSTreadTransformData *)jarg1; 
  argp2 = (Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTreadTransformData_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::BSTreadTransformData *arg1 = (nifly::BSTreadTransformData *) 0 ;
  Quaternion result;
  
  arg1 = (nifly::BSTreadTransformData *)jarg1; 
  result =  ((arg1)->rotation);
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransformData_scale_set(void * jarg1, float jarg2) {
  nifly::BSTreadTransformData *arg1 = (nifly::BSTreadTransformData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSTreadTransformData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSTreadTransformData_scale_get(void * jarg1) {
  float jresult ;
  nifly::BSTreadTransformData *arg1 = (nifly::BSTreadTransformData *) 0 ;
  float result;
  
  arg1 = (nifly::BSTreadTransformData *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSTreadTransformData() {
  void * jresult ;
  nifly::BSTreadTransformData *result = 0 ;
  
  result = (nifly::BSTreadTransformData *)new nifly::BSTreadTransformData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSTreadTransformData(void * jarg1) {
  nifly::BSTreadTransformData *arg1 = (nifly::BSTreadTransformData *) 0 ;
  
  arg1 = (nifly::BSTreadTransformData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransform_name_set(void * jarg1, void * jarg2) {
  nifly::BSTreadTransform *arg1 = (nifly::BSTreadTransform *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::BSTreadTransform *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTreadTransform_name_get(void * jarg1) {
  void * jresult ;
  nifly::BSTreadTransform *arg1 = (nifly::BSTreadTransform *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::BSTreadTransform *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransform_transform1_set(void * jarg1, void * jarg2) {
  nifly::BSTreadTransform *arg1 = (nifly::BSTreadTransform *) 0 ;
  nifly::BSTreadTransformData *arg2 = (nifly::BSTreadTransformData *) 0 ;
  
  arg1 = (nifly::BSTreadTransform *)jarg1; 
  arg2 = (nifly::BSTreadTransformData *)jarg2; 
  if (arg1) (arg1)->transform1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTreadTransform_transform1_get(void * jarg1) {
  void * jresult ;
  nifly::BSTreadTransform *arg1 = (nifly::BSTreadTransform *) 0 ;
  nifly::BSTreadTransformData *result = 0 ;
  
  arg1 = (nifly::BSTreadTransform *)jarg1; 
  result = (nifly::BSTreadTransformData *)& ((arg1)->transform1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransform_transform2_set(void * jarg1, void * jarg2) {
  nifly::BSTreadTransform *arg1 = (nifly::BSTreadTransform *) 0 ;
  nifly::BSTreadTransformData *arg2 = (nifly::BSTreadTransformData *) 0 ;
  
  arg1 = (nifly::BSTreadTransform *)jarg1; 
  arg2 = (nifly::BSTreadTransformData *)jarg2; 
  if (arg1) (arg1)->transform2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTreadTransform_transform2_get(void * jarg1) {
  void * jresult ;
  nifly::BSTreadTransform *arg1 = (nifly::BSTreadTransform *) 0 ;
  nifly::BSTreadTransformData *result = 0 ;
  
  arg1 = (nifly::BSTreadTransform *)jarg1; 
  result = (nifly::BSTreadTransformData *)& ((arg1)->transform2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransform_Sync(void * jarg1, void * jarg2) {
  nifly::BSTreadTransform *arg1 = (nifly::BSTreadTransform *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSTreadTransform *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransform_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::BSTreadTransform *arg1 = (nifly::BSTreadTransform *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSTreadTransform *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSTreadTransform() {
  void * jresult ;
  nifly::BSTreadTransform *result = 0 ;
  
  result = (nifly::BSTreadTransform *)new nifly::BSTreadTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSTreadTransform(void * jarg1) {
  nifly::BSTreadTransform *arg1 = (nifly::BSTreadTransform *) 0 ;
  
  arg1 = (nifly::BSTreadTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_dataRef_set(void * jarg1, void * jarg2) {
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatData > *arg2 = (nifly::NiBlockRef< nifly::NiFloatData > *) 0 ;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiFloatData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatData > *result = 0 ;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiFloatData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSTreadTransfInterpolator::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_Sync(void * jarg1, void * jarg2) {
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_GetTreadTransforms(void * jarg1) {
  void * jresult ;
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  SwigValueWrapper< std::vector< nifly::BSTreadTransform > > result;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  result = ((nifly::BSTreadTransfInterpolator const *)arg1)->GetTreadTransforms();
  jresult = new std::vector< nifly::BSTreadTransform >((const std::vector< nifly::BSTreadTransform > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTreadTransfInterpolator_SetTreadTransforms(void * jarg1, void * jarg2) {
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  std::vector< nifly::BSTreadTransform > *arg2 = 0 ;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  arg2 = (std::vector< nifly::BSTreadTransform > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSTreadTransform > const & type is null", 0);
    return ;
  } 
  (arg1)->SetTreadTransforms((std::vector< nifly::BSTreadTransform > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSTreadTransfInterpolator() {
  void * jresult ;
  nifly::BSTreadTransfInterpolator *result = 0 ;
  
  result = (nifly::BSTreadTransfInterpolator *)new nifly::BSTreadTransfInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSTreadTransfInterpolator(void * jarg1) {
  nifly::BSTreadTransfInterpolator *arg1 = (nifly::BSTreadTransfInterpolator *) 0 ;
  
  arg1 = (nifly::BSTreadTransfInterpolator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_nextControllerRef_set(void * jarg1, void * jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  nifly::NiBlockRef< nifly::NiTimeController > *arg2 = (nifly::NiBlockRef< nifly::NiTimeController > *) 0 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiTimeController > *)jarg2; 
  if (arg1) (arg1)->nextControllerRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTimeController_nextControllerRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  nifly::NiBlockRef< nifly::NiTimeController > *result = 0 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiTimeController > *)& ((arg1)->nextControllerRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiTimeController_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_frequency_set(void * jarg1, float jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frequency = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiTimeController_frequency_get(void * jarg1) {
  float jresult ;
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  float result;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  result = (float) ((arg1)->frequency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_phase_set(void * jarg1, float jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->phase = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiTimeController_phase_get(void * jarg1) {
  float jresult ;
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  float result;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  result = (float) ((arg1)->phase);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_startTime_set(void * jarg1, float jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->startTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiTimeController_startTime_get(void * jarg1) {
  float jresult ;
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  float result;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  result = (float) ((arg1)->startTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_stopTime_set(void * jarg1, float jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->stopTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiTimeController_stopTime_get(void * jarg1) {
  float jresult ;
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  float result;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  result = (float) ((arg1)->stopTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_targetRef_set(void * jarg1, void * jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  nifly::NiBlockPtr< nifly::NiObjectNET > *arg2 = (nifly::NiBlockPtr< nifly::NiObjectNET > *) 0 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiObjectNET > *)jarg2; 
  if (arg1) (arg1)->targetRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTimeController_targetRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  nifly::NiBlockPtr< nifly::NiObjectNET > *result = 0 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiObjectNET > *)& ((arg1)->targetRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_Sync(void * jarg1, void * jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTimeController_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTimeController() {
  void * jresult ;
  nifly::NiTimeController *result = 0 ;
  
  result = (nifly::NiTimeController *)new nifly::NiTimeController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTimeController(void * jarg1) {
  nifly::NiTimeController *arg1 = (nifly::NiTimeController *) 0 ;
  
  arg1 = (nifly::NiTimeController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtController_lookAtFlags_set(void * jarg1, int jarg2) {
  nifly::NiLookAtController *arg1 = (nifly::NiLookAtController *) 0 ;
  nifly::LookAtFlags arg2 ;
  
  arg1 = (nifly::NiLookAtController *)jarg1; 
  arg2 = (nifly::LookAtFlags)jarg2; 
  if (arg1) (arg1)->lookAtFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiLookAtController_lookAtFlags_get(void * jarg1) {
  int jresult ;
  nifly::NiLookAtController *arg1 = (nifly::NiLookAtController *) 0 ;
  nifly::LookAtFlags result;
  
  arg1 = (nifly::NiLookAtController *)jarg1; 
  result = (nifly::LookAtFlags) ((arg1)->lookAtFlags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtController_lookAtNodePtr_set(void * jarg1, void * jarg2) {
  nifly::NiLookAtController *arg1 = (nifly::NiLookAtController *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *arg2 = (nifly::NiBlockPtr< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiLookAtController *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->lookAtNodePtr = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLookAtController_lookAtNodePtr_get(void * jarg1) {
  void * jresult ;
  nifly::NiLookAtController *arg1 = (nifly::NiLookAtController *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::NiLookAtController *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiNode > *)& ((arg1)->lookAtNodePtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLookAtController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiLookAtController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLookAtController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiLookAtController *arg1 = (nifly::NiLookAtController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiLookAtController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtController_Sync(void * jarg1, void * jarg2) {
  nifly::NiLookAtController *arg1 = (nifly::NiLookAtController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiLookAtController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLookAtController_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiLookAtController *arg1 = (nifly::NiLookAtController *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiLookAtController *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLookAtController() {
  void * jresult ;
  nifly::NiLookAtController *result = 0 ;
  
  result = (nifly::NiLookAtController *)new nifly::NiLookAtController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLookAtController(void * jarg1) {
  nifly::NiLookAtController *arg1 = (nifly::NiLookAtController *) 0 ;
  
  arg1 = (nifly::NiLookAtController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_pathFlags_set(void * jarg1, int jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  nifly::PathFlags arg2 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (nifly::PathFlags)jarg2; 
  if (arg1) (arg1)->pathFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiPathController_pathFlags_get(void * jarg1) {
  int jresult ;
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  nifly::PathFlags result;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  result = (nifly::PathFlags) ((arg1)->pathFlags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_bankDir_set(void * jarg1, int jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bankDir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiPathController_bankDir_get(void * jarg1) {
  int jresult ;
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  int result;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  result = (int) ((arg1)->bankDir);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_maxBankAngle_set(void * jarg1, float jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxBankAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPathController_maxBankAngle_get(void * jarg1) {
  float jresult ;
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  float result;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  result = (float) ((arg1)->maxBankAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_smoothing_set(void * jarg1, float jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->smoothing = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPathController_smoothing_get(void * jarg1) {
  float jresult ;
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  float result;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  result = (float) ((arg1)->smoothing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_followAxis_set(void * jarg1, unsigned short jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->followAxis = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiPathController_followAxis_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  result = (uint16_t) ((arg1)->followAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_pathDataRef_set(void * jarg1, void * jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  nifly::NiBlockRef< nifly::NiPosData > *arg2 = (nifly::NiBlockRef< nifly::NiPosData > *) 0 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPosData > *)jarg2; 
  if (arg1) (arg1)->pathDataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPathController_pathDataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  nifly::NiBlockRef< nifly::NiPosData > *result = 0 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPosData > *)& ((arg1)->pathDataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_percentDataRef_set(void * jarg1, void * jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatData > *arg2 = (nifly::NiBlockRef< nifly::NiFloatData > *) 0 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiFloatData > *)jarg2; 
  if (arg1) (arg1)->percentDataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPathController_percentDataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatData > *result = 0 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiFloatData > *)& ((arg1)->percentDataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPathController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPathController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPathController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_Sync(void * jarg1, void * jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPathController_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPathController() {
  void * jresult ;
  nifly::NiPathController *result = 0 ;
  
  result = (nifly::NiPathController *)new nifly::NiPathController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPathController(void * jarg1) {
  nifly::NiPathController *arg1 = (nifly::NiPathController *) 0 ;
  
  arg1 = (nifly::NiPathController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysResetOnLoopCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysResetOnLoopCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysResetOnLoopCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysResetOnLoopCtlr *arg1 = (nifly::NiPSysResetOnLoopCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysResetOnLoopCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysResetOnLoopCtlr() {
  void * jresult ;
  nifly::NiPSysResetOnLoopCtlr *result = 0 ;
  
  result = (nifly::NiPSysResetOnLoopCtlr *)new nifly::NiPSysResetOnLoopCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysResetOnLoopCtlr(void * jarg1) {
  nifly::NiPSysResetOnLoopCtlr *arg1 = (nifly::NiPSysResetOnLoopCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysResetOnLoopCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVData_uTrans_set(void * jarg1, void * jarg2) {
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  KeyGroup< float > arg2 ;
  KeyGroup< float > *argp2 ;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  argp2 = (KeyGroup< float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< float >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->uTrans = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiUVData_uTrans_get(void * jarg1) {
  void * jresult ;
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  KeyGroup< float > result;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  result =  ((arg1)->uTrans);
  jresult = new KeyGroup< float >((const KeyGroup< float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVData_vTrans_set(void * jarg1, void * jarg2) {
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  KeyGroup< float > arg2 ;
  KeyGroup< float > *argp2 ;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  argp2 = (KeyGroup< float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< float >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vTrans = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiUVData_vTrans_get(void * jarg1) {
  void * jresult ;
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  KeyGroup< float > result;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  result =  ((arg1)->vTrans);
  jresult = new KeyGroup< float >((const KeyGroup< float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVData_uScale_set(void * jarg1, void * jarg2) {
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  KeyGroup< float > arg2 ;
  KeyGroup< float > *argp2 ;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  argp2 = (KeyGroup< float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< float >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->uScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiUVData_uScale_get(void * jarg1) {
  void * jresult ;
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  KeyGroup< float > result;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  result =  ((arg1)->uScale);
  jresult = new KeyGroup< float >((const KeyGroup< float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVData_vScale_set(void * jarg1, void * jarg2) {
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  KeyGroup< float > arg2 ;
  KeyGroup< float > *argp2 ;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  argp2 = (KeyGroup< float > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null KeyGroup< float >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiUVData_vScale_get(void * jarg1) {
  void * jresult ;
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  KeyGroup< float > result;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  result =  ((arg1)->vScale);
  jresult = new KeyGroup< float >((const KeyGroup< float > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiUVData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiUVData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiUVData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVData_Sync(void * jarg1, void * jarg2) {
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiUVData() {
  void * jresult ;
  nifly::NiUVData *result = 0 ;
  
  result = (nifly::NiUVData *)new nifly::NiUVData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiUVData(void * jarg1) {
  nifly::NiUVData *arg1 = (nifly::NiUVData *) 0 ;
  
  arg1 = (nifly::NiUVData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVController_textureSet_set(void * jarg1, unsigned short jarg2) {
  nifly::NiUVController *arg1 = (nifly::NiUVController *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiUVController *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->textureSet = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiUVController_textureSet_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiUVController *arg1 = (nifly::NiUVController *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiUVController *)jarg1; 
  result = (uint16_t) ((arg1)->textureSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVController_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiUVController *arg1 = (nifly::NiUVController *) 0 ;
  nifly::NiBlockRef< nifly::NiUVData > *arg2 = (nifly::NiBlockRef< nifly::NiUVData > *) 0 ;
  
  arg1 = (nifly::NiUVController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiUVData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiUVController_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiUVController *arg1 = (nifly::NiUVController *) 0 ;
  nifly::NiBlockRef< nifly::NiUVData > *result = 0 ;
  
  arg1 = (nifly::NiUVController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiUVData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiUVController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiUVController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiUVController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiUVController *arg1 = (nifly::NiUVController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiUVController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVController_Sync(void * jarg1, void * jarg2) {
  nifly::NiUVController *arg1 = (nifly::NiUVController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiUVController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVController_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiUVController *arg1 = (nifly::NiUVController *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiUVController *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiUVController_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiUVController *arg1 = (nifly::NiUVController *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiUVController *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiUVController() {
  void * jresult ;
  nifly::NiUVController *result = 0 ;
  
  result = (nifly::NiUVController *)new nifly::NiUVController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiUVController(void * jarg1) {
  nifly::NiUVController *arg1 = (nifly::NiUVController *) 0 ;
  
  arg1 = (nifly::NiUVController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSFrustumFOVController_interpolatorRef_set(void * jarg1, void * jarg2) {
  nifly::BSFrustumFOVController *arg1 = (nifly::BSFrustumFOVController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSFrustumFOVController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->interpolatorRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSFrustumFOVController_interpolatorRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSFrustumFOVController *arg1 = (nifly::BSFrustumFOVController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSFrustumFOVController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->interpolatorRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSFrustumFOVController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSFrustumFOVController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSFrustumFOVController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSFrustumFOVController *arg1 = (nifly::BSFrustumFOVController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSFrustumFOVController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSFrustumFOVController_Sync(void * jarg1, void * jarg2) {
  nifly::BSFrustumFOVController *arg1 = (nifly::BSFrustumFOVController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSFrustumFOVController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSFrustumFOVController_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSFrustumFOVController *arg1 = (nifly::BSFrustumFOVController *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSFrustumFOVController *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSFrustumFOVController_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSFrustumFOVController *arg1 = (nifly::BSFrustumFOVController *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSFrustumFOVController *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSFrustumFOVController() {
  void * jresult ;
  nifly::BSFrustumFOVController *result = 0 ;
  
  result = (nifly::BSFrustumFOVController *)new nifly::BSFrustumFOVController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSFrustumFOVController(void * jarg1) {
  nifly::BSFrustumFOVController *arg1 = (nifly::BSFrustumFOVController *) 0 ;
  
  arg1 = (nifly::BSFrustumFOVController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLagBoneController_linearVelocity_set(void * jarg1, float jarg2) {
  nifly::BSLagBoneController *arg1 = (nifly::BSLagBoneController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLagBoneController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->linearVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLagBoneController_linearVelocity_get(void * jarg1) {
  float jresult ;
  nifly::BSLagBoneController *arg1 = (nifly::BSLagBoneController *) 0 ;
  float result;
  
  arg1 = (nifly::BSLagBoneController *)jarg1; 
  result = (float) ((arg1)->linearVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLagBoneController_linearRotation_set(void * jarg1, float jarg2) {
  nifly::BSLagBoneController *arg1 = (nifly::BSLagBoneController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLagBoneController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->linearRotation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLagBoneController_linearRotation_get(void * jarg1) {
  float jresult ;
  nifly::BSLagBoneController *arg1 = (nifly::BSLagBoneController *) 0 ;
  float result;
  
  arg1 = (nifly::BSLagBoneController *)jarg1; 
  result = (float) ((arg1)->linearRotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLagBoneController_maxDistance_set(void * jarg1, float jarg2) {
  nifly::BSLagBoneController *arg1 = (nifly::BSLagBoneController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLagBoneController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLagBoneController_maxDistance_get(void * jarg1) {
  float jresult ;
  nifly::BSLagBoneController *arg1 = (nifly::BSLagBoneController *) 0 ;
  float result;
  
  arg1 = (nifly::BSLagBoneController *)jarg1; 
  result = (float) ((arg1)->maxDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLagBoneController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSLagBoneController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLagBoneController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSLagBoneController *arg1 = (nifly::BSLagBoneController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSLagBoneController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLagBoneController_Sync(void * jarg1, void * jarg2) {
  nifly::BSLagBoneController *arg1 = (nifly::BSLagBoneController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSLagBoneController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSLagBoneController() {
  void * jresult ;
  nifly::BSLagBoneController *result = 0 ;
  
  result = (nifly::BSLagBoneController *)new nifly::BSLagBoneController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSLagBoneController(void * jarg1) {
  nifly::BSLagBoneController *arg1 = (nifly::BSLagBoneController *) 0 ;
  
  arg1 = (nifly::BSLagBoneController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_generationInterpRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->generationInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_generationInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->generationInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_mutationInterpRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->mutationInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_mutationInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->mutationInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_subdivisionInterpRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->subdivisionInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_subdivisionInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->subdivisionInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_numBranchesInterpRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->numBranchesInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_numBranchesInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->numBranchesInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_numBranchesVarInterpRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->numBranchesVarInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_numBranchesVarInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->numBranchesVarInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_lengthInterpRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->lengthInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_lengthInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->lengthInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_lengthVarInterpRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->lengthVarInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_lengthVarInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->lengthVarInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_widthInterpRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->widthInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_widthInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->widthInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_arcOffsetInterpRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->arcOffsetInterpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_arcOffsetInterpRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->arcOffsetInterpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_subdivisions_set(void * jarg1, unsigned short jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->subdivisions = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_subdivisions_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (uint16_t) ((arg1)->subdivisions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_numBranches_set(void * jarg1, unsigned short jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numBranches = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_numBranches_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (uint16_t) ((arg1)->numBranches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_numBranchesPerVariation_set(void * jarg1, unsigned short jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numBranchesPerVariation = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_numBranchesPerVariation_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (uint16_t) ((arg1)->numBranchesPerVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_length_set(void * jarg1, float jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_length_get(void * jarg1) {
  float jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (float) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_lengthVariation_set(void * jarg1, float jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lengthVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_lengthVariation_get(void * jarg1) {
  float jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (float) ((arg1)->lengthVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_width_set(void * jarg1, float jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_width_get(void * jarg1) {
  float jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_childWidthMult_set(void * jarg1, float jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->childWidthMult = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_childWidthMult_get(void * jarg1) {
  float jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (float) ((arg1)->childWidthMult);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_arcOffset_set(void * jarg1, float jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->arcOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_arcOffset_get(void * jarg1) {
  float jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  float result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (float) ((arg1)->arcOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_fadeMainBolt_set(void * jarg1, unsigned int jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fadeMainBolt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_fadeMainBolt_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  bool result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (bool) ((arg1)->fadeMainBolt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_fadeChildBolts_set(void * jarg1, unsigned int jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fadeChildBolts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_fadeChildBolts_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  bool result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (bool) ((arg1)->fadeChildBolts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_animateArcOffset_set(void * jarg1, unsigned int jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->animateArcOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_animateArcOffset_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  bool result;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (bool) ((arg1)->animateArcOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_shaderPropertyRef_set(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::BSShaderProperty > *arg2 = (nifly::NiBlockRef< nifly::BSShaderProperty > *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::BSShaderProperty > *)jarg2; 
  if (arg1) (arg1)->shaderPropertyRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_shaderPropertyRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiBlockRef< nifly::BSShaderProperty > *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSShaderProperty > *)& ((arg1)->shaderPropertyRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSProceduralLightningController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_Sync(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSProceduralLightningController_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSProceduralLightningController() {
  void * jresult ;
  nifly::BSProceduralLightningController *result = 0 ;
  
  result = (nifly::BSProceduralLightningController *)new nifly::BSProceduralLightningController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSProceduralLightningController(void * jarg1) {
  nifly::BSProceduralLightningController *arg1 = (nifly::BSProceduralLightningController *) 0 ;
  
  arg1 = (nifly::BSProceduralLightningController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoneLODController_lod_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->lod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBoneLODController_lod_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  result = (uint32_t) ((arg1)->lod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoneLODController_numLODs_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numLODs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBoneLODController_numLODs_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  result = (uint32_t) ((arg1)->numLODs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBoneLODController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBoneLODController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBoneLODController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoneLODController_Sync(void * jarg1, void * jarg2) {
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoneLODController_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBoneLODController_GetBoneArrays(void * jarg1) {
  void * jresult ;
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockPtrArray< nifly::NiNode > > > result;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  result = ((nifly::NiBoneLODController const *)arg1)->GetBoneArrays();
  jresult = new std::vector< nifly::NiBlockPtrArray< nifly::NiNode > >((const std::vector< nifly::NiBlockPtrArray< nifly::NiNode > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoneLODController_SetBoneArrays(void * jarg1, void * jarg2) {
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  std::vector< nifly::NiBlockPtrArray< nifly::NiNode > > *arg2 = 0 ;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  arg2 = (std::vector< nifly::NiBlockPtrArray< nifly::NiNode > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiBlockPtrArray< nifly::NiNode > > const & type is null", 0);
    return ;
  } 
  (arg1)->SetBoneArrays((std::vector< nifly::NiBlockPtrArray< nifly::NiNode > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBoneLODController() {
  void * jresult ;
  nifly::NiBoneLODController *result = 0 ;
  
  result = (nifly::NiBoneLODController *)new nifly::NiBoneLODController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBoneLODController(void * jarg1) {
  nifly::NiBoneLODController *arg1 = (nifly::NiBoneLODController *) 0 ;
  
  arg1 = (nifly::NiBoneLODController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSBoneLODController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBSBoneLODController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBSBoneLODController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBSBoneLODController *arg1 = (nifly::NiBSBoneLODController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBSBoneLODController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBSBoneLODController() {
  void * jresult ;
  nifly::NiBSBoneLODController *result = 0 ;
  
  result = (nifly::NiBSBoneLODController *)new nifly::NiBSBoneLODController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBSBoneLODController(void * jarg1) {
  nifly::NiBSBoneLODController *arg1 = (nifly::NiBSBoneLODController *) 0 ;
  
  arg1 = (nifly::NiBSBoneLODController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Morph_frameName_set(void * jarg1, void * jarg2) {
  nifly::Morph *arg1 = (nifly::Morph *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::Morph *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->frameName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Morph_frameName_get(void * jarg1) {
  void * jresult ;
  nifly::Morph *arg1 = (nifly::Morph *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::Morph *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->frameName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Morph_vectors_set(void * jarg1, void * jarg2) {
  nifly::Morph *arg1 = (nifly::Morph *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::Morph *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->vectors = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Morph_vectors_get(void * jarg1) {
  void * jresult ;
  nifly::Morph *arg1 = (nifly::Morph *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::Morph *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->vectors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Morph_Sync(void * jarg1, void * jarg2, unsigned int jarg3) {
  nifly::Morph *arg1 = (nifly::Morph *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  uint32_t arg3 ;
  
  arg1 = (nifly::Morph *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  arg3 = (uint32_t)jarg3; 
  (arg1)->Sync(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Morph_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::Morph *arg1 = (nifly::Morph *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::Morph *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Morph() {
  void * jresult ;
  nifly::Morph *result = 0 ;
  
  result = (nifly::Morph *)new nifly::Morph();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Morph(void * jarg1) {
  nifly::Morph *arg1 = (nifly::Morph *) 0 ;
  
  arg1 = (nifly::Morph *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMorphData_numVertices_set(void * jarg1, unsigned int jarg2) {
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiMorphData_numVertices_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  result = (uint32_t) ((arg1)->numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMorphData_relativeTargets_set(void * jarg1, unsigned char jarg2) {
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->relativeTargets = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiMorphData_relativeTargets_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  result = (uint8_t) ((arg1)->relativeTargets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMorphData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiMorphData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMorphData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMorphData_Sync(void * jarg1, void * jarg2) {
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMorphData_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiMorphData_GetMorphs(void * jarg1) {
  void * jresult ;
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  SwigValueWrapper< std::vector< nifly::Morph > > result;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  result = ((nifly::NiMorphData const *)arg1)->GetMorphs();
  jresult = new std::vector< nifly::Morph >((const std::vector< nifly::Morph > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMorphData_SetMorphs(void * jarg1, void * jarg2) {
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  std::vector< nifly::Morph > *arg2 = 0 ;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  arg2 = (std::vector< nifly::Morph > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Morph > const & type is null", 0);
    return ;
  } 
  (arg1)->SetMorphs((std::vector< nifly::Morph > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiMorphData() {
  void * jresult ;
  nifly::NiMorphData *result = 0 ;
  
  result = (nifly::NiMorphData *)new nifly::NiMorphData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiMorphData(void * jarg1) {
  nifly::NiMorphData *arg1 = (nifly::NiMorphData *) 0 ;
  
  arg1 = (nifly::NiMorphData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiInterpController() {
  void * jresult ;
  nifly::NiInterpController *result = 0 ;
  
  result = (nifly::NiInterpController *)new nifly::NiInterpController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiInterpController(void * jarg1) {
  nifly::NiInterpController *arg1 = (nifly::NiInterpController *) 0 ;
  
  arg1 = (nifly::NiInterpController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MorphWeight_interpRef_set(void * jarg1, void * jarg2) {
  nifly::MorphWeight *arg1 = (nifly::MorphWeight *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::MorphWeight *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->interpRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MorphWeight_interpRef_get(void * jarg1) {
  void * jresult ;
  nifly::MorphWeight *arg1 = (nifly::MorphWeight *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::MorphWeight *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->interpRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MorphWeight_weight_set(void * jarg1, float jarg2) {
  nifly::MorphWeight *arg1 = (nifly::MorphWeight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::MorphWeight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_MorphWeight_weight_get(void * jarg1) {
  float jresult ;
  nifly::MorphWeight *arg1 = (nifly::MorphWeight *) 0 ;
  float result;
  
  arg1 = (nifly::MorphWeight *)jarg1; 
  result = (float) ((arg1)->weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MorphWeight_Sync(void * jarg1, void * jarg2) {
  nifly::MorphWeight *arg1 = (nifly::MorphWeight *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::MorphWeight *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MorphWeight_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::MorphWeight *arg1 = (nifly::MorphWeight *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::MorphWeight *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MorphWeight_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::MorphWeight *arg1 = (nifly::MorphWeight *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::MorphWeight *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_MorphWeight() {
  void * jresult ;
  nifly::MorphWeight *result = 0 ;
  
  result = (nifly::MorphWeight *)new nifly::MorphWeight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_MorphWeight(void * jarg1) {
  nifly::MorphWeight *arg1 = (nifly::MorphWeight *) 0 ;
  
  arg1 = (nifly::MorphWeight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_morpherFlags_set(void * jarg1, int jarg2) {
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  nifly::GeomMorpherFlags arg2 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  arg2 = (nifly::GeomMorpherFlags)jarg2; 
  if (arg1) (arg1)->morpherFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_morpherFlags_get(void * jarg1) {
  int jresult ;
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  nifly::GeomMorpherFlags result;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  result = (nifly::GeomMorpherFlags) ((arg1)->morpherFlags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  nifly::NiBlockRef< nifly::NiMorphData > *arg2 = (nifly::NiBlockRef< nifly::NiMorphData > *) 0 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiMorphData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  nifly::NiBlockRef< nifly::NiMorphData > *result = 0 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiMorphData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_alwaysUpdate_set(void * jarg1, unsigned int jarg2) {
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->alwaysUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_alwaysUpdate_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  result = (bool) ((arg1)->alwaysUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiGeomMorpherController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_Sync(void * jarg1, void * jarg2) {
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_GetInterpWeights(void * jarg1) {
  void * jresult ;
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  SwigValueWrapper< std::vector< nifly::MorphWeight > > result;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  result = ((nifly::NiGeomMorpherController const *)arg1)->GetInterpWeights();
  jresult = new std::vector< nifly::MorphWeight >((const std::vector< nifly::MorphWeight > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeomMorpherController_SetInterpWeights(void * jarg1, void * jarg2) {
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  std::vector< nifly::MorphWeight > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  arg2 = (std::vector< nifly::MorphWeight > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::MorphWeight > const & type is null", 0);
    return ;
  } 
  (arg1)->SetInterpWeights((std::vector< nifly::MorphWeight > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiGeomMorpherController() {
  void * jresult ;
  nifly::NiGeomMorpherController *result = 0 ;
  
  result = (nifly::NiGeomMorpherController *)new nifly::NiGeomMorpherController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiGeomMorpherController(void * jarg1) {
  nifly::NiGeomMorpherController *arg1 = (nifly::NiGeomMorpherController *) 0 ;
  
  arg1 = (nifly::NiGeomMorpherController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSingleInterpController_interpolatorRef_set(void * jarg1, void * jarg2) {
  nifly::NiSingleInterpController *arg1 = (nifly::NiSingleInterpController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpController > *arg2 = (nifly::NiBlockRef< nifly::NiInterpController > *) 0 ;
  
  arg1 = (nifly::NiSingleInterpController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpController > *)jarg2; 
  if (arg1) (arg1)->interpolatorRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSingleInterpController_interpolatorRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiSingleInterpController *arg1 = (nifly::NiSingleInterpController *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpController > *result = 0 ;
  
  arg1 = (nifly::NiSingleInterpController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpController > *)& ((arg1)->interpolatorRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSingleInterpController_Sync(void * jarg1, void * jarg2) {
  nifly::NiSingleInterpController *arg1 = (nifly::NiSingleInterpController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSingleInterpController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSingleInterpController_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiSingleInterpController *arg1 = (nifly::NiSingleInterpController *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiSingleInterpController *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSingleInterpController_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiSingleInterpController *arg1 = (nifly::NiSingleInterpController *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiSingleInterpController *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSingleInterpController() {
  void * jresult ;
  nifly::NiSingleInterpController *result = 0 ;
  
  result = (nifly::NiSingleInterpController *)new nifly::NiSingleInterpController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSingleInterpController(void * jarg1) {
  nifly::NiSingleInterpController *arg1 = (nifly::NiSingleInterpController *) 0 ;
  
  arg1 = (nifly::NiSingleInterpController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRollController_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiRollController *arg1 = (nifly::NiRollController *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatData > *arg2 = (nifly::NiBlockRef< nifly::NiFloatData > *) 0 ;
  
  arg1 = (nifly::NiRollController *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiFloatData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiRollController_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiRollController *arg1 = (nifly::NiRollController *) 0 ;
  nifly::NiBlockRef< nifly::NiFloatData > *result = 0 ;
  
  arg1 = (nifly::NiRollController *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiFloatData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiRollController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiRollController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiRollController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiRollController *arg1 = (nifly::NiRollController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiRollController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRollController_Sync(void * jarg1, void * jarg2) {
  nifly::NiRollController *arg1 = (nifly::NiRollController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiRollController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRollController_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiRollController *arg1 = (nifly::NiRollController *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiRollController *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiRollController_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiRollController *arg1 = (nifly::NiRollController *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiRollController *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiRollController() {
  void * jresult ;
  nifly::NiRollController *result = 0 ;
  
  result = (nifly::NiRollController *)new nifly::NiRollController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiRollController(void * jarg1) {
  nifly::NiRollController *arg1 = (nifly::NiRollController *) 0 ;
  
  arg1 = (nifly::NiRollController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPoint3InterpController_targetColor_set(void * jarg1, int jarg2) {
  nifly::NiPoint3InterpController *arg1 = (nifly::NiPoint3InterpController *) 0 ;
  nifly::TargetColor arg2 ;
  
  arg1 = (nifly::NiPoint3InterpController *)jarg1; 
  arg2 = (nifly::TargetColor)jarg2; 
  if (arg1) (arg1)->targetColor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiPoint3InterpController_targetColor_get(void * jarg1) {
  int jresult ;
  nifly::NiPoint3InterpController *arg1 = (nifly::NiPoint3InterpController *) 0 ;
  nifly::TargetColor result;
  
  arg1 = (nifly::NiPoint3InterpController *)jarg1; 
  result = (nifly::TargetColor) ((arg1)->targetColor);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPoint3InterpController_Sync(void * jarg1, void * jarg2) {
  nifly::NiPoint3InterpController *arg1 = (nifly::NiPoint3InterpController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPoint3InterpController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPoint3InterpController() {
  void * jresult ;
  nifly::NiPoint3InterpController *result = 0 ;
  
  result = (nifly::NiPoint3InterpController *)new nifly::NiPoint3InterpController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPoint3InterpController(void * jarg1) {
  nifly::NiPoint3InterpController *arg1 = (nifly::NiPoint3InterpController *) 0 ;
  
  arg1 = (nifly::NiPoint3InterpController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMaterialColorController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiMaterialColorController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMaterialColorController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiMaterialColorController *arg1 = (nifly::NiMaterialColorController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiMaterialColorController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiMaterialColorController() {
  void * jresult ;
  nifly::NiMaterialColorController *result = 0 ;
  
  result = (nifly::NiMaterialColorController *)new nifly::NiMaterialColorController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiMaterialColorController(void * jarg1) {
  nifly::NiMaterialColorController *arg1 = (nifly::NiMaterialColorController *) 0 ;
  
  arg1 = (nifly::NiMaterialColorController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLightColorController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiLightColorController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLightColorController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiLightColorController *arg1 = (nifly::NiLightColorController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiLightColorController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLightColorController() {
  void * jresult ;
  nifly::NiLightColorController *result = 0 ;
  
  result = (nifly::NiLightColorController *)new nifly::NiLightColorController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLightColorController(void * jarg1) {
  nifly::NiLightColorController *arg1 = (nifly::NiLightColorController *) 0 ;
  
  arg1 = (nifly::NiLightColorController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiExtraDataController() {
  void * jresult ;
  nifly::NiExtraDataController *result = 0 ;
  
  result = (nifly::NiExtraDataController *)new nifly::NiExtraDataController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiExtraDataController(void * jarg1) {
  nifly::NiExtraDataController *arg1 = (nifly::NiExtraDataController *) 0 ;
  
  arg1 = (nifly::NiExtraDataController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatExtraDataController_extraData_set(void * jarg1, void * jarg2) {
  nifly::NiFloatExtraDataController *arg1 = (nifly::NiFloatExtraDataController *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiFloatExtraDataController *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->extraData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFloatExtraDataController_extraData_get(void * jarg1) {
  void * jresult ;
  nifly::NiFloatExtraDataController *arg1 = (nifly::NiFloatExtraDataController *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiFloatExtraDataController *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->extraData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatExtraDataController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiFloatExtraDataController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatExtraDataController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiFloatExtraDataController *arg1 = (nifly::NiFloatExtraDataController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiFloatExtraDataController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatExtraDataController_Sync(void * jarg1, void * jarg2) {
  nifly::NiFloatExtraDataController *arg1 = (nifly::NiFloatExtraDataController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiFloatExtraDataController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatExtraDataController_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiFloatExtraDataController *arg1 = (nifly::NiFloatExtraDataController *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiFloatExtraDataController *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiFloatExtraDataController() {
  void * jresult ;
  nifly::NiFloatExtraDataController *result = 0 ;
  
  result = (nifly::NiFloatExtraDataController *)new nifly::NiFloatExtraDataController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFloatExtraDataController(void * jarg1) {
  nifly::NiFloatExtraDataController *arg1 = (nifly::NiFloatExtraDataController *) 0 ;
  
  arg1 = (nifly::NiFloatExtraDataController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVisData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiVisData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVisData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiVisData *arg1 = (nifly::NiVisData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiVisData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVisData_Sync(void * jarg1, void * jarg2) {
  nifly::NiVisData *arg1 = (nifly::NiVisData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiVisData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVisData_GetKeys(void * jarg1) {
  void * jresult ;
  nifly::NiVisData *arg1 = (nifly::NiVisData *) 0 ;
  SwigValueWrapper< std::vector< nifly::Key< unsigned char > > > result;
  
  arg1 = (nifly::NiVisData *)jarg1; 
  result = ((nifly::NiVisData const *)arg1)->GetKeys();
  jresult = new std::vector< nifly::Key< uint8_t > >((const std::vector< nifly::Key< uint8_t > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVisData_SetKeys(void * jarg1, void * jarg2) {
  nifly::NiVisData *arg1 = (nifly::NiVisData *) 0 ;
  std::vector< nifly::Key< uint8_t > > *arg2 = 0 ;
  
  arg1 = (nifly::NiVisData *)jarg1; 
  arg2 = (std::vector< nifly::Key< uint8_t > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Key< uint8_t > > const & type is null", 0);
    return ;
  } 
  (arg1)->SetKeys((std::vector< nifly::Key< uint8_t > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiVisData() {
  void * jresult ;
  nifly::NiVisData *result = 0 ;
  
  result = (nifly::NiVisData *)new nifly::NiVisData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiVisData(void * jarg1) {
  nifly::NiVisData *arg1 = (nifly::NiVisData *) 0 ;
  
  arg1 = (nifly::NiVisData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBoolInterpController() {
  void * jresult ;
  nifly::NiBoolInterpController *result = 0 ;
  
  result = (nifly::NiBoolInterpController *)new nifly::NiBoolInterpController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBoolInterpController(void * jarg1) {
  nifly::NiBoolInterpController *arg1 = (nifly::NiBoolInterpController *) 0 ;
  
  arg1 = (nifly::NiBoolInterpController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVisController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiVisController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVisController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiVisController *arg1 = (nifly::NiVisController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiVisController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiVisController() {
  void * jresult ;
  nifly::NiVisController *result = 0 ;
  
  result = (nifly::NiVisController *)new nifly::NiVisController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiVisController(void * jarg1) {
  nifly::NiVisController *arg1 = (nifly::NiVisController *) 0 ;
  
  arg1 = (nifly::NiVisController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiFloatInterpController() {
  void * jresult ;
  nifly::NiFloatInterpController *result = 0 ;
  
  result = (nifly::NiFloatInterpController *)new nifly::NiFloatInterpController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFloatInterpController(void * jarg1) {
  nifly::NiFloatInterpController *arg1 = (nifly::NiFloatInterpController *) 0 ;
  
  arg1 = (nifly::NiFloatInterpController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSRefractionFirePeriodController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSRefractionFirePeriodController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSRefractionFirePeriodController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSRefractionFirePeriodController *arg1 = (nifly::BSRefractionFirePeriodController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSRefractionFirePeriodController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSRefractionFirePeriodController() {
  void * jresult ;
  nifly::BSRefractionFirePeriodController *result = 0 ;
  
  result = (nifly::BSRefractionFirePeriodController *)new nifly::BSRefractionFirePeriodController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSRefractionFirePeriodController(void * jarg1) {
  nifly::BSRefractionFirePeriodController *arg1 = (nifly::BSRefractionFirePeriodController *) 0 ;
  
  arg1 = (nifly::BSRefractionFirePeriodController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFlipController_textureSlot_set(void * jarg1, int jarg2) {
  nifly::NiFlipController *arg1 = (nifly::NiFlipController *) 0 ;
  nifly::TexType arg2 ;
  
  arg1 = (nifly::NiFlipController *)jarg1; 
  arg2 = (nifly::TexType)jarg2; 
  if (arg1) (arg1)->textureSlot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiFlipController_textureSlot_get(void * jarg1) {
  int jresult ;
  nifly::NiFlipController *arg1 = (nifly::NiFlipController *) 0 ;
  nifly::TexType result;
  
  arg1 = (nifly::NiFlipController *)jarg1; 
  result = (nifly::TexType) ((arg1)->textureSlot);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFlipController_sourceRefs_set(void * jarg1, void * jarg2) {
  nifly::NiFlipController *arg1 = (nifly::NiFlipController *) 0 ;
  nifly::NiBlockRefArray< nifly::NiSourceTexture > *arg2 = (nifly::NiBlockRefArray< nifly::NiSourceTexture > *) 0 ;
  
  arg1 = (nifly::NiFlipController *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiSourceTexture > *)jarg2; 
  if (arg1) (arg1)->sourceRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFlipController_sourceRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiFlipController *arg1 = (nifly::NiFlipController *) 0 ;
  nifly::NiBlockRefArray< nifly::NiSourceTexture > *result = 0 ;
  
  arg1 = (nifly::NiFlipController *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiSourceTexture > *)& ((arg1)->sourceRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFlipController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiFlipController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFlipController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiFlipController *arg1 = (nifly::NiFlipController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiFlipController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFlipController_Sync(void * jarg1, void * jarg2) {
  nifly::NiFlipController *arg1 = (nifly::NiFlipController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiFlipController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFlipController_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiFlipController *arg1 = (nifly::NiFlipController *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiFlipController *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFlipController_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiFlipController *arg1 = (nifly::NiFlipController *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiFlipController *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiFlipController() {
  void * jresult ;
  nifly::NiFlipController *result = 0 ;
  
  result = (nifly::NiFlipController *)new nifly::NiFlipController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFlipController(void * jarg1) {
  nifly::NiFlipController *arg1 = (nifly::NiFlipController *) 0 ;
  
  arg1 = (nifly::NiFlipController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureTransformController_shaderMap_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTextureTransformController *arg1 = (nifly::NiTextureTransformController *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTextureTransformController *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->shaderMap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTextureTransformController_shaderMap_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTextureTransformController *arg1 = (nifly::NiTextureTransformController *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTextureTransformController *)jarg1; 
  result = (bool) ((arg1)->shaderMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureTransformController_textureSlot_set(void * jarg1, int jarg2) {
  nifly::NiTextureTransformController *arg1 = (nifly::NiTextureTransformController *) 0 ;
  nifly::TexType arg2 ;
  
  arg1 = (nifly::NiTextureTransformController *)jarg1; 
  arg2 = (nifly::TexType)jarg2; 
  if (arg1) (arg1)->textureSlot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiTextureTransformController_textureSlot_get(void * jarg1) {
  int jresult ;
  nifly::NiTextureTransformController *arg1 = (nifly::NiTextureTransformController *) 0 ;
  nifly::TexType result;
  
  arg1 = (nifly::NiTextureTransformController *)jarg1; 
  result = (nifly::TexType) ((arg1)->textureSlot);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureTransformController_operation_set(void * jarg1, int jarg2) {
  nifly::NiTextureTransformController *arg1 = (nifly::NiTextureTransformController *) 0 ;
  nifly::TexTransformType arg2 ;
  
  arg1 = (nifly::NiTextureTransformController *)jarg1; 
  arg2 = (nifly::TexTransformType)jarg2; 
  if (arg1) (arg1)->operation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiTextureTransformController_operation_get(void * jarg1) {
  int jresult ;
  nifly::NiTextureTransformController *arg1 = (nifly::NiTextureTransformController *) 0 ;
  nifly::TexTransformType result;
  
  arg1 = (nifly::NiTextureTransformController *)jarg1; 
  result = (nifly::TexTransformType) ((arg1)->operation);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTextureTransformController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTextureTransformController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTextureTransformController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTextureTransformController *arg1 = (nifly::NiTextureTransformController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTextureTransformController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextureTransformController_Sync(void * jarg1, void * jarg2) {
  nifly::NiTextureTransformController *arg1 = (nifly::NiTextureTransformController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiTextureTransformController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTextureTransformController() {
  void * jresult ;
  nifly::NiTextureTransformController *result = 0 ;
  
  result = (nifly::NiTextureTransformController *)new nifly::NiTextureTransformController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTextureTransformController(void * jarg1) {
  nifly::NiTextureTransformController *arg1 = (nifly::NiTextureTransformController *) 0 ;
  
  arg1 = (nifly::NiTextureTransformController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLightDimmerController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiLightDimmerController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLightDimmerController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiLightDimmerController *arg1 = (nifly::NiLightDimmerController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiLightDimmerController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLightDimmerController() {
  void * jresult ;
  nifly::NiLightDimmerController *result = 0 ;
  
  result = (nifly::NiLightDimmerController *)new nifly::NiLightDimmerController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLightDimmerController(void * jarg1) {
  nifly::NiLightDimmerController *arg1 = (nifly::NiLightDimmerController *) 0 ;
  
  arg1 = (nifly::NiLightDimmerController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLightRadiusController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiLightRadiusController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLightRadiusController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiLightRadiusController *arg1 = (nifly::NiLightRadiusController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiLightRadiusController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLightRadiusController() {
  void * jresult ;
  nifly::NiLightRadiusController *result = 0 ;
  
  result = (nifly::NiLightRadiusController *)new nifly::NiLightRadiusController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLightRadiusController(void * jarg1) {
  nifly::NiLightRadiusController *arg1 = (nifly::NiLightRadiusController *) 0 ;
  
  arg1 = (nifly::NiLightRadiusController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAlphaController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiAlphaController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAlphaController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiAlphaController *arg1 = (nifly::NiAlphaController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiAlphaController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiAlphaController() {
  void * jresult ;
  nifly::NiAlphaController *result = 0 ;
  
  result = (nifly::NiAlphaController *)new nifly::NiAlphaController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiAlphaController(void * jarg1) {
  nifly::NiAlphaController *arg1 = (nifly::NiAlphaController *) 0 ;
  
  arg1 = (nifly::NiAlphaController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysUpdateCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysUpdateCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysUpdateCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysUpdateCtlr *arg1 = (nifly::NiPSysUpdateCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysUpdateCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysUpdateCtlr() {
  void * jresult ;
  nifly::NiPSysUpdateCtlr *result = 0 ;
  
  result = (nifly::NiPSysUpdateCtlr *)new nifly::NiPSysUpdateCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysUpdateCtlr(void * jarg1) {
  nifly::NiPSysUpdateCtlr *arg1 = (nifly::NiPSysUpdateCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysUpdateCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSNiAlphaPropertyTestRefController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSNiAlphaPropertyTestRefController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSNiAlphaPropertyTestRefController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSNiAlphaPropertyTestRefController *arg1 = (nifly::BSNiAlphaPropertyTestRefController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSNiAlphaPropertyTestRefController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSNiAlphaPropertyTestRefController() {
  void * jresult ;
  nifly::BSNiAlphaPropertyTestRefController *result = 0 ;
  
  result = (nifly::BSNiAlphaPropertyTestRefController *)new nifly::BSNiAlphaPropertyTestRefController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSNiAlphaPropertyTestRefController(void * jarg1) {
  nifly::BSNiAlphaPropertyTestRefController *arg1 = (nifly::BSNiAlphaPropertyTestRefController *) 0 ;
  
  arg1 = (nifly::BSNiAlphaPropertyTestRefController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiKeyframeController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiKeyframeController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiKeyframeController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiKeyframeController *arg1 = (nifly::NiKeyframeController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiKeyframeController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiKeyframeController() {
  void * jresult ;
  nifly::NiKeyframeController *result = 0 ;
  
  result = (nifly::NiKeyframeController *)new nifly::NiKeyframeController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiKeyframeController(void * jarg1) {
  nifly::NiKeyframeController *arg1 = (nifly::NiKeyframeController *) 0 ;
  
  arg1 = (nifly::NiKeyframeController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTransformController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTransformController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTransformController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTransformController *arg1 = (nifly::NiTransformController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTransformController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTransformController() {
  void * jresult ;
  nifly::NiTransformController *result = 0 ;
  
  result = (nifly::NiTransformController *)new nifly::NiTransformController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTransformController(void * jarg1) {
  nifly::NiTransformController *arg1 = (nifly::NiTransformController *) 0 ;
  
  arg1 = (nifly::NiTransformController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMaterialEmittanceMultController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSMaterialEmittanceMultController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMaterialEmittanceMultController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSMaterialEmittanceMultController *arg1 = (nifly::BSMaterialEmittanceMultController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSMaterialEmittanceMultController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSMaterialEmittanceMultController() {
  void * jresult ;
  nifly::BSMaterialEmittanceMultController *result = 0 ;
  
  result = (nifly::BSMaterialEmittanceMultController *)new nifly::BSMaterialEmittanceMultController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSMaterialEmittanceMultController(void * jarg1) {
  nifly::BSMaterialEmittanceMultController *arg1 = (nifly::BSMaterialEmittanceMultController *) 0 ;
  
  arg1 = (nifly::BSMaterialEmittanceMultController *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSRefractionStrengthController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSRefractionStrengthController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSRefractionStrengthController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSRefractionStrengthController *arg1 = (nifly::BSRefractionStrengthController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSRefractionStrengthController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSRefractionStrengthController() {
  void * jresult ;
  nifly::BSRefractionStrengthController *result = 0 ;
  
  result = (nifly::BSRefractionStrengthController *)new nifly::BSRefractionStrengthController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSRefractionStrengthController(void * jarg1) {
  nifly::BSRefractionStrengthController *arg1 = (nifly::BSRefractionStrengthController *) 0 ;
  
  arg1 = (nifly::BSRefractionStrengthController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyColorController_typeOfControlledColor_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderPropertyColorController *arg1 = (nifly::BSLightingShaderPropertyColorController *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSLightingShaderPropertyColorController *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->typeOfControlledColor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyColorController_typeOfControlledColor_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderPropertyColorController *arg1 = (nifly::BSLightingShaderPropertyColorController *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSLightingShaderPropertyColorController *)jarg1; 
  result = (uint32_t) ((arg1)->typeOfControlledColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyColorController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSLightingShaderPropertyColorController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyColorController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSLightingShaderPropertyColorController *arg1 = (nifly::BSLightingShaderPropertyColorController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderPropertyColorController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyColorController_Sync(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderPropertyColorController *arg1 = (nifly::BSLightingShaderPropertyColorController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderPropertyColorController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSLightingShaderPropertyColorController() {
  void * jresult ;
  nifly::BSLightingShaderPropertyColorController *result = 0 ;
  
  result = (nifly::BSLightingShaderPropertyColorController *)new nifly::BSLightingShaderPropertyColorController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSLightingShaderPropertyColorController(void * jarg1) {
  nifly::BSLightingShaderPropertyColorController *arg1 = (nifly::BSLightingShaderPropertyColorController *) 0 ;
  
  arg1 = (nifly::BSLightingShaderPropertyColorController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyFloatController_typeOfControlledVariable_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderPropertyFloatController *arg1 = (nifly::BSLightingShaderPropertyFloatController *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSLightingShaderPropertyFloatController *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->typeOfControlledVariable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyFloatController_typeOfControlledVariable_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderPropertyFloatController *arg1 = (nifly::BSLightingShaderPropertyFloatController *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSLightingShaderPropertyFloatController *)jarg1; 
  result = (uint32_t) ((arg1)->typeOfControlledVariable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyFloatController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSLightingShaderPropertyFloatController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyFloatController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSLightingShaderPropertyFloatController *arg1 = (nifly::BSLightingShaderPropertyFloatController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderPropertyFloatController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyFloatController_Sync(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderPropertyFloatController *arg1 = (nifly::BSLightingShaderPropertyFloatController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderPropertyFloatController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSLightingShaderPropertyFloatController() {
  void * jresult ;
  nifly::BSLightingShaderPropertyFloatController *result = 0 ;
  
  result = (nifly::BSLightingShaderPropertyFloatController *)new nifly::BSLightingShaderPropertyFloatController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSLightingShaderPropertyFloatController(void * jarg1) {
  nifly::BSLightingShaderPropertyFloatController *arg1 = (nifly::BSLightingShaderPropertyFloatController *) 0 ;
  
  arg1 = (nifly::BSLightingShaderPropertyFloatController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyUShortController_typeOfControlledVariable_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderPropertyUShortController *arg1 = (nifly::BSLightingShaderPropertyUShortController *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSLightingShaderPropertyUShortController *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->typeOfControlledVariable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyUShortController_typeOfControlledVariable_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderPropertyUShortController *arg1 = (nifly::BSLightingShaderPropertyUShortController *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSLightingShaderPropertyUShortController *)jarg1; 
  result = (uint32_t) ((arg1)->typeOfControlledVariable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyUShortController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSLightingShaderPropertyUShortController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyUShortController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSLightingShaderPropertyUShortController *arg1 = (nifly::BSLightingShaderPropertyUShortController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderPropertyUShortController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderPropertyUShortController_Sync(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderPropertyUShortController *arg1 = (nifly::BSLightingShaderPropertyUShortController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderPropertyUShortController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSLightingShaderPropertyUShortController() {
  void * jresult ;
  nifly::BSLightingShaderPropertyUShortController *result = 0 ;
  
  result = (nifly::BSLightingShaderPropertyUShortController *)new nifly::BSLightingShaderPropertyUShortController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSLightingShaderPropertyUShortController(void * jarg1) {
  nifly::BSLightingShaderPropertyUShortController *arg1 = (nifly::BSLightingShaderPropertyUShortController *) 0 ;
  
  arg1 = (nifly::BSLightingShaderPropertyUShortController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyColorController_typeOfControlledColor_set(void * jarg1, unsigned int jarg2) {
  nifly::BSEffectShaderPropertyColorController *arg1 = (nifly::BSEffectShaderPropertyColorController *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSEffectShaderPropertyColorController *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->typeOfControlledColor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyColorController_typeOfControlledColor_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSEffectShaderPropertyColorController *arg1 = (nifly::BSEffectShaderPropertyColorController *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSEffectShaderPropertyColorController *)jarg1; 
  result = (uint32_t) ((arg1)->typeOfControlledColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyColorController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSEffectShaderPropertyColorController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyColorController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSEffectShaderPropertyColorController *arg1 = (nifly::BSEffectShaderPropertyColorController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderPropertyColorController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyColorController_Sync(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderPropertyColorController *arg1 = (nifly::BSEffectShaderPropertyColorController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSEffectShaderPropertyColorController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSEffectShaderPropertyColorController() {
  void * jresult ;
  nifly::BSEffectShaderPropertyColorController *result = 0 ;
  
  result = (nifly::BSEffectShaderPropertyColorController *)new nifly::BSEffectShaderPropertyColorController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSEffectShaderPropertyColorController(void * jarg1) {
  nifly::BSEffectShaderPropertyColorController *arg1 = (nifly::BSEffectShaderPropertyColorController *) 0 ;
  
  arg1 = (nifly::BSEffectShaderPropertyColorController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyFloatController_typeOfControlledVariable_set(void * jarg1, unsigned int jarg2) {
  nifly::BSEffectShaderPropertyFloatController *arg1 = (nifly::BSEffectShaderPropertyFloatController *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSEffectShaderPropertyFloatController *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->typeOfControlledVariable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyFloatController_typeOfControlledVariable_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSEffectShaderPropertyFloatController *arg1 = (nifly::BSEffectShaderPropertyFloatController *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSEffectShaderPropertyFloatController *)jarg1; 
  result = (uint32_t) ((arg1)->typeOfControlledVariable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyFloatController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSEffectShaderPropertyFloatController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyFloatController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSEffectShaderPropertyFloatController *arg1 = (nifly::BSEffectShaderPropertyFloatController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderPropertyFloatController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderPropertyFloatController_Sync(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderPropertyFloatController *arg1 = (nifly::BSEffectShaderPropertyFloatController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSEffectShaderPropertyFloatController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSEffectShaderPropertyFloatController() {
  void * jresult ;
  nifly::BSEffectShaderPropertyFloatController *result = 0 ;
  
  result = (nifly::BSEffectShaderPropertyFloatController *)new nifly::BSEffectShaderPropertyFloatController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSEffectShaderPropertyFloatController(void * jarg1) {
  nifly::BSEffectShaderPropertyFloatController *arg1 = (nifly::BSEffectShaderPropertyFloatController *) 0 ;
  
  arg1 = (nifly::BSEffectShaderPropertyFloatController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMultiTargetTransformController_targetRefs_set(void * jarg1, void * jarg2) {
  nifly::NiMultiTargetTransformController *arg1 = (nifly::NiMultiTargetTransformController *) 0 ;
  nifly::NiBlockPtrShortArray< nifly::NiAVObject > *arg2 = (nifly::NiBlockPtrShortArray< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiMultiTargetTransformController *)jarg1; 
  arg2 = (nifly::NiBlockPtrShortArray< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->targetRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiMultiTargetTransformController_targetRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiMultiTargetTransformController *arg1 = (nifly::NiMultiTargetTransformController *) 0 ;
  nifly::NiBlockPtrShortArray< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiMultiTargetTransformController *)jarg1; 
  result = (nifly::NiBlockPtrShortArray< nifly::NiAVObject > *)& ((arg1)->targetRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMultiTargetTransformController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiMultiTargetTransformController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMultiTargetTransformController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiMultiTargetTransformController *arg1 = (nifly::NiMultiTargetTransformController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiMultiTargetTransformController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMultiTargetTransformController_Sync(void * jarg1, void * jarg2) {
  nifly::NiMultiTargetTransformController *arg1 = (nifly::NiMultiTargetTransformController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiMultiTargetTransformController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMultiTargetTransformController_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiMultiTargetTransformController *arg1 = (nifly::NiMultiTargetTransformController *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiMultiTargetTransformController *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiMultiTargetTransformController() {
  void * jresult ;
  nifly::NiMultiTargetTransformController *result = 0 ;
  
  result = (nifly::NiMultiTargetTransformController *)new nifly::NiMultiTargetTransformController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiMultiTargetTransformController(void * jarg1) {
  nifly::NiMultiTargetTransformController *arg1 = (nifly::NiMultiTargetTransformController *) 0 ;
  
  arg1 = (nifly::NiMultiTargetTransformController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifierCtlr_modifierName_set(void * jarg1, void * jarg2) {
  nifly::NiPSysModifierCtlr *arg1 = (nifly::NiPSysModifierCtlr *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiPSysModifierCtlr *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->modifierName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysModifierCtlr_modifierName_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysModifierCtlr *arg1 = (nifly::NiPSysModifierCtlr *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiPSysModifierCtlr *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->modifierName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifierCtlr_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysModifierCtlr *arg1 = (nifly::NiPSysModifierCtlr *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysModifierCtlr *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifierCtlr_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiPSysModifierCtlr *arg1 = (nifly::NiPSysModifierCtlr *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysModifierCtlr *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysModifierCtlr() {
  void * jresult ;
  nifly::NiPSysModifierCtlr *result = 0 ;
  
  result = (nifly::NiPSysModifierCtlr *)new nifly::NiPSysModifierCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysModifierCtlr(void * jarg1) {
  nifly::NiPSysModifierCtlr *arg1 = (nifly::NiPSysModifierCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysModifierCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysModifierBoolCtlr() {
  void * jresult ;
  nifly::NiPSysModifierBoolCtlr *result = 0 ;
  
  result = (nifly::NiPSysModifierBoolCtlr *)new nifly::NiPSysModifierBoolCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysModifierBoolCtlr(void * jarg1) {
  nifly::NiPSysModifierBoolCtlr *arg1 = (nifly::NiPSysModifierBoolCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysModifierBoolCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysModifierActiveCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysModifierActiveCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysModifierActiveCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysModifierActiveCtlr *arg1 = (nifly::NiPSysModifierActiveCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysModifierActiveCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysModifierActiveCtlr() {
  void * jresult ;
  nifly::NiPSysModifierActiveCtlr *result = 0 ;
  
  result = (nifly::NiPSysModifierActiveCtlr *)new nifly::NiPSysModifierActiveCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysModifierActiveCtlr(void * jarg1) {
  nifly::NiPSysModifierActiveCtlr *arg1 = (nifly::NiPSysModifierActiveCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysModifierActiveCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysModifierFloatCtlr() {
  void * jresult ;
  nifly::NiPSysModifierFloatCtlr *result = 0 ;
  
  result = (nifly::NiPSysModifierFloatCtlr *)new nifly::NiPSysModifierFloatCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysModifierFloatCtlr(void * jarg1) {
  nifly::NiPSysModifierFloatCtlr *arg1 = (nifly::NiPSysModifierFloatCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysModifierFloatCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterLifeSpanCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysEmitterLifeSpanCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterLifeSpanCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysEmitterLifeSpanCtlr *arg1 = (nifly::NiPSysEmitterLifeSpanCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterLifeSpanCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitterLifeSpanCtlr() {
  void * jresult ;
  nifly::NiPSysEmitterLifeSpanCtlr *result = 0 ;
  
  result = (nifly::NiPSysEmitterLifeSpanCtlr *)new nifly::NiPSysEmitterLifeSpanCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitterLifeSpanCtlr(void * jarg1) {
  nifly::NiPSysEmitterLifeSpanCtlr *arg1 = (nifly::NiPSysEmitterLifeSpanCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterLifeSpanCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterSpeedCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysEmitterSpeedCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterSpeedCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysEmitterSpeedCtlr *arg1 = (nifly::NiPSysEmitterSpeedCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterSpeedCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitterSpeedCtlr() {
  void * jresult ;
  nifly::NiPSysEmitterSpeedCtlr *result = 0 ;
  
  result = (nifly::NiPSysEmitterSpeedCtlr *)new nifly::NiPSysEmitterSpeedCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitterSpeedCtlr(void * jarg1) {
  nifly::NiPSysEmitterSpeedCtlr *arg1 = (nifly::NiPSysEmitterSpeedCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterSpeedCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterInitialRadiusCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysEmitterInitialRadiusCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterInitialRadiusCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysEmitterInitialRadiusCtlr *arg1 = (nifly::NiPSysEmitterInitialRadiusCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterInitialRadiusCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitterInitialRadiusCtlr() {
  void * jresult ;
  nifly::NiPSysEmitterInitialRadiusCtlr *result = 0 ;
  
  result = (nifly::NiPSysEmitterInitialRadiusCtlr *)new nifly::NiPSysEmitterInitialRadiusCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitterInitialRadiusCtlr(void * jarg1) {
  nifly::NiPSysEmitterInitialRadiusCtlr *arg1 = (nifly::NiPSysEmitterInitialRadiusCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterInitialRadiusCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterDeclinationCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysEmitterDeclinationCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterDeclinationCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysEmitterDeclinationCtlr *arg1 = (nifly::NiPSysEmitterDeclinationCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterDeclinationCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitterDeclinationCtlr() {
  void * jresult ;
  nifly::NiPSysEmitterDeclinationCtlr *result = 0 ;
  
  result = (nifly::NiPSysEmitterDeclinationCtlr *)new nifly::NiPSysEmitterDeclinationCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitterDeclinationCtlr(void * jarg1) {
  nifly::NiPSysEmitterDeclinationCtlr *arg1 = (nifly::NiPSysEmitterDeclinationCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterDeclinationCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysGravityStrengthCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysGravityStrengthCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysGravityStrengthCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysGravityStrengthCtlr *arg1 = (nifly::NiPSysGravityStrengthCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysGravityStrengthCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysGravityStrengthCtlr() {
  void * jresult ;
  nifly::NiPSysGravityStrengthCtlr *result = 0 ;
  
  result = (nifly::NiPSysGravityStrengthCtlr *)new nifly::NiPSysGravityStrengthCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysGravityStrengthCtlr(void * jarg1) {
  nifly::NiPSysGravityStrengthCtlr *arg1 = (nifly::NiPSysGravityStrengthCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysGravityStrengthCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterDeclinationVarCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysEmitterDeclinationVarCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterDeclinationVarCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysEmitterDeclinationVarCtlr *arg1 = (nifly::NiPSysEmitterDeclinationVarCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterDeclinationVarCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitterDeclinationVarCtlr() {
  void * jresult ;
  nifly::NiPSysEmitterDeclinationVarCtlr *result = 0 ;
  
  result = (nifly::NiPSysEmitterDeclinationVarCtlr *)new nifly::NiPSysEmitterDeclinationVarCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitterDeclinationVarCtlr(void * jarg1) {
  nifly::NiPSysEmitterDeclinationVarCtlr *arg1 = (nifly::NiPSysEmitterDeclinationVarCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterDeclinationVarCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysFieldMagnitudeCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysFieldMagnitudeCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysFieldMagnitudeCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysFieldMagnitudeCtlr *arg1 = (nifly::NiPSysFieldMagnitudeCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysFieldMagnitudeCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysFieldMagnitudeCtlr() {
  void * jresult ;
  nifly::NiPSysFieldMagnitudeCtlr *result = 0 ;
  
  result = (nifly::NiPSysFieldMagnitudeCtlr *)new nifly::NiPSysFieldMagnitudeCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysFieldMagnitudeCtlr(void * jarg1) {
  nifly::NiPSysFieldMagnitudeCtlr *arg1 = (nifly::NiPSysFieldMagnitudeCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysFieldMagnitudeCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysFieldAttenuationCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysFieldAttenuationCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysFieldAttenuationCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysFieldAttenuationCtlr *arg1 = (nifly::NiPSysFieldAttenuationCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysFieldAttenuationCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysFieldAttenuationCtlr() {
  void * jresult ;
  nifly::NiPSysFieldAttenuationCtlr *result = 0 ;
  
  result = (nifly::NiPSysFieldAttenuationCtlr *)new nifly::NiPSysFieldAttenuationCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysFieldAttenuationCtlr(void * jarg1) {
  nifly::NiPSysFieldAttenuationCtlr *arg1 = (nifly::NiPSysFieldAttenuationCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysFieldAttenuationCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysFieldMaxDistanceCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysFieldMaxDistanceCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysFieldMaxDistanceCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysFieldMaxDistanceCtlr *arg1 = (nifly::NiPSysFieldMaxDistanceCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysFieldMaxDistanceCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysFieldMaxDistanceCtlr() {
  void * jresult ;
  nifly::NiPSysFieldMaxDistanceCtlr *result = 0 ;
  
  result = (nifly::NiPSysFieldMaxDistanceCtlr *)new nifly::NiPSysFieldMaxDistanceCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysFieldMaxDistanceCtlr(void * jarg1) {
  nifly::NiPSysFieldMaxDistanceCtlr *arg1 = (nifly::NiPSysFieldMaxDistanceCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysFieldMaxDistanceCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAirFieldAirFrictionCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysAirFieldAirFrictionCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAirFieldAirFrictionCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysAirFieldAirFrictionCtlr *arg1 = (nifly::NiPSysAirFieldAirFrictionCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysAirFieldAirFrictionCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysAirFieldAirFrictionCtlr() {
  void * jresult ;
  nifly::NiPSysAirFieldAirFrictionCtlr *result = 0 ;
  
  result = (nifly::NiPSysAirFieldAirFrictionCtlr *)new nifly::NiPSysAirFieldAirFrictionCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysAirFieldAirFrictionCtlr(void * jarg1) {
  nifly::NiPSysAirFieldAirFrictionCtlr *arg1 = (nifly::NiPSysAirFieldAirFrictionCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysAirFieldAirFrictionCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAirFieldInheritVelocityCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysAirFieldInheritVelocityCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAirFieldInheritVelocityCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysAirFieldInheritVelocityCtlr *arg1 = (nifly::NiPSysAirFieldInheritVelocityCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysAirFieldInheritVelocityCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysAirFieldInheritVelocityCtlr() {
  void * jresult ;
  nifly::NiPSysAirFieldInheritVelocityCtlr *result = 0 ;
  
  result = (nifly::NiPSysAirFieldInheritVelocityCtlr *)new nifly::NiPSysAirFieldInheritVelocityCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysAirFieldInheritVelocityCtlr(void * jarg1) {
  nifly::NiPSysAirFieldInheritVelocityCtlr *arg1 = (nifly::NiPSysAirFieldInheritVelocityCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysAirFieldInheritVelocityCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAirFieldSpreadCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysAirFieldSpreadCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAirFieldSpreadCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysAirFieldSpreadCtlr *arg1 = (nifly::NiPSysAirFieldSpreadCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysAirFieldSpreadCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysAirFieldSpreadCtlr() {
  void * jresult ;
  nifly::NiPSysAirFieldSpreadCtlr *result = 0 ;
  
  result = (nifly::NiPSysAirFieldSpreadCtlr *)new nifly::NiPSysAirFieldSpreadCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysAirFieldSpreadCtlr(void * jarg1) {
  nifly::NiPSysAirFieldSpreadCtlr *arg1 = (nifly::NiPSysAirFieldSpreadCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysAirFieldSpreadCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysInitialRotSpeedCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysInitialRotSpeedCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysInitialRotSpeedCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysInitialRotSpeedCtlr *arg1 = (nifly::NiPSysInitialRotSpeedCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysInitialRotSpeedCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysInitialRotSpeedCtlr() {
  void * jresult ;
  nifly::NiPSysInitialRotSpeedCtlr *result = 0 ;
  
  result = (nifly::NiPSysInitialRotSpeedCtlr *)new nifly::NiPSysInitialRotSpeedCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysInitialRotSpeedCtlr(void * jarg1) {
  nifly::NiPSysInitialRotSpeedCtlr *arg1 = (nifly::NiPSysInitialRotSpeedCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysInitialRotSpeedCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysInitialRotSpeedVarCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysInitialRotSpeedVarCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysInitialRotSpeedVarCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysInitialRotSpeedVarCtlr *arg1 = (nifly::NiPSysInitialRotSpeedVarCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysInitialRotSpeedVarCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysInitialRotSpeedVarCtlr() {
  void * jresult ;
  nifly::NiPSysInitialRotSpeedVarCtlr *result = 0 ;
  
  result = (nifly::NiPSysInitialRotSpeedVarCtlr *)new nifly::NiPSysInitialRotSpeedVarCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysInitialRotSpeedVarCtlr(void * jarg1) {
  nifly::NiPSysInitialRotSpeedVarCtlr *arg1 = (nifly::NiPSysInitialRotSpeedVarCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysInitialRotSpeedVarCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysInitialRotAngleCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysInitialRotAngleCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysInitialRotAngleCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysInitialRotAngleCtlr *arg1 = (nifly::NiPSysInitialRotAngleCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysInitialRotAngleCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysInitialRotAngleCtlr() {
  void * jresult ;
  nifly::NiPSysInitialRotAngleCtlr *result = 0 ;
  
  result = (nifly::NiPSysInitialRotAngleCtlr *)new nifly::NiPSysInitialRotAngleCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysInitialRotAngleCtlr(void * jarg1) {
  nifly::NiPSysInitialRotAngleCtlr *arg1 = (nifly::NiPSysInitialRotAngleCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysInitialRotAngleCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysInitialRotAngleVarCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysInitialRotAngleVarCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysInitialRotAngleVarCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysInitialRotAngleVarCtlr *arg1 = (nifly::NiPSysInitialRotAngleVarCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysInitialRotAngleVarCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysInitialRotAngleVarCtlr() {
  void * jresult ;
  nifly::NiPSysInitialRotAngleVarCtlr *result = 0 ;
  
  result = (nifly::NiPSysInitialRotAngleVarCtlr *)new nifly::NiPSysInitialRotAngleVarCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysInitialRotAngleVarCtlr(void * jarg1) {
  nifly::NiPSysInitialRotAngleVarCtlr *arg1 = (nifly::NiPSysInitialRotAngleVarCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysInitialRotAngleVarCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterPlanarAngleCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysEmitterPlanarAngleCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterPlanarAngleCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysEmitterPlanarAngleCtlr *arg1 = (nifly::NiPSysEmitterPlanarAngleCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterPlanarAngleCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitterPlanarAngleCtlr() {
  void * jresult ;
  nifly::NiPSysEmitterPlanarAngleCtlr *result = 0 ;
  
  result = (nifly::NiPSysEmitterPlanarAngleCtlr *)new nifly::NiPSysEmitterPlanarAngleCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitterPlanarAngleCtlr(void * jarg1) {
  nifly::NiPSysEmitterPlanarAngleCtlr *arg1 = (nifly::NiPSysEmitterPlanarAngleCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterPlanarAngleCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterPlanarAngleVarCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysEmitterPlanarAngleVarCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterPlanarAngleVarCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysEmitterPlanarAngleVarCtlr *arg1 = (nifly::NiPSysEmitterPlanarAngleVarCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterPlanarAngleVarCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitterPlanarAngleVarCtlr() {
  void * jresult ;
  nifly::NiPSysEmitterPlanarAngleVarCtlr *result = 0 ;
  
  result = (nifly::NiPSysEmitterPlanarAngleVarCtlr *)new nifly::NiPSysEmitterPlanarAngleVarCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitterPlanarAngleVarCtlr(void * jarg1) {
  nifly::NiPSysEmitterPlanarAngleVarCtlr *arg1 = (nifly::NiPSysEmitterPlanarAngleVarCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterPlanarAngleVarCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlr_visInterpolatorRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysEmitterCtlr *arg1 = (nifly::NiPSysEmitterCtlr *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlr *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->visInterpolatorRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlr_visInterpolatorRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysEmitterCtlr *arg1 = (nifly::NiPSysEmitterCtlr *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlr *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->visInterpolatorRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysEmitterCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysEmitterCtlr *arg1 = (nifly::NiPSysEmitterCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlr_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysEmitterCtlr *arg1 = (nifly::NiPSysEmitterCtlr *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlr *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlr_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPSysEmitterCtlr *arg1 = (nifly::NiPSysEmitterCtlr *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlr *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlr_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPSysEmitterCtlr *arg1 = (nifly::NiPSysEmitterCtlr *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlr *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitterCtlr() {
  void * jresult ;
  nifly::NiPSysEmitterCtlr *result = 0 ;
  
  result = (nifly::NiPSysEmitterCtlr *)new nifly::NiPSysEmitterCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitterCtlr(void * jarg1) {
  nifly::NiPSysEmitterCtlr *arg1 = (nifly::NiPSysEmitterCtlr *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysMultiTargetEmitterCtlr_maxEmitters_set(void * jarg1, unsigned short jarg2) {
  nifly::BSPSysMultiTargetEmitterCtlr *arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->maxEmitters = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSPSysMultiTargetEmitterCtlr_maxEmitters_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSPSysMultiTargetEmitterCtlr *arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *)jarg1; 
  result = (uint16_t) ((arg1)->maxEmitters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysMultiTargetEmitterCtlr_masterParticleSystemRef_set(void * jarg1, void * jarg2) {
  nifly::BSPSysMultiTargetEmitterCtlr *arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *) 0 ;
  nifly::NiBlockPtr< nifly::BSMasterParticleSystem > *arg2 = (nifly::NiBlockPtr< nifly::BSMasterParticleSystem > *) 0 ;
  
  arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::BSMasterParticleSystem > *)jarg2; 
  if (arg1) (arg1)->masterParticleSystemRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysMultiTargetEmitterCtlr_masterParticleSystemRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysMultiTargetEmitterCtlr *arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *) 0 ;
  nifly::NiBlockPtr< nifly::BSMasterParticleSystem > *result = 0 ;
  
  arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::BSMasterParticleSystem > *)& ((arg1)->masterParticleSystemRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysMultiTargetEmitterCtlr_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysMultiTargetEmitterCtlr::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysMultiTargetEmitterCtlr_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysMultiTargetEmitterCtlr *arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysMultiTargetEmitterCtlr_Sync(void * jarg1, void * jarg2) {
  nifly::BSPSysMultiTargetEmitterCtlr *arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysMultiTargetEmitterCtlr_GetPtrs(void * jarg1, void * jarg2) {
  nifly::BSPSysMultiTargetEmitterCtlr *arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysMultiTargetEmitterCtlr() {
  void * jresult ;
  nifly::BSPSysMultiTargetEmitterCtlr *result = 0 ;
  
  result = (nifly::BSPSysMultiTargetEmitterCtlr *)new nifly::BSPSysMultiTargetEmitterCtlr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysMultiTargetEmitterCtlr(void * jarg1) {
  nifly::BSPSysMultiTargetEmitterCtlr *arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *) 0 ;
  
  arg1 = (nifly::BSPSysMultiTargetEmitterCtlr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringPalette_palette_set(void * jarg1, void * jarg2) {
  nifly::NiStringPalette *arg1 = (nifly::NiStringPalette *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::NiStringPalette *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->palette = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStringPalette_palette_get(void * jarg1) {
  void * jresult ;
  nifly::NiStringPalette *arg1 = (nifly::NiStringPalette *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::NiStringPalette *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->palette);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringPalette_length_set(void * jarg1, unsigned int jarg2) {
  nifly::NiStringPalette *arg1 = (nifly::NiStringPalette *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiStringPalette *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiStringPalette_length_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiStringPalette *arg1 = (nifly::NiStringPalette *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiStringPalette *)jarg1; 
  result = (uint32_t) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiStringPalette_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiStringPalette::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiStringPalette_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiStringPalette *arg1 = (nifly::NiStringPalette *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiStringPalette *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringPalette_Sync(void * jarg1, void * jarg2) {
  nifly::NiStringPalette *arg1 = (nifly::NiStringPalette *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiStringPalette *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStringPalette() {
  void * jresult ;
  nifly::NiStringPalette *result = 0 ;
  
  result = (nifly::NiStringPalette *)new nifly::NiStringPalette();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiStringPalette(void * jarg1) {
  nifly::NiStringPalette *arg1 = (nifly::NiStringPalette *) 0 ;
  
  arg1 = (nifly::NiStringPalette *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ControllerLink_interpolatorRef_set(void * jarg1, void * jarg2) {
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *) 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiInterpolator > *)jarg2; 
  if (arg1) (arg1)->interpolatorRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ControllerLink_interpolatorRef_get(void * jarg1) {
  void * jresult ;
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiBlockRef< nifly::NiInterpolator > *result = 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiInterpolator > *)& ((arg1)->interpolatorRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ControllerLink_controllerRef_set(void * jarg1, void * jarg2) {
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiBlockRef< nifly::NiTimeController > *arg2 = (nifly::NiBlockRef< nifly::NiTimeController > *) 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiTimeController > *)jarg2; 
  if (arg1) (arg1)->controllerRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ControllerLink_controllerRef_get(void * jarg1) {
  void * jresult ;
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiBlockRef< nifly::NiTimeController > *result = 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiTimeController > *)& ((arg1)->controllerRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ControllerLink_priority_set(void * jarg1, unsigned char jarg2) {
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_ControllerLink_priority_get(void * jarg1) {
  unsigned char jresult ;
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  result = (uint8_t) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ControllerLink_nodeName_set(void * jarg1, void * jarg2) {
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->nodeName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ControllerLink_nodeName_get(void * jarg1) {
  void * jresult ;
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->nodeName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ControllerLink_propType_set(void * jarg1, void * jarg2) {
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->propType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ControllerLink_propType_get(void * jarg1) {
  void * jresult ;
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->propType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ControllerLink_ctrlType_set(void * jarg1, void * jarg2) {
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->ctrlType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ControllerLink_ctrlType_get(void * jarg1) {
  void * jresult ;
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->ctrlType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ControllerLink_ctrlID_set(void * jarg1, void * jarg2) {
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->ctrlID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ControllerLink_ctrlID_get(void * jarg1) {
  void * jresult ;
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->ctrlID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ControllerLink_interpID_set(void * jarg1, void * jarg2) {
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->interpID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ControllerLink_interpID_get(void * jarg1) {
  void * jresult ;
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->interpID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_ControllerLink() {
  void * jresult ;
  nifly::ControllerLink *result = 0 ;
  
  result = (nifly::ControllerLink *)new nifly::ControllerLink();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_ControllerLink(void * jarg1) {
  nifly::ControllerLink *arg1 = (nifly::ControllerLink *) 0 ;
  
  arg1 = (nifly::ControllerLink *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSequence_name_set(void * jarg1, void * jarg2) {
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSequence_name_get(void * jarg1) {
  void * jresult ;
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSequence_arrayGrowBy_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->arrayGrowBy = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSequence_arrayGrowBy_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  result = (uint32_t) ((arg1)->arrayGrowBy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSequence_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSequence::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSequence_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSequence_Sync(void * jarg1, void * jarg2) {
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSequence_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSequence_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSequence_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSequence_GetControlledBlocks(void * jarg1) {
  void * jresult ;
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  SwigValueWrapper< std::vector< nifly::ControllerLink > > result;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  result = ((nifly::NiSequence const *)arg1)->GetControlledBlocks();
  jresult = new std::vector< nifly::ControllerLink >((const std::vector< nifly::ControllerLink > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSequence_SetControlledBlocks(void * jarg1, void * jarg2) {
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  std::vector< nifly::ControllerLink > *arg2 = 0 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  arg2 = (std::vector< nifly::ControllerLink > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::ControllerLink > const & type is null", 0);
    return ;
  } 
  (arg1)->SetControlledBlocks((std::vector< nifly::ControllerLink > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSequence() {
  void * jresult ;
  nifly::NiSequence *result = 0 ;
  
  result = (nifly::NiSequence *)new nifly::NiSequence();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSequence(void * jarg1) {
  nifly::NiSequence *arg1 = (nifly::NiSequence *) 0 ;
  
  arg1 = (nifly::NiSequence *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNote_type_set(void * jarg1, int jarg2) {
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  nifly::BSAnimNote::AnimNoteType arg2 ;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  arg2 = (nifly::BSAnimNote::AnimNoteType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BSAnimNote_type_get(void * jarg1) {
  int jresult ;
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  nifly::BSAnimNote::AnimNoteType result;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  result = (nifly::BSAnimNote::AnimNoteType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNote_time_set(void * jarg1, float jarg2) {
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSAnimNote_time_get(void * jarg1) {
  float jresult ;
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  float result;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  result = (float) ((arg1)->time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNote_arm_set(void * jarg1, unsigned int jarg2) {
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->arm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSAnimNote_arm_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  result = (uint32_t) ((arg1)->arm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNote_gain_set(void * jarg1, float jarg2) {
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->gain = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSAnimNote_gain_get(void * jarg1) {
  float jresult ;
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  float result;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  result = (float) ((arg1)->gain);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNote_state_set(void * jarg1, unsigned int jarg2) {
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSAnimNote_state_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  result = (uint32_t) ((arg1)->state);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSAnimNote_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSAnimNote::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSAnimNote_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNote_Sync(void * jarg1, void * jarg2) {
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSAnimNote() {
  void * jresult ;
  nifly::BSAnimNote *result = 0 ;
  
  result = (nifly::BSAnimNote *)new nifly::BSAnimNote();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSAnimNote(void * jarg1) {
  nifly::BSAnimNote *arg1 = (nifly::BSAnimNote *) 0 ;
  
  arg1 = (nifly::BSAnimNote *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNotes_animNoteRefs_set(void * jarg1, void * jarg2) {
  nifly::BSAnimNotes *arg1 = (nifly::BSAnimNotes *) 0 ;
  nifly::NiBlockRefShortArray< nifly::BSAnimNote > *arg2 = (nifly::NiBlockRefShortArray< nifly::BSAnimNote > *) 0 ;
  
  arg1 = (nifly::BSAnimNotes *)jarg1; 
  arg2 = (nifly::NiBlockRefShortArray< nifly::BSAnimNote > *)jarg2; 
  if (arg1) (arg1)->animNoteRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSAnimNotes_animNoteRefs_get(void * jarg1) {
  void * jresult ;
  nifly::BSAnimNotes *arg1 = (nifly::BSAnimNotes *) 0 ;
  nifly::NiBlockRefShortArray< nifly::BSAnimNote > *result = 0 ;
  
  arg1 = (nifly::BSAnimNotes *)jarg1; 
  result = (nifly::NiBlockRefShortArray< nifly::BSAnimNote > *)& ((arg1)->animNoteRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSAnimNotes_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSAnimNotes::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSAnimNotes_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSAnimNotes *arg1 = (nifly::BSAnimNotes *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSAnimNotes *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNotes_Sync(void * jarg1, void * jarg2) {
  nifly::BSAnimNotes *arg1 = (nifly::BSAnimNotes *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSAnimNotes *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNotes_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSAnimNotes *arg1 = (nifly::BSAnimNotes *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSAnimNotes *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSAnimNotes_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSAnimNotes *arg1 = (nifly::BSAnimNotes *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSAnimNotes *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSAnimNotes() {
  void * jresult ;
  nifly::BSAnimNotes *result = 0 ;
  
  result = (nifly::BSAnimNotes *)new nifly::BSAnimNotes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSAnimNotes(void * jarg1) {
  nifly::BSAnimNotes *arg1 = (nifly::BSAnimNotes *) 0 ;
  
  arg1 = (nifly::BSAnimNotes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_weight_set(void * jarg1, float jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiControllerSequence_weight_get(void * jarg1) {
  float jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  float result;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (float) ((arg1)->weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_textKeyRef_set(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiBlockRef< NiTextKeyExtraData > *arg2 = (nifly::NiBlockRef< NiTextKeyExtraData > *) 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (nifly::NiBlockRef< NiTextKeyExtraData > *)jarg2; 
  if (arg1) (arg1)->textKeyRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiControllerSequence_textKeyRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiBlockRef< NiTextKeyExtraData > *result = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (nifly::NiBlockRef< NiTextKeyExtraData > *)& ((arg1)->textKeyRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_cycleType_set(void * jarg1, int jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::CycleType arg2 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (nifly::CycleType)jarg2; 
  if (arg1) (arg1)->cycleType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiControllerSequence_cycleType_get(void * jarg1) {
  int jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::CycleType result;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (nifly::CycleType) ((arg1)->cycleType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_frequency_set(void * jarg1, float jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frequency = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiControllerSequence_frequency_get(void * jarg1) {
  float jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  float result;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (float) ((arg1)->frequency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_startTime_set(void * jarg1, float jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->startTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiControllerSequence_startTime_get(void * jarg1) {
  float jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  float result;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (float) ((arg1)->startTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_stopTime_set(void * jarg1, float jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->stopTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiControllerSequence_stopTime_get(void * jarg1) {
  float jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  float result;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (float) ((arg1)->stopTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_managerRef_set(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiBlockPtr< nifly::NiControllerManager > *arg2 = (nifly::NiBlockPtr< nifly::NiControllerManager > *) 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiControllerManager > *)jarg2; 
  if (arg1) (arg1)->managerRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiControllerSequence_managerRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiBlockPtr< nifly::NiControllerManager > *result = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiControllerManager > *)& ((arg1)->managerRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_accumRootName_set(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->accumRootName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiControllerSequence_accumRootName_get(void * jarg1) {
  void * jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->accumRootName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_animNotesRef_set(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiBlockRef< nifly::BSAnimNotes > *arg2 = (nifly::NiBlockRef< nifly::BSAnimNotes > *) 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::BSAnimNotes > *)jarg2; 
  if (arg1) (arg1)->animNotesRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiControllerSequence_animNotesRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiBlockRef< nifly::BSAnimNotes > *result = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSAnimNotes > *)& ((arg1)->animNotesRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_animNotesRefs_set(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiBlockRefShortArray< nifly::BSAnimNotes > *arg2 = (nifly::NiBlockRefShortArray< nifly::BSAnimNotes > *) 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (nifly::NiBlockRefShortArray< nifly::BSAnimNotes > *)jarg2; 
  if (arg1) (arg1)->animNotesRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiControllerSequence_animNotesRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiBlockRefShortArray< nifly::BSAnimNotes > *result = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (nifly::NiBlockRefShortArray< nifly::BSAnimNotes > *)& ((arg1)->animNotesRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiControllerSequence_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiControllerSequence::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiControllerSequence_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_Sync(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerSequence_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiControllerSequence() {
  void * jresult ;
  nifly::NiControllerSequence *result = 0 ;
  
  result = (nifly::NiControllerSequence *)new nifly::NiControllerSequence();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiControllerSequence(void * jarg1) {
  nifly::NiControllerSequence *arg1 = (nifly::NiControllerSequence *) 0 ;
  
  arg1 = (nifly::NiControllerSequence *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerManager_cumulative_set(void * jarg1, unsigned int jarg2) {
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cumulative = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiControllerManager_cumulative_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  bool result;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  result = (bool) ((arg1)->cumulative);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerManager_controllerSequenceRefs_set(void * jarg1, void * jarg2) {
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  nifly::NiBlockRefArray< nifly::NiControllerSequence > *arg2 = (nifly::NiBlockRefArray< nifly::NiControllerSequence > *) 0 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiControllerSequence > *)jarg2; 
  if (arg1) (arg1)->controllerSequenceRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiControllerManager_controllerSequenceRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  nifly::NiBlockRefArray< nifly::NiControllerSequence > *result = 0 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiControllerSequence > *)& ((arg1)->controllerSequenceRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerManager_objectPaletteRef_set(void * jarg1, void * jarg2) {
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  nifly::NiBlockRef< nifly::NiDefaultAVObjectPalette > *arg2 = (nifly::NiBlockRef< nifly::NiDefaultAVObjectPalette > *) 0 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiDefaultAVObjectPalette > *)jarg2; 
  if (arg1) (arg1)->objectPaletteRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiControllerManager_objectPaletteRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  nifly::NiBlockRef< nifly::NiDefaultAVObjectPalette > *result = 0 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiDefaultAVObjectPalette > *)& ((arg1)->objectPaletteRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiControllerManager_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiControllerManager::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiControllerManager_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerManager_Sync(void * jarg1, void * jarg2) {
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerManager_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiControllerManager_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiControllerManager() {
  void * jresult ;
  nifly::NiControllerManager *result = 0 ;
  
  result = (nifly::NiControllerManager *)new nifly::NiControllerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiControllerManager(void * jarg1) {
  nifly::NiControllerManager *arg1 = (nifly::NiControllerManager *) 0 ;
  
  arg1 = (nifly::NiControllerManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HavokFilter_layer_set(void * jarg1, unsigned char jarg2) {
  nifly::HavokFilter *arg1 = (nifly::HavokFilter *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::HavokFilter *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->layer = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_HavokFilter_layer_get(void * jarg1) {
  unsigned char jresult ;
  nifly::HavokFilter *arg1 = (nifly::HavokFilter *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::HavokFilter *)jarg1; 
  result = (uint8_t) ((arg1)->layer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HavokFilter_flagsAndParts_set(void * jarg1, unsigned char jarg2) {
  nifly::HavokFilter *arg1 = (nifly::HavokFilter *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::HavokFilter *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->flagsAndParts = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_HavokFilter_flagsAndParts_get(void * jarg1) {
  unsigned char jresult ;
  nifly::HavokFilter *arg1 = (nifly::HavokFilter *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::HavokFilter *)jarg1; 
  result = (uint8_t) ((arg1)->flagsAndParts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HavokFilter_group_set(void * jarg1, unsigned short jarg2) {
  nifly::HavokFilter *arg1 = (nifly::HavokFilter *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::HavokFilter *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->group = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_HavokFilter_group_get(void * jarg1) {
  unsigned short jresult ;
  nifly::HavokFilter *arg1 = (nifly::HavokFilter *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::HavokFilter *)jarg1; 
  result = (uint16_t) ((arg1)->group);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_HavokFilter() {
  void * jresult ;
  nifly::HavokFilter *result = 0 ;
  
  result = (nifly::HavokFilter *)new nifly::HavokFilter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_HavokFilter(void * jarg1) {
  nifly::HavokFilter *arg1 = (nifly::HavokFilter *) 0 ;
  
  arg1 = (nifly::HavokFilter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkWorldObjCInfoProperty_data_set(void * jarg1, unsigned int jarg2) {
  nifly::hkWorldObjCInfoProperty *arg1 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::hkWorldObjCInfoProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_hkWorldObjCInfoProperty_data_get(void * jarg1) {
  unsigned int jresult ;
  nifly::hkWorldObjCInfoProperty *arg1 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::hkWorldObjCInfoProperty *)jarg1; 
  result = (uint32_t) ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkWorldObjCInfoProperty_size_set(void * jarg1, unsigned int jarg2) {
  nifly::hkWorldObjCInfoProperty *arg1 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::hkWorldObjCInfoProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_hkWorldObjCInfoProperty_size_get(void * jarg1) {
  unsigned int jresult ;
  nifly::hkWorldObjCInfoProperty *arg1 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::hkWorldObjCInfoProperty *)jarg1; 
  result = (uint32_t) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkWorldObjCInfoProperty_capacityAndFlags_set(void * jarg1, unsigned int jarg2) {
  nifly::hkWorldObjCInfoProperty *arg1 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::hkWorldObjCInfoProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->capacityAndFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_hkWorldObjCInfoProperty_capacityAndFlags_get(void * jarg1) {
  unsigned int jresult ;
  nifly::hkWorldObjCInfoProperty *arg1 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::hkWorldObjCInfoProperty *)jarg1; 
  result = (uint32_t) ((arg1)->capacityAndFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_hkWorldObjCInfoProperty() {
  void * jresult ;
  nifly::hkWorldObjCInfoProperty *result = 0 ;
  
  result = (nifly::hkWorldObjCInfoProperty *)new nifly::hkWorldObjCInfoProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_hkWorldObjCInfoProperty(void * jarg1) {
  nifly::hkWorldObjCInfoProperty *arg1 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  
  arg1 = (nifly::hkWorldObjCInfoProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLimitedForceConstraintMotor_minForce_set(void * jarg1, float jarg2) {
  nifly::bhkLimitedForceConstraintMotor *arg1 = (nifly::bhkLimitedForceConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkLimitedForceConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkLimitedForceConstraintMotor_minForce_get(void * jarg1) {
  float jresult ;
  nifly::bhkLimitedForceConstraintMotor *arg1 = (nifly::bhkLimitedForceConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkLimitedForceConstraintMotor *)jarg1; 
  result = (float) ((arg1)->minForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLimitedForceConstraintMotor_maxForce_set(void * jarg1, float jarg2) {
  nifly::bhkLimitedForceConstraintMotor *arg1 = (nifly::bhkLimitedForceConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkLimitedForceConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkLimitedForceConstraintMotor_maxForce_get(void * jarg1) {
  float jresult ;
  nifly::bhkLimitedForceConstraintMotor *arg1 = (nifly::bhkLimitedForceConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkLimitedForceConstraintMotor *)jarg1; 
  result = (float) ((arg1)->maxForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLimitedForceConstraintMotor_motorEnabled_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkLimitedForceConstraintMotor *arg1 = (nifly::bhkLimitedForceConstraintMotor *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::bhkLimitedForceConstraintMotor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->motorEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkLimitedForceConstraintMotor_motorEnabled_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkLimitedForceConstraintMotor *arg1 = (nifly::bhkLimitedForceConstraintMotor *) 0 ;
  bool result;
  
  arg1 = (nifly::bhkLimitedForceConstraintMotor *)jarg1; 
  result = (bool) ((arg1)->motorEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkLimitedForceConstraintMotor() {
  void * jresult ;
  nifly::bhkLimitedForceConstraintMotor *result = 0 ;
  
  result = (nifly::bhkLimitedForceConstraintMotor *)new nifly::bhkLimitedForceConstraintMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkLimitedForceConstraintMotor(void * jarg1) {
  nifly::bhkLimitedForceConstraintMotor *arg1 = (nifly::bhkLimitedForceConstraintMotor *) 0 ;
  
  arg1 = (nifly::bhkLimitedForceConstraintMotor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_tau_set(void * jarg1, float jarg2) {
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tau = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_tau_get(void * jarg1) {
  float jresult ;
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  result = (float) ((arg1)->tau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_damping_set(void * jarg1, float jarg2) {
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_damping_get(void * jarg1) {
  float jresult ;
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  result = (float) ((arg1)->damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_proportionalRecoveryVelocity_set(void * jarg1, float jarg2) {
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->proportionalRecoveryVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_proportionalRecoveryVelocity_get(void * jarg1) {
  float jresult ;
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  result = (float) ((arg1)->proportionalRecoveryVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_constantRecoveryVelocity_set(void * jarg1, float jarg2) {
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->constantRecoveryVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_constantRecoveryVelocity_get(void * jarg1) {
  float jresult ;
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  result = (float) ((arg1)->constantRecoveryVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_Sync(void * jarg1, void * jarg2) {
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkPositionConstraintMotor() {
  void * jresult ;
  nifly::bhkPositionConstraintMotor *result = 0 ;
  
  result = (nifly::bhkPositionConstraintMotor *)new nifly::bhkPositionConstraintMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkPositionConstraintMotor(void * jarg1) {
  nifly::bhkPositionConstraintMotor *arg1 = (nifly::bhkPositionConstraintMotor *) 0 ;
  
  arg1 = (nifly::bhkPositionConstraintMotor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkVelocityConstraintMotor_tau_set(void * jarg1, float jarg2) {
  nifly::bhkVelocityConstraintMotor *arg1 = (nifly::bhkVelocityConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkVelocityConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tau = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkVelocityConstraintMotor_tau_get(void * jarg1) {
  float jresult ;
  nifly::bhkVelocityConstraintMotor *arg1 = (nifly::bhkVelocityConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkVelocityConstraintMotor *)jarg1; 
  result = (float) ((arg1)->tau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkVelocityConstraintMotor_velocityTarget_set(void * jarg1, float jarg2) {
  nifly::bhkVelocityConstraintMotor *arg1 = (nifly::bhkVelocityConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkVelocityConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->velocityTarget = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkVelocityConstraintMotor_velocityTarget_get(void * jarg1) {
  float jresult ;
  nifly::bhkVelocityConstraintMotor *arg1 = (nifly::bhkVelocityConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkVelocityConstraintMotor *)jarg1; 
  result = (float) ((arg1)->velocityTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkVelocityConstraintMotor_useVelocityTargetFromConstraintTargets_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkVelocityConstraintMotor *arg1 = (nifly::bhkVelocityConstraintMotor *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::bhkVelocityConstraintMotor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useVelocityTargetFromConstraintTargets = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkVelocityConstraintMotor_useVelocityTargetFromConstraintTargets_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkVelocityConstraintMotor *arg1 = (nifly::bhkVelocityConstraintMotor *) 0 ;
  bool result;
  
  arg1 = (nifly::bhkVelocityConstraintMotor *)jarg1; 
  result = (bool) ((arg1)->useVelocityTargetFromConstraintTargets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkVelocityConstraintMotor_Sync(void * jarg1, void * jarg2) {
  nifly::bhkVelocityConstraintMotor *arg1 = (nifly::bhkVelocityConstraintMotor *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkVelocityConstraintMotor *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkVelocityConstraintMotor() {
  void * jresult ;
  nifly::bhkVelocityConstraintMotor *result = 0 ;
  
  result = (nifly::bhkVelocityConstraintMotor *)new nifly::bhkVelocityConstraintMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkVelocityConstraintMotor(void * jarg1) {
  nifly::bhkVelocityConstraintMotor *arg1 = (nifly::bhkVelocityConstraintMotor *) 0 ;
  
  arg1 = (nifly::bhkVelocityConstraintMotor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkSpringDamperConstraintMotor_springConstant_set(void * jarg1, float jarg2) {
  nifly::bhkSpringDamperConstraintMotor *arg1 = (nifly::bhkSpringDamperConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkSpringDamperConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->springConstant = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkSpringDamperConstraintMotor_springConstant_get(void * jarg1) {
  float jresult ;
  nifly::bhkSpringDamperConstraintMotor *arg1 = (nifly::bhkSpringDamperConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkSpringDamperConstraintMotor *)jarg1; 
  result = (float) ((arg1)->springConstant);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkSpringDamperConstraintMotor_springDamping_set(void * jarg1, float jarg2) {
  nifly::bhkSpringDamperConstraintMotor *arg1 = (nifly::bhkSpringDamperConstraintMotor *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkSpringDamperConstraintMotor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->springDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkSpringDamperConstraintMotor_springDamping_get(void * jarg1) {
  float jresult ;
  nifly::bhkSpringDamperConstraintMotor *arg1 = (nifly::bhkSpringDamperConstraintMotor *) 0 ;
  float result;
  
  arg1 = (nifly::bhkSpringDamperConstraintMotor *)jarg1; 
  result = (float) ((arg1)->springDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkSpringDamperConstraintMotor_Sync(void * jarg1, void * jarg2) {
  nifly::bhkSpringDamperConstraintMotor *arg1 = (nifly::bhkSpringDamperConstraintMotor *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkSpringDamperConstraintMotor *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkSpringDamperConstraintMotor() {
  void * jresult ;
  nifly::bhkSpringDamperConstraintMotor *result = 0 ;
  
  result = (nifly::bhkSpringDamperConstraintMotor *)new nifly::bhkSpringDamperConstraintMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkSpringDamperConstraintMotor(void * jarg1) {
  nifly::bhkSpringDamperConstraintMotor *arg1 = (nifly::bhkSpringDamperConstraintMotor *) 0 ;
  
  arg1 = (nifly::bhkSpringDamperConstraintMotor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MotorDesc_motorType_set(void * jarg1, int jarg2) {
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  nifly::MotorType arg2 ;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  arg2 = (nifly::MotorType)jarg2; 
  if (arg1) (arg1)->motorType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_MotorDesc_motorType_get(void * jarg1) {
  int jresult ;
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  nifly::MotorType result;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  result = (nifly::MotorType) ((arg1)->motorType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MotorDesc_motorPosition_set(void * jarg1, void * jarg2) {
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  nifly::bhkPositionConstraintMotor *arg2 = (nifly::bhkPositionConstraintMotor *) 0 ;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  arg2 = (nifly::bhkPositionConstraintMotor *)jarg2; 
  if (arg1) (arg1)->motorPosition = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MotorDesc_motorPosition_get(void * jarg1) {
  void * jresult ;
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  nifly::bhkPositionConstraintMotor *result = 0 ;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  result = (nifly::bhkPositionConstraintMotor *)& ((arg1)->motorPosition);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MotorDesc_motorVelocity_set(void * jarg1, void * jarg2) {
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  nifly::bhkVelocityConstraintMotor *arg2 = (nifly::bhkVelocityConstraintMotor *) 0 ;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  arg2 = (nifly::bhkVelocityConstraintMotor *)jarg2; 
  if (arg1) (arg1)->motorVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MotorDesc_motorVelocity_get(void * jarg1) {
  void * jresult ;
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  nifly::bhkVelocityConstraintMotor *result = 0 ;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  result = (nifly::bhkVelocityConstraintMotor *)& ((arg1)->motorVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MotorDesc_motorSpringDamper_set(void * jarg1, void * jarg2) {
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  nifly::bhkSpringDamperConstraintMotor *arg2 = (nifly::bhkSpringDamperConstraintMotor *) 0 ;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  arg2 = (nifly::bhkSpringDamperConstraintMotor *)jarg2; 
  if (arg1) (arg1)->motorSpringDamper = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MotorDesc_motorSpringDamper_get(void * jarg1) {
  void * jresult ;
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  nifly::bhkSpringDamperConstraintMotor *result = 0 ;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  result = (nifly::bhkSpringDamperConstraintMotor *)& ((arg1)->motorSpringDamper);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MotorDesc_Sync(void * jarg1, void * jarg2) {
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_MotorDesc() {
  void * jresult ;
  nifly::MotorDesc *result = 0 ;
  
  result = (nifly::MotorDesc *)new nifly::MotorDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_MotorDesc(void * jarg1) {
  nifly::MotorDesc *arg1 = (nifly::MotorDesc *) 0 ;
  
  arg1 = (nifly::MotorDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HingeDesc_axleA_set(void * jarg1, void * jarg2) {
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->axleA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HingeDesc_axleA_get(void * jarg1) {
  void * jresult ;
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  result =  ((arg1)->axleA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HingeDesc_axleInA1_set(void * jarg1, void * jarg2) {
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->axleInA1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HingeDesc_axleInA1_get(void * jarg1) {
  void * jresult ;
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  result =  ((arg1)->axleInA1);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HingeDesc_axleInA2_set(void * jarg1, void * jarg2) {
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->axleInA2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HingeDesc_axleInA2_get(void * jarg1) {
  void * jresult ;
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  result =  ((arg1)->axleInA2);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HingeDesc_pivotA_set(void * jarg1, void * jarg2) {
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pivotA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HingeDesc_pivotA_get(void * jarg1) {
  void * jresult ;
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  result =  ((arg1)->pivotA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HingeDesc_axleB_set(void * jarg1, void * jarg2) {
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->axleB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HingeDesc_axleB_get(void * jarg1) {
  void * jresult ;
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  result =  ((arg1)->axleB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HingeDesc_axleInB1_set(void * jarg1, void * jarg2) {
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->axleInB1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HingeDesc_axleInB1_get(void * jarg1) {
  void * jresult ;
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  result =  ((arg1)->axleInB1);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HingeDesc_axleInB2_set(void * jarg1, void * jarg2) {
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->axleInB2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HingeDesc_axleInB2_get(void * jarg1) {
  void * jresult ;
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  result =  ((arg1)->axleInB2);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HingeDesc_pivotB_set(void * jarg1, void * jarg2) {
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pivotB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HingeDesc_pivotB_get(void * jarg1) {
  void * jresult ;
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  result =  ((arg1)->pivotB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_HingeDesc() {
  void * jresult ;
  nifly::HingeDesc *result = 0 ;
  
  result = (nifly::HingeDesc *)new nifly::HingeDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_HingeDesc(void * jarg1) {
  nifly::HingeDesc *arg1 = (nifly::HingeDesc *) 0 ;
  
  arg1 = (nifly::HingeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_hinge_set(void * jarg1, void * jarg2) {
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  nifly::HingeDesc *arg2 = (nifly::HingeDesc *) 0 ;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  arg2 = (nifly::HingeDesc *)jarg2; 
  if (arg1) (arg1)->hinge = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_hinge_get(void * jarg1) {
  void * jresult ;
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  nifly::HingeDesc *result = 0 ;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  result = (nifly::HingeDesc *)& ((arg1)->hinge);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_minAngle_set(void * jarg1, float jarg2) {
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_minAngle_get(void * jarg1) {
  float jresult ;
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  float result;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  result = (float) ((arg1)->minAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_maxAngle_set(void * jarg1, float jarg2) {
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_maxAngle_get(void * jarg1) {
  float jresult ;
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  float result;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  result = (float) ((arg1)->maxAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_maxFriction_set(void * jarg1, float jarg2) {
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_maxFriction_get(void * jarg1) {
  float jresult ;
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  float result;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  result = (float) ((arg1)->maxFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_motorDesc_set(void * jarg1, void * jarg2) {
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  nifly::MotorDesc *arg2 = (nifly::MotorDesc *) 0 ;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  arg2 = (nifly::MotorDesc *)jarg2; 
  if (arg1) (arg1)->motorDesc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_LimitedHingeDesc_motorDesc_get(void * jarg1) {
  void * jresult ;
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  nifly::MotorDesc *result = 0 ;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  result = (nifly::MotorDesc *)& ((arg1)->motorDesc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_LimitedHingeDesc() {
  void * jresult ;
  nifly::LimitedHingeDesc *result = 0 ;
  
  result = (nifly::LimitedHingeDesc *)new nifly::LimitedHingeDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_LimitedHingeDesc(void * jarg1) {
  nifly::LimitedHingeDesc *arg1 = (nifly::LimitedHingeDesc *) 0 ;
  
  arg1 = (nifly::LimitedHingeDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_twistA_set(void * jarg1, void * jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->twistA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RagdollDesc_twistA_get(void * jarg1) {
  void * jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result =  ((arg1)->twistA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_planeA_set(void * jarg1, void * jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->planeA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RagdollDesc_planeA_get(void * jarg1) {
  void * jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result =  ((arg1)->planeA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_motorA_set(void * jarg1, void * jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->motorA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RagdollDesc_motorA_get(void * jarg1) {
  void * jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result =  ((arg1)->motorA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_pivotA_set(void * jarg1, void * jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pivotA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RagdollDesc_pivotA_get(void * jarg1) {
  void * jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result =  ((arg1)->pivotA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_twistB_set(void * jarg1, void * jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->twistB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RagdollDesc_twistB_get(void * jarg1) {
  void * jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result =  ((arg1)->twistB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_planeB_set(void * jarg1, void * jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->planeB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RagdollDesc_planeB_get(void * jarg1) {
  void * jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result =  ((arg1)->planeB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_motorB_set(void * jarg1, void * jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->motorB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RagdollDesc_motorB_get(void * jarg1) {
  void * jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result =  ((arg1)->motorB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_pivotB_set(void * jarg1, void * jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pivotB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RagdollDesc_pivotB_get(void * jarg1) {
  void * jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result =  ((arg1)->pivotB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_coneMaxAngle_set(void * jarg1, float jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->coneMaxAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_RagdollDesc_coneMaxAngle_get(void * jarg1) {
  float jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result = (float) ((arg1)->coneMaxAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_planeMinAngle_set(void * jarg1, float jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->planeMinAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_RagdollDesc_planeMinAngle_get(void * jarg1) {
  float jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result = (float) ((arg1)->planeMinAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_planeMaxAngle_set(void * jarg1, float jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->planeMaxAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_RagdollDesc_planeMaxAngle_get(void * jarg1) {
  float jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result = (float) ((arg1)->planeMaxAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_twistMinAngle_set(void * jarg1, float jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->twistMinAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_RagdollDesc_twistMinAngle_get(void * jarg1) {
  float jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result = (float) ((arg1)->twistMinAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_twistMaxAngle_set(void * jarg1, float jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->twistMaxAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_RagdollDesc_twistMaxAngle_get(void * jarg1) {
  float jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result = (float) ((arg1)->twistMaxAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_maxFriction_set(void * jarg1, float jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_RagdollDesc_maxFriction_get(void * jarg1) {
  float jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  float result;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result = (float) ((arg1)->maxFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_RagdollDesc_motorDesc_set(void * jarg1, void * jarg2) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  nifly::MotorDesc *arg2 = (nifly::MotorDesc *) 0 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  arg2 = (nifly::MotorDesc *)jarg2; 
  if (arg1) (arg1)->motorDesc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RagdollDesc_motorDesc_get(void * jarg1) {
  void * jresult ;
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  nifly::MotorDesc *result = 0 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  result = (nifly::MotorDesc *)& ((arg1)->motorDesc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_RagdollDesc() {
  void * jresult ;
  nifly::RagdollDesc *result = 0 ;
  
  result = (nifly::RagdollDesc *)new nifly::RagdollDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_RagdollDesc(void * jarg1) {
  nifly::RagdollDesc *arg1 = (nifly::RagdollDesc *) 0 ;
  
  arg1 = (nifly::RagdollDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StiffSpringDesc_pivotA_set(void * jarg1, void * jarg2) {
  nifly::StiffSpringDesc *arg1 = (nifly::StiffSpringDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::StiffSpringDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pivotA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StiffSpringDesc_pivotA_get(void * jarg1) {
  void * jresult ;
  nifly::StiffSpringDesc *arg1 = (nifly::StiffSpringDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::StiffSpringDesc *)jarg1; 
  result =  ((arg1)->pivotA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StiffSpringDesc_pivotB_set(void * jarg1, void * jarg2) {
  nifly::StiffSpringDesc *arg1 = (nifly::StiffSpringDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::StiffSpringDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pivotB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StiffSpringDesc_pivotB_get(void * jarg1) {
  void * jresult ;
  nifly::StiffSpringDesc *arg1 = (nifly::StiffSpringDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::StiffSpringDesc *)jarg1; 
  result =  ((arg1)->pivotB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StiffSpringDesc_length_set(void * jarg1, float jarg2) {
  nifly::StiffSpringDesc *arg1 = (nifly::StiffSpringDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::StiffSpringDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_StiffSpringDesc_length_get(void * jarg1) {
  float jresult ;
  nifly::StiffSpringDesc *arg1 = (nifly::StiffSpringDesc *) 0 ;
  float result;
  
  arg1 = (nifly::StiffSpringDesc *)jarg1; 
  result = (float) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_StiffSpringDesc() {
  void * jresult ;
  nifly::StiffSpringDesc *result = 0 ;
  
  result = (nifly::StiffSpringDesc *)new nifly::StiffSpringDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_StiffSpringDesc(void * jarg1) {
  nifly::StiffSpringDesc *arg1 = (nifly::StiffSpringDesc *) 0 ;
  
  arg1 = (nifly::StiffSpringDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BallAndSocketDesc_translationA_set(void * jarg1, void * jarg2) {
  nifly::BallAndSocketDesc *arg1 = (nifly::BallAndSocketDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::BallAndSocketDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translationA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BallAndSocketDesc_translationA_get(void * jarg1) {
  void * jresult ;
  nifly::BallAndSocketDesc *arg1 = (nifly::BallAndSocketDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::BallAndSocketDesc *)jarg1; 
  result =  ((arg1)->translationA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BallAndSocketDesc_translationB_set(void * jarg1, void * jarg2) {
  nifly::BallAndSocketDesc *arg1 = (nifly::BallAndSocketDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::BallAndSocketDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translationB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BallAndSocketDesc_translationB_get(void * jarg1) {
  void * jresult ;
  nifly::BallAndSocketDesc *arg1 = (nifly::BallAndSocketDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::BallAndSocketDesc *)jarg1; 
  result =  ((arg1)->translationB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BallAndSocketDesc() {
  void * jresult ;
  nifly::BallAndSocketDesc *result = 0 ;
  
  result = (nifly::BallAndSocketDesc *)new nifly::BallAndSocketDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BallAndSocketDesc(void * jarg1) {
  nifly::BallAndSocketDesc *arg1 = (nifly::BallAndSocketDesc *) 0 ;
  
  arg1 = (nifly::BallAndSocketDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_slidingA_set(void * jarg1, void * jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->slidingA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_PrismaticDesc_slidingA_get(void * jarg1) {
  void * jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result =  ((arg1)->slidingA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_rotationA_set(void * jarg1, void * jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotationA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_PrismaticDesc_rotationA_get(void * jarg1) {
  void * jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result =  ((arg1)->rotationA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_planeA_set(void * jarg1, void * jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->planeA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_PrismaticDesc_planeA_get(void * jarg1) {
  void * jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result =  ((arg1)->planeA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_pivotA_set(void * jarg1, void * jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pivotA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_PrismaticDesc_pivotA_get(void * jarg1) {
  void * jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result =  ((arg1)->pivotA);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_slidingB_set(void * jarg1, void * jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->slidingB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_PrismaticDesc_slidingB_get(void * jarg1) {
  void * jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result =  ((arg1)->slidingB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_rotationB_set(void * jarg1, void * jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotationB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_PrismaticDesc_rotationB_get(void * jarg1) {
  void * jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result =  ((arg1)->rotationB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_planeB_set(void * jarg1, void * jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->planeB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_PrismaticDesc_planeB_get(void * jarg1) {
  void * jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result =  ((arg1)->planeB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_pivotB_set(void * jarg1, void * jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pivotB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_PrismaticDesc_pivotB_get(void * jarg1) {
  void * jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result =  ((arg1)->pivotB);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_minDistance_set(void * jarg1, float jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_PrismaticDesc_minDistance_get(void * jarg1) {
  float jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  float result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result = (float) ((arg1)->minDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_maxDistance_set(void * jarg1, float jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_PrismaticDesc_maxDistance_get(void * jarg1) {
  float jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  float result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result = (float) ((arg1)->maxDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_friction_set(void * jarg1, float jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_PrismaticDesc_friction_get(void * jarg1) {
  float jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  float result;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result = (float) ((arg1)->friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PrismaticDesc_motorDesc_set(void * jarg1, void * jarg2) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  nifly::MotorDesc *arg2 = (nifly::MotorDesc *) 0 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  arg2 = (nifly::MotorDesc *)jarg2; 
  if (arg1) (arg1)->motorDesc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_PrismaticDesc_motorDesc_get(void * jarg1) {
  void * jresult ;
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  nifly::MotorDesc *result = 0 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  result = (nifly::MotorDesc *)& ((arg1)->motorDesc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_PrismaticDesc() {
  void * jresult ;
  nifly::PrismaticDesc *result = 0 ;
  
  result = (nifly::PrismaticDesc *)new nifly::PrismaticDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_PrismaticDesc(void * jarg1) {
  nifly::PrismaticDesc *arg1 = (nifly::PrismaticDesc *) 0 ;
  
  arg1 = (nifly::PrismaticDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDMaterial_material_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCMSDMaterial *arg1 = (nifly::bhkCMSDMaterial *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkCMSDMaterial *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCMSDMaterial_material_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCMSDMaterial *arg1 = (nifly::bhkCMSDMaterial *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkCMSDMaterial *)jarg1; 
  result = (nifly::HavokMaterial) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDMaterial_layer_set(void * jarg1, void * jarg2) {
  nifly::bhkCMSDMaterial *arg1 = (nifly::bhkCMSDMaterial *) 0 ;
  nifly::HavokFilter *arg2 = (nifly::HavokFilter *) 0 ;
  
  arg1 = (nifly::bhkCMSDMaterial *)jarg1; 
  arg2 = (nifly::HavokFilter *)jarg2; 
  if (arg1) (arg1)->layer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCMSDMaterial_layer_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCMSDMaterial *arg1 = (nifly::bhkCMSDMaterial *) 0 ;
  nifly::HavokFilter *result = 0 ;
  
  arg1 = (nifly::bhkCMSDMaterial *)jarg1; 
  result = (nifly::HavokFilter *)& ((arg1)->layer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkCMSDMaterial() {
  void * jresult ;
  nifly::bhkCMSDMaterial *result = 0 ;
  
  result = (nifly::bhkCMSDMaterial *)new nifly::bhkCMSDMaterial();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkCMSDMaterial(void * jarg1) {
  nifly::bhkCMSDMaterial *arg1 = (nifly::bhkCMSDMaterial *) 0 ;
  
  arg1 = (nifly::bhkCMSDMaterial *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_triangle1_set(void * jarg1, unsigned short jarg2) {
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->triangle1 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_triangle1_get(void * jarg1) {
  unsigned short jresult ;
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  result = (uint16_t) ((arg1)->triangle1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_triangle2_set(void * jarg1, unsigned short jarg2) {
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->triangle2 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_triangle2_get(void * jarg1) {
  unsigned short jresult ;
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  result = (uint16_t) ((arg1)->triangle2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_triangle3_set(void * jarg1, unsigned short jarg2) {
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->triangle3 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_triangle3_get(void * jarg1) {
  unsigned short jresult ;
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  result = (uint16_t) ((arg1)->triangle3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_material_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_material_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  result = (nifly::HavokMaterial) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_weldingInfo_set(void * jarg1, unsigned short jarg2) {
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->weldingInfo = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_bhkCMSDBigTris_weldingInfo_get(void * jarg1) {
  unsigned short jresult ;
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  result = (uint16_t) ((arg1)->weldingInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkCMSDBigTris() {
  void * jresult ;
  nifly::bhkCMSDBigTris *result = 0 ;
  
  result = (nifly::bhkCMSDBigTris *)new nifly::bhkCMSDBigTris();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkCMSDBigTris(void * jarg1) {
  nifly::bhkCMSDBigTris *arg1 = (nifly::bhkCMSDBigTris *) 0 ;
  
  arg1 = (nifly::bhkCMSDBigTris *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDTransform_translation_set(void * jarg1, void * jarg2) {
  nifly::bhkCMSDTransform *arg1 = (nifly::bhkCMSDTransform *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkCMSDTransform *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCMSDTransform_translation_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCMSDTransform *arg1 = (nifly::bhkCMSDTransform *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkCMSDTransform *)jarg1; 
  result =  ((arg1)->translation);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDTransform_rotation_set(void * jarg1, void * jarg2) {
  nifly::bhkCMSDTransform *arg1 = (nifly::bhkCMSDTransform *) 0 ;
  QuaternionXYZW arg2 ;
  QuaternionXYZW *argp2 ;
  
  arg1 = (nifly::bhkCMSDTransform *)jarg1; 
  argp2 = (QuaternionXYZW *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null QuaternionXYZW", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCMSDTransform_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCMSDTransform *arg1 = (nifly::bhkCMSDTransform *) 0 ;
  QuaternionXYZW result;
  
  arg1 = (nifly::bhkCMSDTransform *)jarg1; 
  result =  ((arg1)->rotation);
  jresult = new QuaternionXYZW((const QuaternionXYZW &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkCMSDTransform() {
  void * jresult ;
  nifly::bhkCMSDTransform *result = 0 ;
  
  result = (nifly::bhkCMSDTransform *)new nifly::bhkCMSDTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkCMSDTransform(void * jarg1) {
  nifly::bhkCMSDTransform *arg1 = (nifly::bhkCMSDTransform *) 0 ;
  
  arg1 = (nifly::bhkCMSDTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_translation_set(void * jarg1, void * jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_translation_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result =  ((arg1)->translation);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_matIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->matIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_matIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (uint32_t) ((arg1)->matIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_reference_set(void * jarg1, unsigned short jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->reference = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_reference_get(void * jarg1) {
  unsigned short jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (uint16_t) ((arg1)->reference);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_transformIndex_set(void * jarg1, unsigned short jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->transformIndex = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_transformIndex_get(void * jarg1) {
  unsigned short jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (uint16_t) ((arg1)->transformIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_numVerts_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numVerts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_numVerts_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (uint32_t) ((arg1)->numVerts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_verts_set(void * jarg1, void * jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  std::vector< uint16_t > *arg2 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2; 
  if (arg1) (arg1)->verts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_verts_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (std::vector< uint16_t > *)& ((arg1)->verts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_numIndices_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numIndices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_numIndices_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (uint32_t) ((arg1)->numIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_indices_set(void * jarg1, void * jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  std::vector< uint16_t > *arg2 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2; 
  if (arg1) (arg1)->indices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_indices_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (std::vector< uint16_t > *)& ((arg1)->indices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_numStrips_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numStrips = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_numStrips_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (uint32_t) ((arg1)->numStrips);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_strips_set(void * jarg1, void * jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  std::vector< uint16_t > *arg2 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2; 
  if (arg1) (arg1)->strips = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_strips_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (std::vector< uint16_t > *)& ((arg1)->strips);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_numWeldingInfo_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numWeldingInfo = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_numWeldingInfo_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (uint32_t) ((arg1)->numWeldingInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_weldingInfo_set(void * jarg1, void * jarg2) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  std::vector< uint16_t > *arg2 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2; 
  if (arg1) (arg1)->weldingInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCMSDChunk_weldingInfo_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  result = (std::vector< uint16_t > *)& ((arg1)->weldingInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkCMSDChunk() {
  void * jresult ;
  nifly::bhkCMSDChunk *result = 0 ;
  
  result = (nifly::bhkCMSDChunk *)new nifly::bhkCMSDChunk();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkCMSDChunk(void * jarg1) {
  nifly::bhkCMSDChunk *arg1 = (nifly::bhkCMSDChunk *) 0 ;
  
  arg1 = (nifly::bhkCMSDChunk *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCollisionObject_targetRef_set(void * jarg1, void * jarg2) {
  nifly::NiCollisionObject *arg1 = (nifly::NiCollisionObject *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiCollisionObject *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->targetRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiCollisionObject_targetRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiCollisionObject *arg1 = (nifly::NiCollisionObject *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiCollisionObject *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiAVObject > *)& ((arg1)->targetRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiCollisionObject_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiCollisionObject::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiCollisionObject_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiCollisionObject *arg1 = (nifly::NiCollisionObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiCollisionObject *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCollisionObject_Sync(void * jarg1, void * jarg2) {
  nifly::NiCollisionObject *arg1 = (nifly::NiCollisionObject *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiCollisionObject *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCollisionObject_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiCollisionObject *arg1 = (nifly::NiCollisionObject *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiCollisionObject *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiCollisionObject() {
  void * jresult ;
  nifly::NiCollisionObject *result = 0 ;
  
  result = (nifly::NiCollisionObject *)new nifly::NiCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiCollisionObject(void * jarg1) {
  nifly::NiCollisionObject *arg1 = (nifly::NiCollisionObject *) 0 ;
  
  arg1 = (nifly::NiCollisionObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoxBV_center_set(void * jarg1, void * jarg2) {
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoxBV_center_get(void * jarg1) {
  void * jresult ;
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  result =  ((arg1)->center);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoxBV_axis1_set(void * jarg1, void * jarg2) {
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->axis1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoxBV_axis1_get(void * jarg1) {
  void * jresult ;
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  result =  ((arg1)->axis1);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoxBV_axis2_set(void * jarg1, void * jarg2) {
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->axis2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoxBV_axis2_get(void * jarg1) {
  void * jresult ;
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  result =  ((arg1)->axis2);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoxBV_axis3_set(void * jarg1, void * jarg2) {
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->axis3 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoxBV_axis3_get(void * jarg1) {
  void * jresult ;
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  result =  ((arg1)->axis3);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoxBV_extent1_set(void * jarg1, float jarg2) {
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->extent1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BoxBV_extent1_get(void * jarg1) {
  float jresult ;
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  float result;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  result = (float) ((arg1)->extent1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoxBV_extent2_set(void * jarg1, float jarg2) {
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->extent2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BoxBV_extent2_get(void * jarg1) {
  float jresult ;
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  float result;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  result = (float) ((arg1)->extent2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoxBV_extent3_set(void * jarg1, float jarg2) {
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->extent3 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BoxBV_extent3_get(void * jarg1) {
  float jresult ;
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  float result;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  result = (float) ((arg1)->extent3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoxBV() {
  void * jresult ;
  nifly::BoxBV *result = 0 ;
  
  result = (nifly::BoxBV *)new nifly::BoxBV();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BoxBV(void * jarg1) {
  nifly::BoxBV *arg1 = (nifly::BoxBV *) 0 ;
  
  arg1 = (nifly::BoxBV *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_CapsuleBV_center_set(void * jarg1, void * jarg2) {
  nifly::CapsuleBV *arg1 = (nifly::CapsuleBV *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::CapsuleBV *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_CapsuleBV_center_get(void * jarg1) {
  void * jresult ;
  nifly::CapsuleBV *arg1 = (nifly::CapsuleBV *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::CapsuleBV *)jarg1; 
  result =  ((arg1)->center);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_CapsuleBV_origin_set(void * jarg1, void * jarg2) {
  nifly::CapsuleBV *arg1 = (nifly::CapsuleBV *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::CapsuleBV *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->origin = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_CapsuleBV_origin_get(void * jarg1) {
  void * jresult ;
  nifly::CapsuleBV *arg1 = (nifly::CapsuleBV *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::CapsuleBV *)jarg1; 
  result =  ((arg1)->origin);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_CapsuleBV_extent_set(void * jarg1, float jarg2) {
  nifly::CapsuleBV *arg1 = (nifly::CapsuleBV *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::CapsuleBV *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->extent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_CapsuleBV_extent_get(void * jarg1) {
  float jresult ;
  nifly::CapsuleBV *arg1 = (nifly::CapsuleBV *) 0 ;
  float result;
  
  arg1 = (nifly::CapsuleBV *)jarg1; 
  result = (float) ((arg1)->extent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_CapsuleBV_radius_set(void * jarg1, float jarg2) {
  nifly::CapsuleBV *arg1 = (nifly::CapsuleBV *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::CapsuleBV *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_CapsuleBV_radius_get(void * jarg1) {
  float jresult ;
  nifly::CapsuleBV *arg1 = (nifly::CapsuleBV *) 0 ;
  float result;
  
  arg1 = (nifly::CapsuleBV *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_CapsuleBV() {
  void * jresult ;
  nifly::CapsuleBV *result = 0 ;
  
  result = (nifly::CapsuleBV *)new nifly::CapsuleBV();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_CapsuleBV(void * jarg1) {
  nifly::CapsuleBV *arg1 = (nifly::CapsuleBV *) 0 ;
  
  arg1 = (nifly::CapsuleBV *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HalfSpaceBV_plane_set(void * jarg1, void * jarg2) {
  nifly::HalfSpaceBV *arg1 = (nifly::HalfSpaceBV *) 0 ;
  nifly::NiPlane *arg2 = (nifly::NiPlane *) 0 ;
  
  arg1 = (nifly::HalfSpaceBV *)jarg1; 
  arg2 = (nifly::NiPlane *)jarg2; 
  if (arg1) (arg1)->plane = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HalfSpaceBV_plane_get(void * jarg1) {
  void * jresult ;
  nifly::HalfSpaceBV *arg1 = (nifly::HalfSpaceBV *) 0 ;
  nifly::NiPlane *result = 0 ;
  
  arg1 = (nifly::HalfSpaceBV *)jarg1; 
  result = (nifly::NiPlane *)& ((arg1)->plane);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_HalfSpaceBV_center_set(void * jarg1, void * jarg2) {
  nifly::HalfSpaceBV *arg1 = (nifly::HalfSpaceBV *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::HalfSpaceBV *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_HalfSpaceBV_center_get(void * jarg1) {
  void * jresult ;
  nifly::HalfSpaceBV *arg1 = (nifly::HalfSpaceBV *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::HalfSpaceBV *)jarg1; 
  result =  ((arg1)->center);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_HalfSpaceBV() {
  void * jresult ;
  nifly::HalfSpaceBV *result = 0 ;
  
  result = (nifly::HalfSpaceBV *)new nifly::HalfSpaceBV();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_HalfSpaceBV(void * jarg1) {
  nifly::HalfSpaceBV *arg1 = (nifly::HalfSpaceBV *) 0 ;
  
  arg1 = (nifly::HalfSpaceBV *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoundingVolume_collisionType_set(void * jarg1, int jarg2) {
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  nifly::BoundVolumeType arg2 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  arg2 = (nifly::BoundVolumeType)jarg2; 
  if (arg1) (arg1)->collisionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BoundingVolume_collisionType_get(void * jarg1) {
  int jresult ;
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  nifly::BoundVolumeType result;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  result = (nifly::BoundVolumeType) ((arg1)->collisionType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoundingVolume_bvSphere_set(void * jarg1, void * jarg2) {
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  BoundingSphere arg2 ;
  BoundingSphere *argp2 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  argp2 = (BoundingSphere *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BoundingSphere", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->bvSphere = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoundingVolume_bvSphere_get(void * jarg1) {
  void * jresult ;
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  BoundingSphere result;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  result =  ((arg1)->bvSphere);
  jresult = new BoundingSphere((const BoundingSphere &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoundingVolume_bvBox_set(void * jarg1, void * jarg2) {
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  nifly::BoxBV *arg2 = (nifly::BoxBV *) 0 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  arg2 = (nifly::BoxBV *)jarg2; 
  if (arg1) (arg1)->bvBox = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoundingVolume_bvBox_get(void * jarg1) {
  void * jresult ;
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  nifly::BoxBV *result = 0 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  result = (nifly::BoxBV *)& ((arg1)->bvBox);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoundingVolume_bvCapsule_set(void * jarg1, void * jarg2) {
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  nifly::CapsuleBV *arg2 = (nifly::CapsuleBV *) 0 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  arg2 = (nifly::CapsuleBV *)jarg2; 
  if (arg1) (arg1)->bvCapsule = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoundingVolume_bvCapsule_get(void * jarg1) {
  void * jresult ;
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  nifly::CapsuleBV *result = 0 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  result = (nifly::CapsuleBV *)& ((arg1)->bvCapsule);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoundingVolume_bvHalfSpace_set(void * jarg1, void * jarg2) {
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  nifly::HalfSpaceBV *arg2 = (nifly::HalfSpaceBV *) 0 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  arg2 = (nifly::HalfSpaceBV *)jarg2; 
  if (arg1) (arg1)->bvHalfSpace = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoundingVolume_bvHalfSpace_get(void * jarg1) {
  void * jresult ;
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  nifly::HalfSpaceBV *result = 0 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  result = (nifly::HalfSpaceBV *)& ((arg1)->bvHalfSpace);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoundingVolume__SWIG_0() {
  void * jresult ;
  nifly::BoundingVolume *result = 0 ;
  
  result = (nifly::BoundingVolume *)new nifly::BoundingVolume();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoundingVolume__SWIG_1(void * jarg1) {
  void * jresult ;
  nifly::BoundingVolume *arg1 = 0 ;
  nifly::BoundingVolume *result = 0 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::BoundingVolume const & type is null", 0);
    return 0;
  } 
  result = (nifly::BoundingVolume *)new nifly::BoundingVolume((nifly::BoundingVolume const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoundingVolume_Sync(void * jarg1, void * jarg2) {
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BoundingVolume(void * jarg1) {
  nifly::BoundingVolume *arg1 = (nifly::BoundingVolume *) 0 ;
  
  arg1 = (nifly::BoundingVolume *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_UnionBV_numBV_set(void * jarg1, unsigned int jarg2) {
  nifly::UnionBV *arg1 = (nifly::UnionBV *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::UnionBV *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numBV = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_UnionBV_numBV_get(void * jarg1) {
  unsigned int jresult ;
  nifly::UnionBV *arg1 = (nifly::UnionBV *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::UnionBV *)jarg1; 
  result = (uint32_t) ((arg1)->numBV);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_UnionBV_boundingVolumes_set(void * jarg1, void * jarg2) {
  nifly::UnionBV *arg1 = (nifly::UnionBV *) 0 ;
  std::vector< nifly::BoundingVolume > *arg2 = (std::vector< nifly::BoundingVolume > *) 0 ;
  
  arg1 = (nifly::UnionBV *)jarg1; 
  arg2 = (std::vector< nifly::BoundingVolume > *)jarg2; 
  if (arg1) (arg1)->boundingVolumes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_UnionBV_boundingVolumes_get(void * jarg1) {
  void * jresult ;
  nifly::UnionBV *arg1 = (nifly::UnionBV *) 0 ;
  std::vector< nifly::BoundingVolume > *result = 0 ;
  
  arg1 = (nifly::UnionBV *)jarg1; 
  result = (std::vector< nifly::BoundingVolume > *)& ((arg1)->boundingVolumes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_UnionBV_Sync(void * jarg1, void * jarg2) {
  nifly::UnionBV *arg1 = (nifly::UnionBV *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::UnionBV *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_UnionBV() {
  void * jresult ;
  nifly::UnionBV *result = 0 ;
  
  result = (nifly::UnionBV *)new nifly::UnionBV();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_UnionBV(void * jarg1) {
  nifly::UnionBV *arg1 = (nifly::UnionBV *) 0 ;
  
  arg1 = (nifly::UnionBV *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCollisionData_propagationMode_set(void * jarg1, int jarg2) {
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  nifly::PropagationMode arg2 ;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  arg2 = (nifly::PropagationMode)jarg2; 
  if (arg1) (arg1)->propagationMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiCollisionData_propagationMode_get(void * jarg1) {
  int jresult ;
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  nifly::PropagationMode result;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  result = (nifly::PropagationMode) ((arg1)->propagationMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCollisionData_collisionMode_set(void * jarg1, int jarg2) {
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  nifly::CollisionMode arg2 ;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  arg2 = (nifly::CollisionMode)jarg2; 
  if (arg1) (arg1)->collisionMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiCollisionData_collisionMode_get(void * jarg1) {
  int jresult ;
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  nifly::CollisionMode result;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  result = (nifly::CollisionMode) ((arg1)->collisionMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCollisionData_useABV_set(void * jarg1, unsigned int jarg2) {
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useABV = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiCollisionData_useABV_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  result = (bool) ((arg1)->useABV);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCollisionData_boundingVolume_set(void * jarg1, void * jarg2) {
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  nifly::BoundingVolume *arg2 = (nifly::BoundingVolume *) 0 ;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  arg2 = (nifly::BoundingVolume *)jarg2; 
  if (arg1) (arg1)->boundingVolume = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiCollisionData_boundingVolume_get(void * jarg1) {
  void * jresult ;
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  nifly::BoundingVolume *result = 0 ;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  result = (nifly::BoundingVolume *)& ((arg1)->boundingVolume);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiCollisionData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiCollisionData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiCollisionData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiCollisionData_Sync(void * jarg1, void * jarg2) {
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiCollisionData() {
  void * jresult ;
  nifly::NiCollisionData *result = 0 ;
  
  result = (nifly::NiCollisionData *)new nifly::NiCollisionData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiCollisionData(void * jarg1) {
  nifly::NiCollisionData *arg1 = (nifly::NiCollisionData *) 0 ;
  
  arg1 = (nifly::NiCollisionData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiCollisionObject_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::bhkNiCollisionObject *arg1 = (nifly::bhkNiCollisionObject *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::bhkNiCollisionObject *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_bhkNiCollisionObject_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::bhkNiCollisionObject *arg1 = (nifly::bhkNiCollisionObject *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::bhkNiCollisionObject *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiCollisionObject_bodyRef_set(void * jarg1, void * jarg2) {
  nifly::bhkNiCollisionObject *arg1 = (nifly::bhkNiCollisionObject *) 0 ;
  nifly::NiBlockRef< nifly::NiObject > *arg2 = (nifly::NiBlockRef< nifly::NiObject > *) 0 ;
  
  arg1 = (nifly::bhkNiCollisionObject *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiObject > *)jarg2; 
  if (arg1) (arg1)->bodyRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkNiCollisionObject_bodyRef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkNiCollisionObject *arg1 = (nifly::bhkNiCollisionObject *) 0 ;
  nifly::NiBlockRef< nifly::NiObject > *result = 0 ;
  
  arg1 = (nifly::bhkNiCollisionObject *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiObject > *)& ((arg1)->bodyRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkNiCollisionObject_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkNiCollisionObject::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkNiCollisionObject_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkNiCollisionObject *arg1 = (nifly::bhkNiCollisionObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkNiCollisionObject *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiCollisionObject_Sync(void * jarg1, void * jarg2) {
  nifly::bhkNiCollisionObject *arg1 = (nifly::bhkNiCollisionObject *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkNiCollisionObject *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiCollisionObject_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkNiCollisionObject *arg1 = (nifly::bhkNiCollisionObject *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkNiCollisionObject *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiCollisionObject_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkNiCollisionObject *arg1 = (nifly::bhkNiCollisionObject *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkNiCollisionObject *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkNiCollisionObject() {
  void * jresult ;
  nifly::bhkNiCollisionObject *result = 0 ;
  
  result = (nifly::bhkNiCollisionObject *)new nifly::bhkNiCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkNiCollisionObject(void * jarg1) {
  nifly::bhkNiCollisionObject *arg1 = (nifly::bhkNiCollisionObject *) 0 ;
  
  arg1 = (nifly::bhkNiCollisionObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkCollisionObject_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkCollisionObject::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkCollisionObject_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkCollisionObject *arg1 = (nifly::bhkCollisionObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkCollisionObject *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkCollisionObject() {
  void * jresult ;
  nifly::bhkCollisionObject *result = 0 ;
  
  result = (nifly::bhkCollisionObject *)new nifly::bhkCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkCollisionObject(void * jarg1) {
  nifly::bhkCollisionObject *arg1 = (nifly::bhkCollisionObject *) 0 ;
  
  arg1 = (nifly::bhkCollisionObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNPCollisionObject_bodyID_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkNPCollisionObject *arg1 = (nifly::bhkNPCollisionObject *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkNPCollisionObject *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bodyID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkNPCollisionObject_bodyID_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkNPCollisionObject *arg1 = (nifly::bhkNPCollisionObject *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkNPCollisionObject *)jarg1; 
  result = (uint32_t) ((arg1)->bodyID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkNPCollisionObject_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkNPCollisionObject::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkNPCollisionObject_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkNPCollisionObject *arg1 = (nifly::bhkNPCollisionObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkNPCollisionObject *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNPCollisionObject_Sync(void * jarg1, void * jarg2) {
  nifly::bhkNPCollisionObject *arg1 = (nifly::bhkNPCollisionObject *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkNPCollisionObject *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkNPCollisionObject() {
  void * jresult ;
  nifly::bhkNPCollisionObject *result = 0 ;
  
  result = (nifly::bhkNPCollisionObject *)new nifly::bhkNPCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkNPCollisionObject(void * jarg1) {
  nifly::bhkNPCollisionObject *arg1 = (nifly::bhkNPCollisionObject *) 0 ;
  
  arg1 = (nifly::bhkNPCollisionObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPCollisionObject_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkPCollisionObject::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPCollisionObject_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkPCollisionObject *arg1 = (nifly::bhkPCollisionObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkPCollisionObject *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkPCollisionObject() {
  void * jresult ;
  nifly::bhkPCollisionObject *result = 0 ;
  
  result = (nifly::bhkPCollisionObject *)new nifly::bhkPCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkPCollisionObject(void * jarg1) {
  nifly::bhkPCollisionObject *arg1 = (nifly::bhkPCollisionObject *) 0 ;
  
  arg1 = (nifly::bhkPCollisionObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkSPCollisionObject_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkSPCollisionObject::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkSPCollisionObject_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkSPCollisionObject *arg1 = (nifly::bhkSPCollisionObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkSPCollisionObject *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkSPCollisionObject() {
  void * jresult ;
  nifly::bhkSPCollisionObject *result = 0 ;
  
  result = (nifly::bhkSPCollisionObject *)new nifly::bhkSPCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkSPCollisionObject(void * jarg1) {
  nifly::bhkSPCollisionObject *arg1 = (nifly::bhkSPCollisionObject *) 0 ;
  
  arg1 = (nifly::bhkSPCollisionObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBlendCollisionObject_heirGain_set(void * jarg1, float jarg2) {
  nifly::bhkBlendCollisionObject *arg1 = (nifly::bhkBlendCollisionObject *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkBlendCollisionObject *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->heirGain = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkBlendCollisionObject_heirGain_get(void * jarg1) {
  float jresult ;
  nifly::bhkBlendCollisionObject *arg1 = (nifly::bhkBlendCollisionObject *) 0 ;
  float result;
  
  arg1 = (nifly::bhkBlendCollisionObject *)jarg1; 
  result = (float) ((arg1)->heirGain);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBlendCollisionObject_velGain_set(void * jarg1, float jarg2) {
  nifly::bhkBlendCollisionObject *arg1 = (nifly::bhkBlendCollisionObject *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkBlendCollisionObject *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->velGain = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkBlendCollisionObject_velGain_get(void * jarg1) {
  float jresult ;
  nifly::bhkBlendCollisionObject *arg1 = (nifly::bhkBlendCollisionObject *) 0 ;
  float result;
  
  arg1 = (nifly::bhkBlendCollisionObject *)jarg1; 
  result = (float) ((arg1)->velGain);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBlendCollisionObject_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkBlendCollisionObject::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBlendCollisionObject_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkBlendCollisionObject *arg1 = (nifly::bhkBlendCollisionObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkBlendCollisionObject *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBlendCollisionObject_Sync(void * jarg1, void * jarg2) {
  nifly::bhkBlendCollisionObject *arg1 = (nifly::bhkBlendCollisionObject *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkBlendCollisionObject *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkBlendCollisionObject() {
  void * jresult ;
  nifly::bhkBlendCollisionObject *result = 0 ;
  
  result = (nifly::bhkBlendCollisionObject *)new nifly::bhkBlendCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkBlendCollisionObject(void * jarg1) {
  nifly::bhkBlendCollisionObject *arg1 = (nifly::bhkBlendCollisionObject *) 0 ;
  
  arg1 = (nifly::bhkBlendCollisionObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkPhysicsSystem__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  uint32_t arg1 ;
  nifly::bhkPhysicsSystem *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  result = (nifly::bhkPhysicsSystem *)new nifly::bhkPhysicsSystem(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkPhysicsSystem__SWIG_1() {
  void * jresult ;
  nifly::bhkPhysicsSystem *result = 0 ;
  
  result = (nifly::bhkPhysicsSystem *)new nifly::bhkPhysicsSystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPhysicsSystem_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkPhysicsSystem::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPhysicsSystem_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkPhysicsSystem *arg1 = (nifly::bhkPhysicsSystem *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkPhysicsSystem *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPhysicsSystem_Sync(void * jarg1, void * jarg2) {
  nifly::bhkPhysicsSystem *arg1 = (nifly::bhkPhysicsSystem *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkPhysicsSystem *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPhysicsSystem_GetData(void * jarg1) {
  void * jresult ;
  nifly::bhkPhysicsSystem *arg1 = (nifly::bhkPhysicsSystem *) 0 ;
  std::vector< char > result;
  
  arg1 = (nifly::bhkPhysicsSystem *)jarg1; 
  result = ((nifly::bhkPhysicsSystem const *)arg1)->GetData();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPhysicsSystem_SetData(void * jarg1, void * jarg2) {
  nifly::bhkPhysicsSystem *arg1 = (nifly::bhkPhysicsSystem *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (nifly::bhkPhysicsSystem *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  (arg1)->SetData((std::vector< char > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkPhysicsSystem(void * jarg1) {
  nifly::bhkPhysicsSystem *arg1 = (nifly::bhkPhysicsSystem *) 0 ;
  
  arg1 = (nifly::bhkPhysicsSystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkRagdollSystem__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  uint32_t arg1 ;
  nifly::bhkRagdollSystem *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  result = (nifly::bhkRagdollSystem *)new nifly::bhkRagdollSystem(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkRagdollSystem__SWIG_1() {
  void * jresult ;
  nifly::bhkRagdollSystem *result = 0 ;
  
  result = (nifly::bhkRagdollSystem *)new nifly::bhkRagdollSystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRagdollSystem_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkRagdollSystem::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRagdollSystem_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkRagdollSystem *arg1 = (nifly::bhkRagdollSystem *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkRagdollSystem *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollSystem_Sync(void * jarg1, void * jarg2) {
  nifly::bhkRagdollSystem *arg1 = (nifly::bhkRagdollSystem *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkRagdollSystem *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRagdollSystem_GetData(void * jarg1) {
  void * jresult ;
  nifly::bhkRagdollSystem *arg1 = (nifly::bhkRagdollSystem *) 0 ;
  std::vector< char > result;
  
  arg1 = (nifly::bhkRagdollSystem *)jarg1; 
  result = ((nifly::bhkRagdollSystem const *)arg1)->GetData();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollSystem_SetData(void * jarg1, void * jarg2) {
  nifly::bhkRagdollSystem *arg1 = (nifly::bhkRagdollSystem *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (nifly::bhkRagdollSystem *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  (arg1)->SetData((std::vector< char > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkRagdollSystem(void * jarg1) {
  nifly::bhkRagdollSystem *arg1 = (nifly::bhkRagdollSystem *) 0 ;
  
  arg1 = (nifly::bhkRagdollSystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBlendController_keys_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkBlendController *arg1 = (nifly::bhkBlendController *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkBlendController *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->keys = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkBlendController_keys_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkBlendController *arg1 = (nifly::bhkBlendController *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkBlendController *)jarg1; 
  result = (uint32_t) ((arg1)->keys);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBlendController_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkBlendController::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBlendController_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkBlendController *arg1 = (nifly::bhkBlendController *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkBlendController *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBlendController_Sync(void * jarg1, void * jarg2) {
  nifly::bhkBlendController *arg1 = (nifly::bhkBlendController *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkBlendController *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkBlendController() {
  void * jresult ;
  nifly::bhkBlendController *result = 0 ;
  
  result = (nifly::bhkBlendController *)new nifly::bhkBlendController();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkBlendController(void * jarg1) {
  nifly::bhkBlendController *arg1 = (nifly::bhkBlendController *) 0 ;
  
  arg1 = (nifly::bhkBlendController *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkRefObject() {
  void * jresult ;
  nifly::bhkRefObject *result = 0 ;
  
  result = (nifly::bhkRefObject *)new nifly::bhkRefObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkRefObject(void * jarg1) {
  nifly::bhkRefObject *arg1 = (nifly::bhkRefObject *) 0 ;
  
  arg1 = (nifly::bhkRefObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkSerializable() {
  void * jresult ;
  nifly::bhkSerializable *result = 0 ;
  
  result = (nifly::bhkSerializable *)new nifly::bhkSerializable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkSerializable(void * jarg1) {
  nifly::bhkSerializable *arg1 = (nifly::bhkSerializable *) 0 ;
  
  arg1 = (nifly::bhkSerializable *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkShape_GetMaterial(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkShape *arg1 = (nifly::bhkShape *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkShape *)jarg1; 
  result = (nifly::HavokMaterial)((nifly::bhkShape const *)arg1)->GetMaterial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkShape_SetMaterial(void * jarg1, unsigned int jarg2) {
  nifly::bhkShape *arg1 = (nifly::bhkShape *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkShape *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  (arg1)->SetMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkShape() {
  void * jresult ;
  nifly::bhkShape *result = 0 ;
  
  result = (nifly::bhkShape *)new nifly::bhkShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkShape(void * jarg1) {
  nifly::bhkShape *arg1 = (nifly::bhkShape *) 0 ;
  
  arg1 = (nifly::bhkShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkHeightFieldShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkHeightFieldShape *arg1 = (nifly::bhkHeightFieldShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkHeightFieldShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkHeightFieldShape_GetMaterial(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkHeightFieldShape *arg1 = (nifly::bhkHeightFieldShape *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkHeightFieldShape *)jarg1; 
  result = (nifly::HavokMaterial)((nifly::bhkHeightFieldShape const *)arg1)->GetMaterial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkHeightFieldShape_SetMaterial(void * jarg1, unsigned int jarg2) {
  nifly::bhkHeightFieldShape *arg1 = (nifly::bhkHeightFieldShape *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkHeightFieldShape *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  (arg1)->SetMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkHeightFieldShape() {
  void * jresult ;
  nifly::bhkHeightFieldShape *result = 0 ;
  
  result = (nifly::bhkHeightFieldShape *)new nifly::bhkHeightFieldShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkHeightFieldShape(void * jarg1) {
  nifly::bhkHeightFieldShape *arg1 = (nifly::bhkHeightFieldShape *) 0 ;
  
  arg1 = (nifly::bhkHeightFieldShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPlaneShape_unkVec_set(void * jarg1, void * jarg2) {
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->unkVec = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPlaneShape_unkVec_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  result =  ((arg1)->unkVec);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPlaneShape_plane_set(void * jarg1, void * jarg2) {
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  nifly::NiPlane *arg2 = (nifly::NiPlane *) 0 ;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  arg2 = (nifly::NiPlane *)jarg2; 
  if (arg1) (arg1)->plane = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPlaneShape_plane_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  nifly::NiPlane *result = 0 ;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  result = (nifly::NiPlane *)& ((arg1)->plane);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPlaneShape_halfExtents_set(void * jarg1, void * jarg2) {
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->halfExtents = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPlaneShape_halfExtents_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  result =  ((arg1)->halfExtents);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPlaneShape_center_set(void * jarg1, void * jarg2) {
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPlaneShape_center_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  result =  ((arg1)->center);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPlaneShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkPlaneShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPlaneShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPlaneShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkPlaneShape() {
  void * jresult ;
  nifly::bhkPlaneShape *result = 0 ;
  
  result = (nifly::bhkPlaneShape *)new nifly::bhkPlaneShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkPlaneShape(void * jarg1) {
  nifly::bhkPlaneShape *arg1 = (nifly::bhkPlaneShape *) 0 ;
  
  arg1 = (nifly::bhkPlaneShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkSphereRepShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkSphereRepShape *arg1 = (nifly::bhkSphereRepShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkSphereRepShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkSphereRepShape_GetMaterial(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkSphereRepShape *arg1 = (nifly::bhkSphereRepShape *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkSphereRepShape *)jarg1; 
  result = (nifly::HavokMaterial)((nifly::bhkSphereRepShape const *)arg1)->GetMaterial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkSphereRepShape_SetMaterial(void * jarg1, unsigned int jarg2) {
  nifly::bhkSphereRepShape *arg1 = (nifly::bhkSphereRepShape *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkSphereRepShape *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  (arg1)->SetMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkSphereRepShape() {
  void * jresult ;
  nifly::bhkSphereRepShape *result = 0 ;
  
  result = (nifly::bhkSphereRepShape *)new nifly::bhkSphereRepShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkSphereRepShape(void * jarg1) {
  nifly::bhkSphereRepShape *arg1 = (nifly::bhkSphereRepShape *) 0 ;
  
  arg1 = (nifly::bhkSphereRepShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexShape_radius_set(void * jarg1, float jarg2) {
  nifly::bhkConvexShape *arg1 = (nifly::bhkConvexShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkConvexShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkConvexShape_radius_get(void * jarg1) {
  float jresult ;
  nifly::bhkConvexShape *arg1 = (nifly::bhkConvexShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkConvexShape *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkConvexShape *arg1 = (nifly::bhkConvexShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkConvexShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkConvexShape() {
  void * jresult ;
  nifly::bhkConvexShape *result = 0 ;
  
  result = (nifly::bhkConvexShape *)new nifly::bhkConvexShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkConvexShape(void * jarg1) {
  nifly::bhkConvexShape *arg1 = (nifly::bhkConvexShape *) 0 ;
  
  arg1 = (nifly::bhkConvexShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMultiSphereShape_shapeProperty_set(void * jarg1, void * jarg2) {
  nifly::bhkMultiSphereShape *arg1 = (nifly::bhkMultiSphereShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *arg2 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  
  arg1 = (nifly::bhkMultiSphereShape *)jarg1; 
  arg2 = (nifly::hkWorldObjCInfoProperty *)jarg2; 
  if (arg1) (arg1)->shapeProperty = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkMultiSphereShape_shapeProperty_get(void * jarg1) {
  void * jresult ;
  nifly::bhkMultiSphereShape *arg1 = (nifly::bhkMultiSphereShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *result = 0 ;
  
  arg1 = (nifly::bhkMultiSphereShape *)jarg1; 
  result = (nifly::hkWorldObjCInfoProperty *)& ((arg1)->shapeProperty);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMultiSphereShape_spheres_set(void * jarg1, void * jarg2) {
  nifly::bhkMultiSphereShape *arg1 = (nifly::bhkMultiSphereShape *) 0 ;
  nifly::NiVector< BoundingSphere > *arg2 = (nifly::NiVector< BoundingSphere > *) 0 ;
  
  arg1 = (nifly::bhkMultiSphereShape *)jarg1; 
  arg2 = (nifly::NiVector< BoundingSphere > *)jarg2; 
  if (arg1) (arg1)->spheres = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkMultiSphereShape_spheres_get(void * jarg1) {
  void * jresult ;
  nifly::bhkMultiSphereShape *arg1 = (nifly::bhkMultiSphereShape *) 0 ;
  nifly::NiVector< BoundingSphere > *result = 0 ;
  
  arg1 = (nifly::bhkMultiSphereShape *)jarg1; 
  result = (nifly::NiVector< BoundingSphere > *)& ((arg1)->spheres);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkMultiSphereShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkMultiSphereShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkMultiSphereShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkMultiSphereShape *arg1 = (nifly::bhkMultiSphereShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkMultiSphereShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMultiSphereShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkMultiSphereShape *arg1 = (nifly::bhkMultiSphereShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkMultiSphereShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkMultiSphereShape() {
  void * jresult ;
  nifly::bhkMultiSphereShape *result = 0 ;
  
  result = (nifly::bhkMultiSphereShape *)new nifly::bhkMultiSphereShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkMultiSphereShape(void * jarg1) {
  nifly::bhkMultiSphereShape *arg1 = (nifly::bhkMultiSphereShape *) 0 ;
  
  arg1 = (nifly::bhkMultiSphereShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_shapeRefs_set(void * jarg1, void * jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  nifly::NiBlockRefArray< nifly::bhkConvexShape > *arg2 = (nifly::NiBlockRefArray< nifly::bhkConvexShape > *) 0 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::bhkConvexShape > *)jarg2; 
  if (arg1) (arg1)->shapeRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkConvexListShape_shapeRefs_get(void * jarg1) {
  void * jresult ;
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  nifly::NiBlockRefArray< nifly::bhkConvexShape > *result = 0 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::bhkConvexShape > *)& ((arg1)->shapeRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_material_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkConvexListShape_material_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  result = (nifly::HavokMaterial) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_radius_set(void * jarg1, float jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkConvexListShape_radius_get(void * jarg1) {
  float jresult ;
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_unkInt1_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkConvexListShape_unkInt1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_unkFloat1_set(void * jarg1, float jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->unkFloat1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkConvexListShape_unkFloat1_get(void * jarg1) {
  float jresult ;
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  result = (float) ((arg1)->unkFloat1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_childShapeProp_set(void * jarg1, void * jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *arg2 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (nifly::hkWorldObjCInfoProperty *)jarg2; 
  if (arg1) (arg1)->childShapeProp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkConvexListShape_childShapeProp_get(void * jarg1) {
  void * jresult ;
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *result = 0 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  result = (nifly::hkWorldObjCInfoProperty *)& ((arg1)->childShapeProp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_useCachedAABB_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useCachedAABB = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkConvexListShape_useCachedAABB_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  bool result;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  result = (bool) ((arg1)->useCachedAABB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_closestPointMinDistance_set(void * jarg1, float jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->closestPointMinDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkConvexListShape_closestPointMinDistance_get(void * jarg1) {
  float jresult ;
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  result = (float) ((arg1)->closestPointMinDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkConvexListShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkConvexListShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkConvexListShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexListShape_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkConvexListShape() {
  void * jresult ;
  nifly::bhkConvexListShape *result = 0 ;
  
  result = (nifly::bhkConvexListShape *)new nifly::bhkConvexListShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkConvexListShape(void * jarg1) {
  nifly::bhkConvexListShape *arg1 = (nifly::bhkConvexListShape *) 0 ;
  
  arg1 = (nifly::bhkConvexListShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_vertsProp_set(void * jarg1, void * jarg2) {
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *arg2 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  arg2 = (nifly::hkWorldObjCInfoProperty *)jarg2; 
  if (arg1) (arg1)->vertsProp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_vertsProp_get(void * jarg1) {
  void * jresult ;
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *result = 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  result = (nifly::hkWorldObjCInfoProperty *)& ((arg1)->vertsProp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_normalsProp_set(void * jarg1, void * jarg2) {
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *arg2 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  arg2 = (nifly::hkWorldObjCInfoProperty *)jarg2; 
  if (arg1) (arg1)->normalsProp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_normalsProp_get(void * jarg1) {
  void * jresult ;
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *result = 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  result = (nifly::hkWorldObjCInfoProperty *)& ((arg1)->normalsProp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_verts_set(void * jarg1, void * jarg2) {
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  nifly::NiVector< Vector4 > *arg2 = (nifly::NiVector< Vector4 > *) 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  arg2 = (nifly::NiVector< Vector4 > *)jarg2; 
  if (arg1) (arg1)->verts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_verts_get(void * jarg1) {
  void * jresult ;
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  nifly::NiVector< Vector4 > *result = 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  result = (nifly::NiVector< Vector4 > *)& ((arg1)->verts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_normals_set(void * jarg1, void * jarg2) {
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  nifly::NiVector< Vector4 > *arg2 = (nifly::NiVector< Vector4 > *) 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  arg2 = (nifly::NiVector< Vector4 > *)jarg2; 
  if (arg1) (arg1)->normals = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_normals_get(void * jarg1) {
  void * jresult ;
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  nifly::NiVector< Vector4 > *result = 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  result = (nifly::NiVector< Vector4 > *)& ((arg1)->normals);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkConvexVerticesShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConvexVerticesShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkConvexVerticesShape() {
  void * jresult ;
  nifly::bhkConvexVerticesShape *result = 0 ;
  
  result = (nifly::bhkConvexVerticesShape *)new nifly::bhkConvexVerticesShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkConvexVerticesShape(void * jarg1) {
  nifly::bhkConvexVerticesShape *arg1 = (nifly::bhkConvexVerticesShape *) 0 ;
  
  arg1 = (nifly::bhkConvexVerticesShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBoxShape_dimensions_set(void * jarg1, void * jarg2) {
  nifly::bhkBoxShape *arg1 = (nifly::bhkBoxShape *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::bhkBoxShape *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->dimensions = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkBoxShape_dimensions_get(void * jarg1) {
  void * jresult ;
  nifly::bhkBoxShape *arg1 = (nifly::bhkBoxShape *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::bhkBoxShape *)jarg1; 
  result =  ((arg1)->dimensions);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBoxShape_radius2_set(void * jarg1, float jarg2) {
  nifly::bhkBoxShape *arg1 = (nifly::bhkBoxShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkBoxShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkBoxShape_radius2_get(void * jarg1) {
  float jresult ;
  nifly::bhkBoxShape *arg1 = (nifly::bhkBoxShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkBoxShape *)jarg1; 
  result = (float) ((arg1)->radius2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBoxShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkBoxShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBoxShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkBoxShape *arg1 = (nifly::bhkBoxShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkBoxShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBoxShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkBoxShape *arg1 = (nifly::bhkBoxShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkBoxShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkBoxShape() {
  void * jresult ;
  nifly::bhkBoxShape *result = 0 ;
  
  result = (nifly::bhkBoxShape *)new nifly::bhkBoxShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkBoxShape(void * jarg1) {
  nifly::bhkBoxShape *arg1 = (nifly::bhkBoxShape *) 0 ;
  
  arg1 = (nifly::bhkBoxShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkSphereShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkSphereShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkSphereShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkSphereShape *arg1 = (nifly::bhkSphereShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkSphereShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkSphereShape() {
  void * jresult ;
  nifly::bhkSphereShape *result = 0 ;
  
  result = (nifly::bhkSphereShape *)new nifly::bhkSphereShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkSphereShape(void * jarg1) {
  nifly::bhkSphereShape *arg1 = (nifly::bhkSphereShape *) 0 ;
  
  arg1 = (nifly::bhkSphereShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkTransformShape_shapeRef_set(void * jarg1, void * jarg2) {
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  nifly::NiBlockRef< nifly::bhkShape > *arg2 = (nifly::NiBlockRef< nifly::bhkShape > *) 0 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::bhkShape > *)jarg2; 
  if (arg1) (arg1)->shapeRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkTransformShape_shapeRef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  nifly::NiBlockRef< nifly::bhkShape > *result = 0 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  result = (nifly::NiBlockRef< nifly::bhkShape > *)& ((arg1)->shapeRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkTransformShape_material_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkTransformShape_material_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  result = (nifly::HavokMaterial) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkTransformShape_radius_set(void * jarg1, float jarg2) {
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkTransformShape_radius_get(void * jarg1) {
  float jresult ;
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkTransformShape_xform_set(void * jarg1, void * jarg2) {
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  Matrix4 arg2 ;
  Matrix4 *argp2 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  argp2 = (Matrix4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Matrix4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->xform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkTransformShape_xform_get(void * jarg1) {
  void * jresult ;
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  Matrix4 result;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  result =  ((arg1)->xform);
  jresult = new Matrix4((const Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkTransformShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkTransformShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkTransformShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkTransformShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkTransformShape_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkTransformShape_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkTransformShape() {
  void * jresult ;
  nifly::bhkTransformShape *result = 0 ;
  
  result = (nifly::bhkTransformShape *)new nifly::bhkTransformShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkTransformShape(void * jarg1) {
  nifly::bhkTransformShape *arg1 = (nifly::bhkTransformShape *) 0 ;
  
  arg1 = (nifly::bhkTransformShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkConvexTransformShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkConvexTransformShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkConvexTransformShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkConvexTransformShape *arg1 = (nifly::bhkConvexTransformShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkConvexTransformShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkConvexTransformShape() {
  void * jresult ;
  nifly::bhkConvexTransformShape *result = 0 ;
  
  result = (nifly::bhkConvexTransformShape *)new nifly::bhkConvexTransformShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkConvexTransformShape(void * jarg1) {
  nifly::bhkConvexTransformShape *arg1 = (nifly::bhkConvexTransformShape *) 0 ;
  
  arg1 = (nifly::bhkConvexTransformShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_point1_set(void * jarg1, void * jarg2) {
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->point1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_point1_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  result =  ((arg1)->point1);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_radius1_set(void * jarg1, float jarg2) {
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_radius1_get(void * jarg1) {
  float jresult ;
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  result = (float) ((arg1)->radius1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_point2_set(void * jarg1, void * jarg2) {
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->point2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_point2_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  result =  ((arg1)->point2);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_radius2_set(void * jarg1, float jarg2) {
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_radius2_get(void * jarg1) {
  float jresult ;
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  result = (float) ((arg1)->radius2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkCapsuleShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCapsuleShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkCapsuleShape() {
  void * jresult ;
  nifly::bhkCapsuleShape *result = 0 ;
  
  result = (nifly::bhkCapsuleShape *)new nifly::bhkCapsuleShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkCapsuleShape(void * jarg1) {
  nifly::bhkCapsuleShape *arg1 = (nifly::bhkCapsuleShape *) 0 ;
  
  arg1 = (nifly::bhkCapsuleShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkBvTreeShape() {
  void * jresult ;
  nifly::bhkBvTreeShape *result = 0 ;
  
  result = (nifly::bhkBvTreeShape *)new nifly::bhkBvTreeShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkBvTreeShape(void * jarg1) {
  nifly::bhkBvTreeShape *arg1 = (nifly::bhkBvTreeShape *) 0 ;
  
  arg1 = (nifly::bhkBvTreeShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_shapeRef_set(void * jarg1, void * jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  nifly::NiBlockRef< nifly::bhkShape > *arg2 = (nifly::NiBlockRef< nifly::bhkShape > *) 0 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::bhkShape > *)jarg2; 
  if (arg1) (arg1)->shapeRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_shapeRef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  nifly::NiBlockRef< nifly::bhkShape > *result = 0 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  result = (nifly::NiBlockRef< nifly::bhkShape > *)& ((arg1)->shapeRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_userData_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_userData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  result = (uint32_t) ((arg1)->userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_shapeCollection_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->shapeCollection = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_shapeCollection_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  result = (uint32_t) ((arg1)->shapeCollection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_code_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_code_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  result = (uint32_t) ((arg1)->code);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_scale_set(void * jarg1, float jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_scale_get(void * jarg1) {
  float jresult ;
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_offset_set(void * jarg1, void * jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_offset_get(void * jarg1) {
  void * jresult ;
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  result =  ((arg1)->offset);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_buildType_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->buildType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_buildType_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  result = (uint8_t) ((arg1)->buildType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkMoppBvTreeShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_GetData(void * jarg1) {
  void * jresult ;
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  std::vector< uint8_t > result;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  result = ((nifly::bhkMoppBvTreeShape const *)arg1)->GetData();
  jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMoppBvTreeShape_SetData(void * jarg1, void * jarg2) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  arg2 = (std::vector< uint8_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > const & type is null", 0);
    return ;
  } 
  (arg1)->SetData((std::vector< uint8_t > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkMoppBvTreeShape() {
  void * jresult ;
  nifly::bhkMoppBvTreeShape *result = 0 ;
  
  result = (nifly::bhkMoppBvTreeShape *)new nifly::bhkMoppBvTreeShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkMoppBvTreeShape(void * jarg1) {
  nifly::bhkMoppBvTreeShape *arg1 = (nifly::bhkMoppBvTreeShape *) 0 ;
  
  arg1 = (nifly::bhkMoppBvTreeShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_radius_set(void * jarg1, float jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_radius_get(void * jarg1) {
  float jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused1_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unused1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (uint32_t) ((arg1)->unused1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused2_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unused2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (uint32_t) ((arg1)->unused2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused3_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unused3 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused3_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (uint32_t) ((arg1)->unused3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused4_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unused4 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused4_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (uint32_t) ((arg1)->unused4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused5_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unused5 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_unused5_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (uint32_t) ((arg1)->unused5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_growBy_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->growBy = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_growBy_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (uint32_t) ((arg1)->growBy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_scale_set(void * jarg1, void * jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_scale_get(void * jarg1) {
  void * jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result =  ((arg1)->scale);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_partRefs_set(void * jarg1, void * jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  nifly::NiBlockRefArray< nifly::NiTriStripsData > *arg2 = (nifly::NiBlockRefArray< nifly::NiTriStripsData > *) 0 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiTriStripsData > *)jarg2; 
  if (arg1) (arg1)->partRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_partRefs_get(void * jarg1) {
  void * jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  nifly::NiBlockRefArray< nifly::NiTriStripsData > *result = 0 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiTriStripsData > *)& ((arg1)->partRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_filters_set(void * jarg1, void * jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  nifly::NiVector< uint32_t > *arg2 = (nifly::NiVector< uint32_t > *) 0 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (nifly::NiVector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->filters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_filters_get(void * jarg1) {
  void * jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  nifly::NiVector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (nifly::NiVector< uint32_t > *)& ((arg1)->filters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkNiTriStripsShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_GetMaterial(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  result = (nifly::HavokMaterial)((nifly::bhkNiTriStripsShape const *)arg1)->GetMaterial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkNiTriStripsShape_SetMaterial(void * jarg1, unsigned int jarg2) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  (arg1)->SetMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkNiTriStripsShape() {
  void * jresult ;
  nifly::bhkNiTriStripsShape *result = 0 ;
  
  result = (nifly::bhkNiTriStripsShape *)new nifly::bhkNiTriStripsShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkNiTriStripsShape(void * jarg1) {
  nifly::bhkNiTriStripsShape *arg1 = (nifly::bhkNiTriStripsShape *) 0 ;
  
  arg1 = (nifly::bhkNiTriStripsShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkShapeCollection() {
  void * jresult ;
  nifly::bhkShapeCollection *result = 0 ;
  
  result = (nifly::bhkShapeCollection *)new nifly::bhkShapeCollection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkShapeCollection(void * jarg1) {
  nifly::bhkShapeCollection *arg1 = (nifly::bhkShapeCollection *) 0 ;
  
  arg1 = (nifly::bhkShapeCollection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkListShape_subShapeRefs_set(void * jarg1, void * jarg2) {
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::NiBlockRefArray< nifly::bhkShape > *arg2 = (nifly::NiBlockRefArray< nifly::bhkShape > *) 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::bhkShape > *)jarg2; 
  if (arg1) (arg1)->subShapeRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkListShape_subShapeRefs_get(void * jarg1) {
  void * jresult ;
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::NiBlockRefArray< nifly::bhkShape > *result = 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::bhkShape > *)& ((arg1)->subShapeRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkListShape_childShapeProp_set(void * jarg1, void * jarg2) {
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *arg2 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  arg2 = (nifly::hkWorldObjCInfoProperty *)jarg2; 
  if (arg1) (arg1)->childShapeProp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkListShape_childShapeProp_get(void * jarg1) {
  void * jresult ;
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *result = 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  result = (nifly::hkWorldObjCInfoProperty *)& ((arg1)->childShapeProp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkListShape_childFilterProp_set(void * jarg1, void * jarg2) {
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *arg2 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  arg2 = (nifly::hkWorldObjCInfoProperty *)jarg2; 
  if (arg1) (arg1)->childFilterProp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkListShape_childFilterProp_get(void * jarg1) {
  void * jresult ;
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::hkWorldObjCInfoProperty *result = 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  result = (nifly::hkWorldObjCInfoProperty *)& ((arg1)->childFilterProp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkListShape_filters_set(void * jarg1, void * jarg2) {
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::NiVector< nifly::HavokFilter > *arg2 = (nifly::NiVector< nifly::HavokFilter > *) 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  arg2 = (nifly::NiVector< nifly::HavokFilter > *)jarg2; 
  if (arg1) (arg1)->filters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkListShape_filters_get(void * jarg1) {
  void * jresult ;
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::NiVector< nifly::HavokFilter > *result = 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  result = (nifly::NiVector< nifly::HavokFilter > *)& ((arg1)->filters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkListShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkListShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkListShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkListShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkListShape_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkListShape_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkListShape_GetMaterial(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  result = (nifly::HavokMaterial)((nifly::bhkListShape const *)arg1)->GetMaterial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkListShape_SetMaterial(void * jarg1, unsigned int jarg2) {
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  (arg1)->SetMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkListShape() {
  void * jresult ;
  nifly::bhkListShape *result = 0 ;
  
  result = (nifly::bhkListShape *)new nifly::bhkListShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkListShape(void * jarg1) {
  nifly::bhkListShape *arg1 = (nifly::bhkListShape *) 0 ;
  
  arg1 = (nifly::bhkListShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkTriangleData_tri_set(void * jarg1, void * jarg2) {
  nifly::hkTriangleData *arg1 = (nifly::hkTriangleData *) 0 ;
  Triangle arg2 ;
  Triangle *argp2 ;
  
  arg1 = (nifly::hkTriangleData *)jarg1; 
  argp2 = (Triangle *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Triangle", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->tri = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_hkTriangleData_tri_get(void * jarg1) {
  void * jresult ;
  nifly::hkTriangleData *arg1 = (nifly::hkTriangleData *) 0 ;
  Triangle result;
  
  arg1 = (nifly::hkTriangleData *)jarg1; 
  result =  ((arg1)->tri);
  jresult = new Triangle((const Triangle &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkTriangleData_weldingInfo_set(void * jarg1, unsigned short jarg2) {
  nifly::hkTriangleData *arg1 = (nifly::hkTriangleData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::hkTriangleData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->weldingInfo = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_hkTriangleData_weldingInfo_get(void * jarg1) {
  unsigned short jresult ;
  nifly::hkTriangleData *arg1 = (nifly::hkTriangleData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::hkTriangleData *)jarg1; 
  result = (uint16_t) ((arg1)->weldingInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_hkTriangleData() {
  void * jresult ;
  nifly::hkTriangleData *result = 0 ;
  
  result = (nifly::hkTriangleData *)new nifly::hkTriangleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_hkTriangleData(void * jarg1) {
  nifly::hkTriangleData *arg1 = (nifly::hkTriangleData *) 0 ;
  
  arg1 = (nifly::hkTriangleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkTriangleNormalData_tri_set(void * jarg1, void * jarg2) {
  nifly::hkTriangleNormalData *arg1 = (nifly::hkTriangleNormalData *) 0 ;
  Triangle arg2 ;
  Triangle *argp2 ;
  
  arg1 = (nifly::hkTriangleNormalData *)jarg1; 
  argp2 = (Triangle *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Triangle", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->tri = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_hkTriangleNormalData_tri_get(void * jarg1) {
  void * jresult ;
  nifly::hkTriangleNormalData *arg1 = (nifly::hkTriangleNormalData *) 0 ;
  Triangle result;
  
  arg1 = (nifly::hkTriangleNormalData *)jarg1; 
  result =  ((arg1)->tri);
  jresult = new Triangle((const Triangle &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkTriangleNormalData_weldingInfo_set(void * jarg1, unsigned short jarg2) {
  nifly::hkTriangleNormalData *arg1 = (nifly::hkTriangleNormalData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::hkTriangleNormalData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->weldingInfo = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_hkTriangleNormalData_weldingInfo_get(void * jarg1) {
  unsigned short jresult ;
  nifly::hkTriangleNormalData *arg1 = (nifly::hkTriangleNormalData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::hkTriangleNormalData *)jarg1; 
  result = (uint16_t) ((arg1)->weldingInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkTriangleNormalData_normal_set(void * jarg1, void * jarg2) {
  nifly::hkTriangleNormalData *arg1 = (nifly::hkTriangleNormalData *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::hkTriangleNormalData *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->normal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_hkTriangleNormalData_normal_get(void * jarg1) {
  void * jresult ;
  nifly::hkTriangleNormalData *arg1 = (nifly::hkTriangleNormalData *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::hkTriangleNormalData *)jarg1; 
  result =  ((arg1)->normal);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_hkTriangleNormalData() {
  void * jresult ;
  nifly::hkTriangleNormalData *result = 0 ;
  
  result = (nifly::hkTriangleNormalData *)new nifly::hkTriangleNormalData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_hkTriangleNormalData(void * jarg1) {
  nifly::hkTriangleNormalData *arg1 = (nifly::hkTriangleNormalData *) 0 ;
  
  arg1 = (nifly::hkTriangleNormalData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkSubPartData_filter_set(void * jarg1, void * jarg2) {
  nifly::hkSubPartData *arg1 = (nifly::hkSubPartData *) 0 ;
  nifly::HavokFilter *arg2 = (nifly::HavokFilter *) 0 ;
  
  arg1 = (nifly::hkSubPartData *)jarg1; 
  arg2 = (nifly::HavokFilter *)jarg2; 
  if (arg1) (arg1)->filter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_hkSubPartData_filter_get(void * jarg1) {
  void * jresult ;
  nifly::hkSubPartData *arg1 = (nifly::hkSubPartData *) 0 ;
  nifly::HavokFilter *result = 0 ;
  
  arg1 = (nifly::hkSubPartData *)jarg1; 
  result = (nifly::HavokFilter *)& ((arg1)->filter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkSubPartData_numVerts_set(void * jarg1, unsigned int jarg2) {
  nifly::hkSubPartData *arg1 = (nifly::hkSubPartData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::hkSubPartData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numVerts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_hkSubPartData_numVerts_get(void * jarg1) {
  unsigned int jresult ;
  nifly::hkSubPartData *arg1 = (nifly::hkSubPartData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::hkSubPartData *)jarg1; 
  result = (uint32_t) ((arg1)->numVerts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkSubPartData_material_set(void * jarg1, unsigned int jarg2) {
  nifly::hkSubPartData *arg1 = (nifly::hkSubPartData *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::hkSubPartData *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_hkSubPartData_material_get(void * jarg1) {
  unsigned int jresult ;
  nifly::hkSubPartData *arg1 = (nifly::hkSubPartData *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::hkSubPartData *)jarg1; 
  result = (nifly::HavokMaterial) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_hkSubPartData() {
  void * jresult ;
  nifly::hkSubPartData *result = 0 ;
  
  result = (nifly::hkSubPartData *)new nifly::hkSubPartData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_hkSubPartData(void * jarg1) {
  nifly::hkSubPartData *arg1 = (nifly::hkSubPartData *) 0 ;
  
  arg1 = (nifly::hkSubPartData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_keyCount_set(void * jarg1, unsigned int jarg2) {
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->keyCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_keyCount_get(void * jarg1) {
  unsigned int jresult ;
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  result = (uint32_t) ((arg1)->keyCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_triData_set(void * jarg1, void * jarg2) {
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  std::vector< nifly::hkTriangleData > *arg2 = (std::vector< nifly::hkTriangleData > *) 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  arg2 = (std::vector< nifly::hkTriangleData > *)jarg2; 
  if (arg1) (arg1)->triData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_triData_get(void * jarg1) {
  void * jresult ;
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  std::vector< nifly::hkTriangleData > *result = 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  result = (std::vector< nifly::hkTriangleData > *)& ((arg1)->triData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_triNormData_set(void * jarg1, void * jarg2) {
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  std::vector< nifly::hkTriangleNormalData > *arg2 = (std::vector< nifly::hkTriangleNormalData > *) 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  arg2 = (std::vector< nifly::hkTriangleNormalData > *)jarg2; 
  if (arg1) (arg1)->triNormData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_triNormData_get(void * jarg1) {
  void * jresult ;
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  std::vector< nifly::hkTriangleNormalData > *result = 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  result = (std::vector< nifly::hkTriangleNormalData > *)& ((arg1)->triNormData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_numVerts_set(void * jarg1, unsigned int jarg2) {
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numVerts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_numVerts_get(void * jarg1) {
  unsigned int jresult ;
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  result = (uint32_t) ((arg1)->numVerts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_compressed_set(void * jarg1, unsigned int jarg2) {
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->compressed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_compressed_get(void * jarg1) {
  unsigned int jresult ;
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  bool result;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  result = (bool) ((arg1)->compressed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_compressedVertData_set(void * jarg1, void * jarg2) {
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->compressedVertData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_compressedVertData_get(void * jarg1) {
  void * jresult ;
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->compressedVertData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_subPartData_set(void * jarg1, void * jarg2) {
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  nifly::NiVector< nifly::hkSubPartData,uint16_t > *arg2 = (nifly::NiVector< nifly::hkSubPartData,uint16_t > *) 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  arg2 = (nifly::NiVector< nifly::hkSubPartData,uint16_t > *)jarg2; 
  if (arg1) (arg1)->subPartData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_subPartData_get(void * jarg1) {
  void * jresult ;
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  nifly::NiVector< nifly::hkSubPartData,uint16_t > *result = 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  result = (nifly::NiVector< nifly::hkSubPartData,uint16_t > *)& ((arg1)->subPartData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::hkPackedNiTriStripsData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_hkPackedNiTriStripsData_Sync(void * jarg1, void * jarg2) {
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_hkPackedNiTriStripsData() {
  void * jresult ;
  nifly::hkPackedNiTriStripsData *result = 0 ;
  
  result = (nifly::hkPackedNiTriStripsData *)new nifly::hkPackedNiTriStripsData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_hkPackedNiTriStripsData(void * jarg1) {
  nifly::hkPackedNiTriStripsData *arg1 = (nifly::hkPackedNiTriStripsData *) 0 ;
  
  arg1 = (nifly::hkPackedNiTriStripsData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_subPartData_set(void * jarg1, void * jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  nifly::NiVector< nifly::hkSubPartData,uint16_t > *arg2 = (nifly::NiVector< nifly::hkSubPartData,uint16_t > *) 0 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  arg2 = (nifly::NiVector< nifly::hkSubPartData,uint16_t > *)jarg2; 
  if (arg1) (arg1)->subPartData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_subPartData_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  nifly::NiVector< nifly::hkSubPartData,uint16_t > *result = 0 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  result = (nifly::NiVector< nifly::hkSubPartData,uint16_t > *)& ((arg1)->subPartData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_userData_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_userData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  result = (uint32_t) ((arg1)->userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_radius_set(void * jarg1, float jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_radius_get(void * jarg1) {
  float jresult ;
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_scaling_set(void * jarg1, void * jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->scaling = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_scaling_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  result =  ((arg1)->scaling);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_radius2_set(void * jarg1, float jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_radius2_get(void * jarg1) {
  float jresult ;
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  result = (float) ((arg1)->radius2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_scaling2_set(void * jarg1, void * jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->scaling2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_scaling2_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  result =  ((arg1)->scaling2);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_dataRef_set(void * jarg1, void * jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  nifly::NiBlockRef< nifly::hkPackedNiTriStripsData > *arg2 = (nifly::NiBlockRef< nifly::hkPackedNiTriStripsData > *) 0 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::hkPackedNiTriStripsData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  nifly::NiBlockRef< nifly::hkPackedNiTriStripsData > *result = 0 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  result = (nifly::NiBlockRef< nifly::hkPackedNiTriStripsData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkPackedNiTriStripsShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPackedNiTriStripsShape_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkPackedNiTriStripsShape() {
  void * jresult ;
  nifly::bhkPackedNiTriStripsShape *result = 0 ;
  
  result = (nifly::bhkPackedNiTriStripsShape *)new nifly::bhkPackedNiTriStripsShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkPackedNiTriStripsShape(void * jarg1) {
  nifly::bhkPackedNiTriStripsShape *arg1 = (nifly::bhkPackedNiTriStripsShape *) 0 ;
  
  arg1 = (nifly::bhkPackedNiTriStripsShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLiquidAction_userData_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkLiquidAction_userData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  result = (uint32_t) ((arg1)->userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLiquidAction_unkInt1_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkLiquidAction_unkInt1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLiquidAction_unkInt2_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkLiquidAction_unkInt2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLiquidAction_initialStickForce_set(void * jarg1, float jarg2) {
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->initialStickForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkLiquidAction_initialStickForce_get(void * jarg1) {
  float jresult ;
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  float result;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  result = (float) ((arg1)->initialStickForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLiquidAction_stickStrength_set(void * jarg1, float jarg2) {
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->stickStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkLiquidAction_stickStrength_get(void * jarg1) {
  float jresult ;
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  float result;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  result = (float) ((arg1)->stickStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLiquidAction_neighborDistance_set(void * jarg1, float jarg2) {
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->neighborDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkLiquidAction_neighborDistance_get(void * jarg1) {
  float jresult ;
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  float result;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  result = (float) ((arg1)->neighborDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLiquidAction_neighborStrength_set(void * jarg1, float jarg2) {
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->neighborStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkLiquidAction_neighborStrength_get(void * jarg1) {
  float jresult ;
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  float result;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  result = (float) ((arg1)->neighborStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkLiquidAction_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkLiquidAction::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkLiquidAction_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLiquidAction_Sync(void * jarg1, void * jarg2) {
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkLiquidAction() {
  void * jresult ;
  nifly::bhkLiquidAction *result = 0 ;
  
  result = (nifly::bhkLiquidAction *)new nifly::bhkLiquidAction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkLiquidAction(void * jarg1) {
  nifly::bhkLiquidAction *arg1 = (nifly::bhkLiquidAction *) 0 ;
  
  arg1 = (nifly::bhkLiquidAction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_bodyRef_set(void * jarg1, void * jarg2) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  nifly::NiBlockPtr< nifly::NiObject > *arg2 = (nifly::NiBlockPtr< nifly::NiObject > *) 0 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiObject > *)jarg2; 
  if (arg1) (arg1)->bodyRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_bodyRef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  nifly::NiBlockPtr< nifly::NiObject > *result = 0 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiObject > *)& ((arg1)->bodyRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_unkInt1_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_unkInt1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_unkInt2_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_unkInt2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_hingeAxisLS_set(void * jarg1, void * jarg2) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->hingeAxisLS = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_hingeAxisLS_get(void * jarg1) {
  void * jresult ;
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  result =  ((arg1)->hingeAxisLS);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_forwardLS_set(void * jarg1, void * jarg2) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->forwardLS = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_forwardLS_get(void * jarg1) {
  void * jresult ;
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  result =  ((arg1)->forwardLS);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_strength_set(void * jarg1, float jarg2) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_strength_get(void * jarg1) {
  float jresult ;
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  float result;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  result = (float) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_damping_set(void * jarg1, float jarg2) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_damping_get(void * jarg1) {
  float jresult ;
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  float result;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  result = (float) ((arg1)->damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkOrientHingedBodyAction::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_Sync(void * jarg1, void * jarg2) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkOrientHingedBodyAction_GetPtrs(void * jarg1, void * jarg2) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkOrientHingedBodyAction() {
  void * jresult ;
  nifly::bhkOrientHingedBodyAction *result = 0 ;
  
  result = (nifly::bhkOrientHingedBodyAction *)new nifly::bhkOrientHingedBodyAction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkOrientHingedBodyAction(void * jarg1) {
  nifly::bhkOrientHingedBodyAction *arg1 = (nifly::bhkOrientHingedBodyAction *) 0 ;
  
  arg1 = (nifly::bhkOrientHingedBodyAction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkWorldObject_shapeRef_set(void * jarg1, void * jarg2) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  nifly::NiBlockRef< nifly::bhkShape > *arg2 = (nifly::NiBlockRef< nifly::bhkShape > *) 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::bhkShape > *)jarg2; 
  if (arg1) (arg1)->shapeRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkWorldObject_shapeRef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  nifly::NiBlockRef< nifly::bhkShape > *result = 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  result = (nifly::NiBlockRef< nifly::bhkShape > *)& ((arg1)->shapeRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkWorldObject_collisionFilter_set(void * jarg1, void * jarg2) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  nifly::HavokFilter *arg2 = (nifly::HavokFilter *) 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  arg2 = (nifly::HavokFilter *)jarg2; 
  if (arg1) (arg1)->collisionFilter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkWorldObject_collisionFilter_get(void * jarg1) {
  void * jresult ;
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  nifly::HavokFilter *result = 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  result = (nifly::HavokFilter *)& ((arg1)->collisionFilter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkWorldObject_unkInt1_set(void * jarg1, int jarg2) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->unkInt1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_bhkWorldObject_unkInt1_get(void * jarg1) {
  int jresult ;
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  int result;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  result = (int) ((arg1)->unkInt1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkWorldObject_broadPhaseType_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->broadPhaseType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkWorldObject_broadPhaseType_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  result = (uint8_t) ((arg1)->broadPhaseType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkWorldObject_unkBytes_set(void * jarg1, void * jarg2) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->unkBytes;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkWorldObject_unkBytes_get(void * jarg1) {
  void * jresult ;
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->unkBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkWorldObject_prop_set(void * jarg1, void * jarg2) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  nifly::hkWorldObjCInfoProperty *arg2 = (nifly::hkWorldObjCInfoProperty *) 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  arg2 = (nifly::hkWorldObjCInfoProperty *)jarg2; 
  if (arg1) (arg1)->prop = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkWorldObject_prop_get(void * jarg1) {
  void * jresult ;
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  nifly::hkWorldObjCInfoProperty *result = 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  result = (nifly::hkWorldObjCInfoProperty *)& ((arg1)->prop);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkWorldObject_Sync(void * jarg1, void * jarg2) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkWorldObject_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkWorldObject_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkWorldObject() {
  void * jresult ;
  nifly::bhkWorldObject *result = 0 ;
  
  result = (nifly::bhkWorldObject *)new nifly::bhkWorldObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkWorldObject(void * jarg1) {
  nifly::bhkWorldObject *arg1 = (nifly::bhkWorldObject *) 0 ;
  
  arg1 = (nifly::bhkWorldObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkPhantom() {
  void * jresult ;
  nifly::bhkPhantom *result = 0 ;
  
  result = (nifly::bhkPhantom *)new nifly::bhkPhantom();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkPhantom(void * jarg1) {
  nifly::bhkPhantom *arg1 = (nifly::bhkPhantom *) 0 ;
  
  arg1 = (nifly::bhkPhantom *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkShapePhantom() {
  void * jresult ;
  nifly::bhkShapePhantom *result = 0 ;
  
  result = (nifly::bhkShapePhantom *)new nifly::bhkShapePhantom();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkShapePhantom(void * jarg1) {
  nifly::bhkShapePhantom *arg1 = (nifly::bhkShapePhantom *) 0 ;
  
  arg1 = (nifly::bhkShapePhantom *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkSimpleShapePhantom_transform_set(void * jarg1, void * jarg2) {
  nifly::bhkSimpleShapePhantom *arg1 = (nifly::bhkSimpleShapePhantom *) 0 ;
  Matrix4 arg2 ;
  Matrix4 *argp2 ;
  
  arg1 = (nifly::bhkSimpleShapePhantom *)jarg1; 
  argp2 = (Matrix4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Matrix4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->transform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkSimpleShapePhantom_transform_get(void * jarg1) {
  void * jresult ;
  nifly::bhkSimpleShapePhantom *arg1 = (nifly::bhkSimpleShapePhantom *) 0 ;
  Matrix4 result;
  
  arg1 = (nifly::bhkSimpleShapePhantom *)jarg1; 
  result =  ((arg1)->transform);
  jresult = new Matrix4((const Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkSimpleShapePhantom_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkSimpleShapePhantom::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkSimpleShapePhantom_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkSimpleShapePhantom *arg1 = (nifly::bhkSimpleShapePhantom *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkSimpleShapePhantom *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkSimpleShapePhantom_Sync(void * jarg1, void * jarg2) {
  nifly::bhkSimpleShapePhantom *arg1 = (nifly::bhkSimpleShapePhantom *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkSimpleShapePhantom *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkSimpleShapePhantom() {
  void * jresult ;
  nifly::bhkSimpleShapePhantom *result = 0 ;
  
  result = (nifly::bhkSimpleShapePhantom *)new nifly::bhkSimpleShapePhantom();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkSimpleShapePhantom(void * jarg1) {
  nifly::bhkSimpleShapePhantom *arg1 = (nifly::bhkSimpleShapePhantom *) 0 ;
  
  arg1 = (nifly::bhkSimpleShapePhantom *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkAabbPhantom_aabbMin_set(void * jarg1, void * jarg2) {
  nifly::bhkAabbPhantom *arg1 = (nifly::bhkAabbPhantom *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkAabbPhantom *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->aabbMin = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkAabbPhantom_aabbMin_get(void * jarg1) {
  void * jresult ;
  nifly::bhkAabbPhantom *arg1 = (nifly::bhkAabbPhantom *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkAabbPhantom *)jarg1; 
  result =  ((arg1)->aabbMin);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkAabbPhantom_aabbMax_set(void * jarg1, void * jarg2) {
  nifly::bhkAabbPhantom *arg1 = (nifly::bhkAabbPhantom *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkAabbPhantom *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->aabbMax = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkAabbPhantom_aabbMax_get(void * jarg1) {
  void * jresult ;
  nifly::bhkAabbPhantom *arg1 = (nifly::bhkAabbPhantom *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkAabbPhantom *)jarg1; 
  result =  ((arg1)->aabbMax);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkAabbPhantom_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkAabbPhantom::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkAabbPhantom_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkAabbPhantom *arg1 = (nifly::bhkAabbPhantom *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkAabbPhantom *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkAabbPhantom_Sync(void * jarg1, void * jarg2) {
  nifly::bhkAabbPhantom *arg1 = (nifly::bhkAabbPhantom *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkAabbPhantom *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkAabbPhantom() {
  void * jresult ;
  nifly::bhkAabbPhantom *result = 0 ;
  
  result = (nifly::bhkAabbPhantom *)new nifly::bhkAabbPhantom();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkAabbPhantom(void * jarg1) {
  nifly::bhkAabbPhantom *arg1 = (nifly::bhkAabbPhantom *) 0 ;
  
  arg1 = (nifly::bhkAabbPhantom *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkEntity() {
  void * jresult ;
  nifly::bhkEntity *result = 0 ;
  
  result = (nifly::bhkEntity *)new nifly::bhkEntity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkEntity(void * jarg1) {
  nifly::bhkEntity *arg1 = (nifly::bhkEntity *) 0 ;
  
  arg1 = (nifly::bhkEntity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_collisionResponse_set(void * jarg1, int jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  nifly::hkResponseType arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (nifly::hkResponseType)jarg2; 
  if (arg1) (arg1)->collisionResponse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_bhkRigidBody_collisionResponse_get(void * jarg1) {
  int jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  nifly::hkResponseType result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (nifly::hkResponseType) ((arg1)->collisionResponse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_unusedByte1_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->unusedByte1 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkRigidBody_unusedByte1_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint8_t) ((arg1)->unusedByte1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_processContactCallbackDelay_set(void * jarg1, unsigned short jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->processContactCallbackDelay = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_bhkRigidBody_processContactCallbackDelay_get(void * jarg1) {
  unsigned short jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint16_t) ((arg1)->processContactCallbackDelay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt1_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_collisionFilterCopy_set(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  nifly::HavokFilter *arg2 = (nifly::HavokFilter *) 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (nifly::HavokFilter *)jarg2; 
  if (arg1) (arg1)->collisionFilterCopy = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRigidBody_collisionFilterCopy_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  nifly::HavokFilter *result = 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (nifly::HavokFilter *)& ((arg1)->collisionFilterCopy);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkShorts2_set(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint16_t *arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint16_t *)jarg2; 
  {
    size_t ii;
    uint16_t *b = (uint16_t *) arg1->unkShorts2;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((uint16_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkShorts2_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint16_t *result = 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint16_t *)(uint16_t *) ((arg1)->unkShorts2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_translation_set(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRigidBody_translation_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result =  ((arg1)->translation);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_rotation_set(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  QuaternionXYZW arg2 ;
  QuaternionXYZW *argp2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  argp2 = (QuaternionXYZW *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null QuaternionXYZW", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRigidBody_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  QuaternionXYZW result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result =  ((arg1)->rotation);
  jresult = new QuaternionXYZW((const QuaternionXYZW &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_linearVelocity_set(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->linearVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRigidBody_linearVelocity_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result =  ((arg1)->linearVelocity);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_angularVelocity_set(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->angularVelocity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRigidBody_angularVelocity_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result =  ((arg1)->angularVelocity);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_inertiaMatrix_set(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float *arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->inertiaMatrix;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRigidBody_inertiaMatrix_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float *result = 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float *)(float *) ((arg1)->inertiaMatrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_center_set(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRigidBody_center_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result =  ((arg1)->center);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_mass_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_mass_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->mass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_linearDamping_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->linearDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_linearDamping_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_angularDamping_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->angularDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_angularDamping_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_timeFactor_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->timeFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_timeFactor_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->timeFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_gravityFactor_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->gravityFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_gravityFactor_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->gravityFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_friction_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_friction_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_rollingFrictionMult_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rollingFrictionMult = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_rollingFrictionMult_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->rollingFrictionMult);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_restitution_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_restitution_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_maxLinearVelocity_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxLinearVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_maxLinearVelocity_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->maxLinearVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_maxAngularVelocity_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxAngularVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_maxAngularVelocity_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->maxAngularVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_penetrationDepth_set(void * jarg1, float jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->penetrationDepth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRigidBody_penetrationDepth_get(void * jarg1) {
  float jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (float) ((arg1)->penetrationDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_motionSystem_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->motionSystem = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkRigidBody_motionSystem_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint8_t) ((arg1)->motionSystem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_deactivatorType_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->deactivatorType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkRigidBody_deactivatorType_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint8_t) ((arg1)->deactivatorType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_solverDeactivation_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->solverDeactivation = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkRigidBody_solverDeactivation_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint8_t) ((arg1)->solverDeactivation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_qualityType_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->qualityType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkRigidBody_qualityType_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint8_t) ((arg1)->qualityType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_autoRemoveLevel_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->autoRemoveLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkRigidBody_autoRemoveLevel_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint8_t) ((arg1)->autoRemoveLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_responseModifierFlag_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->responseModifierFlag = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkRigidBody_responseModifierFlag_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint8_t) ((arg1)->responseModifierFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_numShapeKeysInContactPointProps_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->numShapeKeysInContactPointProps = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkRigidBody_numShapeKeysInContactPointProps_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint8_t) ((arg1)->numShapeKeysInContactPointProps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_forceCollideOntoPpu_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->forceCollideOntoPpu = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkRigidBody_forceCollideOntoPpu_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  bool result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (bool) ((arg1)->forceCollideOntoPpu);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt2_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt3_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt3 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt3_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt4_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt4 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt4_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_constraintRefs_set(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  nifly::NiBlockRefArray< nifly::bhkSerializable > *arg2 = (nifly::NiBlockRefArray< nifly::bhkSerializable > *) 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::bhkSerializable > *)jarg2; 
  if (arg1) (arg1)->constraintRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRigidBody_constraintRefs_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  nifly::NiBlockRefArray< nifly::bhkSerializable > *result = 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::bhkSerializable > *)& ((arg1)->constraintRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt5_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt5 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkRigidBody_unkInt5_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_bodyFlags_set(void * jarg1, unsigned short jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->bodyFlags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_bhkRigidBody_bodyFlags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (uint16_t) ((arg1)->bodyFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRigidBody_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkRigidBody::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRigidBody_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_Sync(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRigidBody_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkRigidBody() {
  void * jresult ;
  nifly::bhkRigidBody *result = 0 ;
  
  result = (nifly::bhkRigidBody *)new nifly::bhkRigidBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkRigidBody(void * jarg1) {
  nifly::bhkRigidBody *arg1 = (nifly::bhkRigidBody *) 0 ;
  
  arg1 = (nifly::bhkRigidBody *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRigidBodyT_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkRigidBodyT::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRigidBodyT_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkRigidBodyT *arg1 = (nifly::bhkRigidBodyT *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkRigidBodyT *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkRigidBodyT() {
  void * jresult ;
  nifly::bhkRigidBodyT *result = 0 ;
  
  result = (nifly::bhkRigidBodyT *)new nifly::bhkRigidBodyT();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkRigidBodyT(void * jarg1) {
  nifly::bhkRigidBodyT *arg1 = (nifly::bhkRigidBodyT *) 0 ;
  
  arg1 = (nifly::bhkRigidBodyT *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConstraint_entityRefs_set(void * jarg1, void * jarg2) {
  nifly::bhkConstraint *arg1 = (nifly::bhkConstraint *) 0 ;
  nifly::NiBlockPtrArray< nifly::bhkEntity > *arg2 = (nifly::NiBlockPtrArray< nifly::bhkEntity > *) 0 ;
  
  arg1 = (nifly::bhkConstraint *)jarg1; 
  arg2 = (nifly::NiBlockPtrArray< nifly::bhkEntity > *)jarg2; 
  if (arg1) (arg1)->entityRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkConstraint_entityRefs_get(void * jarg1) {
  void * jresult ;
  nifly::bhkConstraint *arg1 = (nifly::bhkConstraint *) 0 ;
  nifly::NiBlockPtrArray< nifly::bhkEntity > *result = 0 ;
  
  arg1 = (nifly::bhkConstraint *)jarg1; 
  result = (nifly::NiBlockPtrArray< nifly::bhkEntity > *)& ((arg1)->entityRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConstraint_priority_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkConstraint *arg1 = (nifly::bhkConstraint *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkConstraint *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkConstraint_priority_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkConstraint *arg1 = (nifly::bhkConstraint *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkConstraint *)jarg1; 
  result = (uint32_t) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConstraint_Sync(void * jarg1, void * jarg2) {
  nifly::bhkConstraint *arg1 = (nifly::bhkConstraint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkConstraint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkConstraint_GetPtrs(void * jarg1, void * jarg2) {
  nifly::bhkConstraint *arg1 = (nifly::bhkConstraint *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkConstraint *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkConstraint() {
  void * jresult ;
  nifly::bhkConstraint *result = 0 ;
  
  result = (nifly::bhkConstraint *)new nifly::bhkConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkConstraint(void * jarg1) {
  nifly::bhkConstraint *arg1 = (nifly::bhkConstraint *) 0 ;
  
  arg1 = (nifly::bhkConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkHingeConstraint_hinge_set(void * jarg1, void * jarg2) {
  nifly::bhkHingeConstraint *arg1 = (nifly::bhkHingeConstraint *) 0 ;
  nifly::HingeDesc *arg2 = (nifly::HingeDesc *) 0 ;
  
  arg1 = (nifly::bhkHingeConstraint *)jarg1; 
  arg2 = (nifly::HingeDesc *)jarg2; 
  if (arg1) (arg1)->hinge = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkHingeConstraint_hinge_get(void * jarg1) {
  void * jresult ;
  nifly::bhkHingeConstraint *arg1 = (nifly::bhkHingeConstraint *) 0 ;
  nifly::HingeDesc *result = 0 ;
  
  arg1 = (nifly::bhkHingeConstraint *)jarg1; 
  result = (nifly::HingeDesc *)& ((arg1)->hinge);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkHingeConstraint_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkHingeConstraint::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkHingeConstraint_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkHingeConstraint *arg1 = (nifly::bhkHingeConstraint *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkHingeConstraint *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkHingeConstraint_Sync(void * jarg1, void * jarg2) {
  nifly::bhkHingeConstraint *arg1 = (nifly::bhkHingeConstraint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkHingeConstraint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkHingeConstraint() {
  void * jresult ;
  nifly::bhkHingeConstraint *result = 0 ;
  
  result = (nifly::bhkHingeConstraint *)new nifly::bhkHingeConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkHingeConstraint(void * jarg1) {
  nifly::bhkHingeConstraint *arg1 = (nifly::bhkHingeConstraint *) 0 ;
  
  arg1 = (nifly::bhkHingeConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLimitedHingeConstraint_limitedHinge_set(void * jarg1, void * jarg2) {
  nifly::bhkLimitedHingeConstraint *arg1 = (nifly::bhkLimitedHingeConstraint *) 0 ;
  nifly::LimitedHingeDesc *arg2 = (nifly::LimitedHingeDesc *) 0 ;
  
  arg1 = (nifly::bhkLimitedHingeConstraint *)jarg1; 
  arg2 = (nifly::LimitedHingeDesc *)jarg2; 
  if (arg1) (arg1)->limitedHinge = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkLimitedHingeConstraint_limitedHinge_get(void * jarg1) {
  void * jresult ;
  nifly::bhkLimitedHingeConstraint *arg1 = (nifly::bhkLimitedHingeConstraint *) 0 ;
  nifly::LimitedHingeDesc *result = 0 ;
  
  arg1 = (nifly::bhkLimitedHingeConstraint *)jarg1; 
  result = (nifly::LimitedHingeDesc *)& ((arg1)->limitedHinge);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkLimitedHingeConstraint_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkLimitedHingeConstraint::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkLimitedHingeConstraint_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkLimitedHingeConstraint *arg1 = (nifly::bhkLimitedHingeConstraint *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkLimitedHingeConstraint *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkLimitedHingeConstraint_Sync(void * jarg1, void * jarg2) {
  nifly::bhkLimitedHingeConstraint *arg1 = (nifly::bhkLimitedHingeConstraint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkLimitedHingeConstraint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkLimitedHingeConstraint() {
  void * jresult ;
  nifly::bhkLimitedHingeConstraint *result = 0 ;
  
  result = (nifly::bhkLimitedHingeConstraint *)new nifly::bhkLimitedHingeConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkLimitedHingeConstraint(void * jarg1) {
  nifly::bhkLimitedHingeConstraint *arg1 = (nifly::bhkLimitedHingeConstraint *) 0 ;
  
  arg1 = (nifly::bhkLimitedHingeConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_type_set(void * jarg1, int jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::hkConstraintType arg2 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (nifly::hkConstraintType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_ConstraintData_type_get(void * jarg1) {
  int jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::hkConstraintType result;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (nifly::hkConstraintType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_entityRefs_set(void * jarg1, void * jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::NiBlockRefArray< nifly::bhkEntity > *arg2 = (nifly::NiBlockRefArray< nifly::bhkEntity > *) 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::bhkEntity > *)jarg2; 
  if (arg1) (arg1)->entityRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ConstraintData_entityRefs_get(void * jarg1) {
  void * jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::NiBlockRefArray< nifly::bhkEntity > *result = 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::bhkEntity > *)& ((arg1)->entityRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_priority_set(void * jarg1, unsigned int jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_ConstraintData_priority_get(void * jarg1) {
  unsigned int jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (uint32_t) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_desc1_set(void * jarg1, void * jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::BallAndSocketDesc *arg2 = (nifly::BallAndSocketDesc *) 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (nifly::BallAndSocketDesc *)jarg2; 
  if (arg1) (arg1)->desc1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ConstraintData_desc1_get(void * jarg1) {
  void * jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::BallAndSocketDesc *result = 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (nifly::BallAndSocketDesc *)& ((arg1)->desc1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_desc2_set(void * jarg1, void * jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::HingeDesc *arg2 = (nifly::HingeDesc *) 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (nifly::HingeDesc *)jarg2; 
  if (arg1) (arg1)->desc2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ConstraintData_desc2_get(void * jarg1) {
  void * jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::HingeDesc *result = 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (nifly::HingeDesc *)& ((arg1)->desc2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_desc3_set(void * jarg1, void * jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::LimitedHingeDesc *arg2 = (nifly::LimitedHingeDesc *) 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (nifly::LimitedHingeDesc *)jarg2; 
  if (arg1) (arg1)->desc3 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ConstraintData_desc3_get(void * jarg1) {
  void * jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::LimitedHingeDesc *result = 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (nifly::LimitedHingeDesc *)& ((arg1)->desc3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_desc4_set(void * jarg1, void * jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::PrismaticDesc *arg2 = (nifly::PrismaticDesc *) 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (nifly::PrismaticDesc *)jarg2; 
  if (arg1) (arg1)->desc4 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ConstraintData_desc4_get(void * jarg1) {
  void * jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::PrismaticDesc *result = 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (nifly::PrismaticDesc *)& ((arg1)->desc4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_desc5_set(void * jarg1, void * jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::RagdollDesc *arg2 = (nifly::RagdollDesc *) 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (nifly::RagdollDesc *)jarg2; 
  if (arg1) (arg1)->desc5 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ConstraintData_desc5_get(void * jarg1) {
  void * jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::RagdollDesc *result = 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (nifly::RagdollDesc *)& ((arg1)->desc5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_desc6_set(void * jarg1, void * jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::StiffSpringDesc *arg2 = (nifly::StiffSpringDesc *) 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (nifly::StiffSpringDesc *)jarg2; 
  if (arg1) (arg1)->desc6 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ConstraintData_desc6_get(void * jarg1) {
  void * jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::StiffSpringDesc *result = 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (nifly::StiffSpringDesc *)& ((arg1)->desc6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_strength_set(void * jarg1, float jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_ConstraintData_strength_get(void * jarg1) {
  float jresult ;
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  float result;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  result = (float) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_Sync(void * jarg1, void * jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ConstraintData_GetPtrs(void * jarg1, void * jarg2) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_ConstraintData() {
  void * jresult ;
  nifly::ConstraintData *result = 0 ;
  
  result = (nifly::ConstraintData *)new nifly::ConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_ConstraintData(void * jarg1) {
  nifly::ConstraintData *arg1 = (nifly::ConstraintData *) 0 ;
  
  arg1 = (nifly::ConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBreakableConstraint_subConstraint_set(void * jarg1, void * jarg2) {
  nifly::bhkBreakableConstraint *arg1 = (nifly::bhkBreakableConstraint *) 0 ;
  nifly::ConstraintData *arg2 = (nifly::ConstraintData *) 0 ;
  
  arg1 = (nifly::bhkBreakableConstraint *)jarg1; 
  arg2 = (nifly::ConstraintData *)jarg2; 
  if (arg1) (arg1)->subConstraint = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkBreakableConstraint_subConstraint_get(void * jarg1) {
  void * jresult ;
  nifly::bhkBreakableConstraint *arg1 = (nifly::bhkBreakableConstraint *) 0 ;
  nifly::ConstraintData *result = 0 ;
  
  arg1 = (nifly::bhkBreakableConstraint *)jarg1; 
  result = (nifly::ConstraintData *)& ((arg1)->subConstraint);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBreakableConstraint_removeWhenBroken_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkBreakableConstraint *arg1 = (nifly::bhkBreakableConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::bhkBreakableConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->removeWhenBroken = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkBreakableConstraint_removeWhenBroken_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkBreakableConstraint *arg1 = (nifly::bhkBreakableConstraint *) 0 ;
  bool result;
  
  arg1 = (nifly::bhkBreakableConstraint *)jarg1; 
  result = (bool) ((arg1)->removeWhenBroken);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBreakableConstraint_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkBreakableConstraint::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBreakableConstraint_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkBreakableConstraint *arg1 = (nifly::bhkBreakableConstraint *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkBreakableConstraint *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBreakableConstraint_Sync(void * jarg1, void * jarg2) {
  nifly::bhkBreakableConstraint *arg1 = (nifly::bhkBreakableConstraint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkBreakableConstraint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBreakableConstraint_GetPtrs(void * jarg1, void * jarg2) {
  nifly::bhkBreakableConstraint *arg1 = (nifly::bhkBreakableConstraint *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkBreakableConstraint *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkBreakableConstraint() {
  void * jresult ;
  nifly::bhkBreakableConstraint *result = 0 ;
  
  result = (nifly::bhkBreakableConstraint *)new nifly::bhkBreakableConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkBreakableConstraint(void * jarg1) {
  nifly::bhkBreakableConstraint *arg1 = (nifly::bhkBreakableConstraint *) 0 ;
  
  arg1 = (nifly::bhkBreakableConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollConstraint_ragdoll_set(void * jarg1, void * jarg2) {
  nifly::bhkRagdollConstraint *arg1 = (nifly::bhkRagdollConstraint *) 0 ;
  nifly::RagdollDesc *arg2 = (nifly::RagdollDesc *) 0 ;
  
  arg1 = (nifly::bhkRagdollConstraint *)jarg1; 
  arg2 = (nifly::RagdollDesc *)jarg2; 
  if (arg1) (arg1)->ragdoll = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRagdollConstraint_ragdoll_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRagdollConstraint *arg1 = (nifly::bhkRagdollConstraint *) 0 ;
  nifly::RagdollDesc *result = 0 ;
  
  arg1 = (nifly::bhkRagdollConstraint *)jarg1; 
  result = (nifly::RagdollDesc *)& ((arg1)->ragdoll);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRagdollConstraint_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkRagdollConstraint::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRagdollConstraint_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkRagdollConstraint *arg1 = (nifly::bhkRagdollConstraint *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkRagdollConstraint *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollConstraint_Sync(void * jarg1, void * jarg2) {
  nifly::bhkRagdollConstraint *arg1 = (nifly::bhkRagdollConstraint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkRagdollConstraint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkRagdollConstraint() {
  void * jresult ;
  nifly::bhkRagdollConstraint *result = 0 ;
  
  result = (nifly::bhkRagdollConstraint *)new nifly::bhkRagdollConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkRagdollConstraint(void * jarg1) {
  nifly::bhkRagdollConstraint *arg1 = (nifly::bhkRagdollConstraint *) 0 ;
  
  arg1 = (nifly::bhkRagdollConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkStiffSpringConstraint_stiffSpring_set(void * jarg1, void * jarg2) {
  nifly::bhkStiffSpringConstraint *arg1 = (nifly::bhkStiffSpringConstraint *) 0 ;
  nifly::StiffSpringDesc *arg2 = (nifly::StiffSpringDesc *) 0 ;
  
  arg1 = (nifly::bhkStiffSpringConstraint *)jarg1; 
  arg2 = (nifly::StiffSpringDesc *)jarg2; 
  if (arg1) (arg1)->stiffSpring = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkStiffSpringConstraint_stiffSpring_get(void * jarg1) {
  void * jresult ;
  nifly::bhkStiffSpringConstraint *arg1 = (nifly::bhkStiffSpringConstraint *) 0 ;
  nifly::StiffSpringDesc *result = 0 ;
  
  arg1 = (nifly::bhkStiffSpringConstraint *)jarg1; 
  result = (nifly::StiffSpringDesc *)& ((arg1)->stiffSpring);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkStiffSpringConstraint_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkStiffSpringConstraint::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkStiffSpringConstraint_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkStiffSpringConstraint *arg1 = (nifly::bhkStiffSpringConstraint *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkStiffSpringConstraint *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkStiffSpringConstraint_Sync(void * jarg1, void * jarg2) {
  nifly::bhkStiffSpringConstraint *arg1 = (nifly::bhkStiffSpringConstraint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkStiffSpringConstraint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkStiffSpringConstraint() {
  void * jresult ;
  nifly::bhkStiffSpringConstraint *result = 0 ;
  
  result = (nifly::bhkStiffSpringConstraint *)new nifly::bhkStiffSpringConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkStiffSpringConstraint(void * jarg1) {
  nifly::bhkStiffSpringConstraint *arg1 = (nifly::bhkStiffSpringConstraint *) 0 ;
  
  arg1 = (nifly::bhkStiffSpringConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPrismaticConstraint_prismatic_set(void * jarg1, void * jarg2) {
  nifly::bhkPrismaticConstraint *arg1 = (nifly::bhkPrismaticConstraint *) 0 ;
  nifly::PrismaticDesc *arg2 = (nifly::PrismaticDesc *) 0 ;
  
  arg1 = (nifly::bhkPrismaticConstraint *)jarg1; 
  arg2 = (nifly::PrismaticDesc *)jarg2; 
  if (arg1) (arg1)->prismatic = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPrismaticConstraint_prismatic_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPrismaticConstraint *arg1 = (nifly::bhkPrismaticConstraint *) 0 ;
  nifly::PrismaticDesc *result = 0 ;
  
  arg1 = (nifly::bhkPrismaticConstraint *)jarg1; 
  result = (nifly::PrismaticDesc *)& ((arg1)->prismatic);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPrismaticConstraint_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkPrismaticConstraint::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPrismaticConstraint_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkPrismaticConstraint *arg1 = (nifly::bhkPrismaticConstraint *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkPrismaticConstraint *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPrismaticConstraint_Sync(void * jarg1, void * jarg2) {
  nifly::bhkPrismaticConstraint *arg1 = (nifly::bhkPrismaticConstraint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkPrismaticConstraint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkPrismaticConstraint() {
  void * jresult ;
  nifly::bhkPrismaticConstraint *result = 0 ;
  
  result = (nifly::bhkPrismaticConstraint *)new nifly::bhkPrismaticConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkPrismaticConstraint(void * jarg1) {
  nifly::bhkPrismaticConstraint *arg1 = (nifly::bhkPrismaticConstraint *) 0 ;
  
  arg1 = (nifly::bhkPrismaticConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMalleableConstraint_subConstraint_set(void * jarg1, void * jarg2) {
  nifly::bhkMalleableConstraint *arg1 = (nifly::bhkMalleableConstraint *) 0 ;
  nifly::ConstraintData *arg2 = (nifly::ConstraintData *) 0 ;
  
  arg1 = (nifly::bhkMalleableConstraint *)jarg1; 
  arg2 = (nifly::ConstraintData *)jarg2; 
  if (arg1) (arg1)->subConstraint = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkMalleableConstraint_subConstraint_get(void * jarg1) {
  void * jresult ;
  nifly::bhkMalleableConstraint *arg1 = (nifly::bhkMalleableConstraint *) 0 ;
  nifly::ConstraintData *result = 0 ;
  
  arg1 = (nifly::bhkMalleableConstraint *)jarg1; 
  result = (nifly::ConstraintData *)& ((arg1)->subConstraint);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkMalleableConstraint_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkMalleableConstraint::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkMalleableConstraint_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkMalleableConstraint *arg1 = (nifly::bhkMalleableConstraint *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkMalleableConstraint *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkMalleableConstraint_Sync(void * jarg1, void * jarg2) {
  nifly::bhkMalleableConstraint *arg1 = (nifly::bhkMalleableConstraint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkMalleableConstraint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkMalleableConstraint() {
  void * jresult ;
  nifly::bhkMalleableConstraint *result = 0 ;
  
  result = (nifly::bhkMalleableConstraint *)new nifly::bhkMalleableConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkMalleableConstraint(void * jarg1) {
  nifly::bhkMalleableConstraint *arg1 = (nifly::bhkMalleableConstraint *) 0 ;
  
  arg1 = (nifly::bhkMalleableConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallAndSocketConstraint_ballAndSocket_set(void * jarg1, void * jarg2) {
  nifly::bhkBallAndSocketConstraint *arg1 = (nifly::bhkBallAndSocketConstraint *) 0 ;
  nifly::BallAndSocketDesc *arg2 = (nifly::BallAndSocketDesc *) 0 ;
  
  arg1 = (nifly::bhkBallAndSocketConstraint *)jarg1; 
  arg2 = (nifly::BallAndSocketDesc *)jarg2; 
  if (arg1) (arg1)->ballAndSocket = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkBallAndSocketConstraint_ballAndSocket_get(void * jarg1) {
  void * jresult ;
  nifly::bhkBallAndSocketConstraint *arg1 = (nifly::bhkBallAndSocketConstraint *) 0 ;
  nifly::BallAndSocketDesc *result = 0 ;
  
  arg1 = (nifly::bhkBallAndSocketConstraint *)jarg1; 
  result = (nifly::BallAndSocketDesc *)& ((arg1)->ballAndSocket);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBallAndSocketConstraint_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkBallAndSocketConstraint::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBallAndSocketConstraint_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkBallAndSocketConstraint *arg1 = (nifly::bhkBallAndSocketConstraint *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkBallAndSocketConstraint *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallAndSocketConstraint_Sync(void * jarg1, void * jarg2) {
  nifly::bhkBallAndSocketConstraint *arg1 = (nifly::bhkBallAndSocketConstraint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkBallAndSocketConstraint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkBallAndSocketConstraint() {
  void * jresult ;
  nifly::bhkBallAndSocketConstraint *result = 0 ;
  
  result = (nifly::bhkBallAndSocketConstraint *)new nifly::bhkBallAndSocketConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkBallAndSocketConstraint(void * jarg1) {
  nifly::bhkBallAndSocketConstraint *arg1 = (nifly::bhkBallAndSocketConstraint *) 0 ;
  
  arg1 = (nifly::bhkBallAndSocketConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_pivots_set(void * jarg1, void * jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  nifly::NiVector< Vector4 > *arg2 = (nifly::NiVector< Vector4 > *) 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (nifly::NiVector< Vector4 > *)jarg2; 
  if (arg1) (arg1)->pivots = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_pivots_get(void * jarg1) {
  void * jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  nifly::NiVector< Vector4 > *result = 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (nifly::NiVector< Vector4 > *)& ((arg1)->pivots);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_tau_set(void * jarg1, float jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tau = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_tau_get(void * jarg1) {
  float jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  float result;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (float) ((arg1)->tau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_damping_set(void * jarg1, float jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_damping_get(void * jarg1) {
  float jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  float result;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (float) ((arg1)->damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_cfm_set(void * jarg1, float jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->cfm = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_cfm_get(void * jarg1) {
  float jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  float result;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (float) ((arg1)->cfm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_maxErrorDistance_set(void * jarg1, float jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxErrorDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_maxErrorDistance_get(void * jarg1) {
  float jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  float result;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (float) ((arg1)->maxErrorDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_chainedEntityRefs_set(void * jarg1, void * jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  nifly::NiBlockPtrArray< nifly::bhkRigidBody > *arg2 = (nifly::NiBlockPtrArray< nifly::bhkRigidBody > *) 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (nifly::NiBlockPtrArray< nifly::bhkRigidBody > *)jarg2; 
  if (arg1) (arg1)->chainedEntityRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_chainedEntityRefs_get(void * jarg1) {
  void * jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  nifly::NiBlockPtrArray< nifly::bhkRigidBody > *result = 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (nifly::NiBlockPtrArray< nifly::bhkRigidBody > *)& ((arg1)->chainedEntityRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_numEntities_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numEntities = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_numEntities_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (uint32_t) ((arg1)->numEntities);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_entityARef_set(void * jarg1, void * jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  nifly::NiBlockPtr< nifly::bhkEntity > *arg2 = (nifly::NiBlockPtr< nifly::bhkEntity > *) 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::bhkEntity > *)jarg2; 
  if (arg1) (arg1)->entityARef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_entityARef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  nifly::NiBlockPtr< nifly::bhkEntity > *result = 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::bhkEntity > *)& ((arg1)->entityARef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_entityBRef_set(void * jarg1, void * jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  nifly::NiBlockPtr< nifly::bhkEntity > *arg2 = (nifly::NiBlockPtr< nifly::bhkEntity > *) 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::bhkEntity > *)jarg2; 
  if (arg1) (arg1)->entityBRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_entityBRef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  nifly::NiBlockPtr< nifly::bhkEntity > *result = 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::bhkEntity > *)& ((arg1)->entityBRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_priority_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_priority_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (uint32_t) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkBallSocketConstraintChain::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_Sync(void * jarg1, void * jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkBallSocketConstraintChain_GetPtrs(void * jarg1, void * jarg2) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkBallSocketConstraintChain() {
  void * jresult ;
  nifly::bhkBallSocketConstraintChain *result = 0 ;
  
  result = (nifly::bhkBallSocketConstraintChain *)new nifly::bhkBallSocketConstraintChain();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkBallSocketConstraintChain(void * jarg1) {
  nifly::bhkBallSocketConstraintChain *arg1 = (nifly::bhkBallSocketConstraintChain *) 0 ;
  
  arg1 = (nifly::bhkBallSocketConstraintChain *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_bitsPerIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bitsPerIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_bitsPerIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (uint32_t) ((arg1)->bitsPerIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_bitsPerWIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bitsPerWIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_bitsPerWIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (uint32_t) ((arg1)->bitsPerWIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_maskWIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->maskWIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_maskWIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (uint32_t) ((arg1)->maskWIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_maskIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->maskIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_maskIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (uint32_t) ((arg1)->maskIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_error_set(void * jarg1, float jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->error = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_error_get(void * jarg1) {
  float jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  float result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (float) ((arg1)->error);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_aabbBoundMin_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->aabbBoundMin = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_aabbBoundMin_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result =  ((arg1)->aabbBoundMin);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_aabbBoundMax_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->aabbBoundMax = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_aabbBoundMax_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result =  ((arg1)->aabbBoundMax);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_weldingType_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->weldingType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_weldingType_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (uint8_t) ((arg1)->weldingType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_materialType_set(void * jarg1, unsigned char jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->materialType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_materialType_get(void * jarg1) {
  unsigned char jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (uint8_t) ((arg1)->materialType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_mat32_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< uint32_t > *arg2 = (nifly::NiVector< uint32_t > *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (nifly::NiVector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->mat32 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_mat32_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (nifly::NiVector< uint32_t > *)& ((arg1)->mat32);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_mat16_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< uint32_t > *arg2 = (nifly::NiVector< uint32_t > *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (nifly::NiVector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->mat16 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_mat16_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (nifly::NiVector< uint32_t > *)& ((arg1)->mat16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_mat8_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< uint32_t > *arg2 = (nifly::NiVector< uint32_t > *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (nifly::NiVector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->mat8 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_mat8_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (nifly::NiVector< uint32_t > *)& ((arg1)->mat8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_materials_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< nifly::bhkCMSDMaterial > *arg2 = (nifly::NiVector< nifly::bhkCMSDMaterial > *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (nifly::NiVector< nifly::bhkCMSDMaterial > *)jarg2; 
  if (arg1) (arg1)->materials = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_materials_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< nifly::bhkCMSDMaterial > *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (nifly::NiVector< nifly::bhkCMSDMaterial > *)& ((arg1)->materials);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_numNamedMat_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numNamedMat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_numNamedMat_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (uint32_t) ((arg1)->numNamedMat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_transforms_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< nifly::bhkCMSDTransform > *arg2 = (nifly::NiVector< nifly::bhkCMSDTransform > *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (nifly::NiVector< nifly::bhkCMSDTransform > *)jarg2; 
  if (arg1) (arg1)->transforms = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_transforms_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< nifly::bhkCMSDTransform > *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (nifly::NiVector< nifly::bhkCMSDTransform > *)& ((arg1)->transforms);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_bigVerts_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< Vector4 > *arg2 = (nifly::NiVector< Vector4 > *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (nifly::NiVector< Vector4 > *)jarg2; 
  if (arg1) (arg1)->bigVerts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_bigVerts_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiVector< Vector4 > *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (nifly::NiVector< Vector4 > *)& ((arg1)->bigVerts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_numConvexPieceA_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numConvexPieceA = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_numConvexPieceA_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (uint32_t) ((arg1)->numConvexPieceA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkCompressedMeshShapeData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_Sync(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_GetBigTris(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  SwigValueWrapper< std::vector< nifly::bhkCMSDBigTris > > result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = ((nifly::bhkCompressedMeshShapeData const *)arg1)->GetBigTris();
  jresult = new std::vector< nifly::bhkCMSDBigTris >((const std::vector< nifly::bhkCMSDBigTris > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_SetBigTris(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  std::vector< nifly::bhkCMSDBigTris > *arg2 = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (std::vector< nifly::bhkCMSDBigTris > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::bhkCMSDBigTris > const & type is null", 0);
    return ;
  } 
  (arg1)->SetBigTris((std::vector< nifly::bhkCMSDBigTris > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_GetChunks(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  SwigValueWrapper< std::vector< nifly::bhkCMSDChunk > > result;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  result = ((nifly::bhkCompressedMeshShapeData const *)arg1)->GetChunks();
  jresult = new std::vector< nifly::bhkCMSDChunk >((const std::vector< nifly::bhkCMSDChunk > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShapeData_SetChunks(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  std::vector< nifly::bhkCMSDChunk > *arg2 = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  arg2 = (std::vector< nifly::bhkCMSDChunk > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::bhkCMSDChunk > const & type is null", 0);
    return ;
  } 
  (arg1)->SetChunks((std::vector< nifly::bhkCMSDChunk > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkCompressedMeshShapeData() {
  void * jresult ;
  nifly::bhkCompressedMeshShapeData *result = 0 ;
  
  result = (nifly::bhkCompressedMeshShapeData *)new nifly::bhkCompressedMeshShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkCompressedMeshShapeData(void * jarg1) {
  nifly::bhkCompressedMeshShapeData *arg1 = (nifly::bhkCompressedMeshShapeData *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_targetRef_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->targetRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_targetRef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiAVObject > *)& ((arg1)->targetRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_userData_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_userData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  result = (uint32_t) ((arg1)->userData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_radius_set(void * jarg1, float jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_radius_get(void * jarg1) {
  float jresult ;
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_unkFloat_set(void * jarg1, float jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->unkFloat = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_unkFloat_get(void * jarg1) {
  float jresult ;
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  result = (float) ((arg1)->unkFloat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_scaling_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->scaling = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_scaling_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  result =  ((arg1)->scaling);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_radius2_set(void * jarg1, float jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_radius2_get(void * jarg1) {
  float jresult ;
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  float result;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  result = (float) ((arg1)->radius2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_scaling2_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->scaling2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_scaling2_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  result =  ((arg1)->scaling2);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_dataRef_set(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  nifly::NiBlockRef< nifly::bhkCompressedMeshShapeData > *arg2 = (nifly::NiBlockRef< nifly::bhkCompressedMeshShapeData > *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::bhkCompressedMeshShapeData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  nifly::NiBlockRef< nifly::bhkCompressedMeshShapeData > *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  result = (nifly::NiBlockRef< nifly::bhkCompressedMeshShapeData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkCompressedMeshShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_Sync(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkCompressedMeshShape_GetPtrs(void * jarg1, void * jarg2) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkCompressedMeshShape() {
  void * jresult ;
  nifly::bhkCompressedMeshShape *result = 0 ;
  
  result = (nifly::bhkCompressedMeshShape *)new nifly::bhkCompressedMeshShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkCompressedMeshShape(void * jarg1) {
  nifly::bhkCompressedMeshShape *arg1 = (nifly::bhkCompressedMeshShape *) 0 ;
  
  arg1 = (nifly::bhkCompressedMeshShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoneMatrix_translation_set(void * jarg1, void * jarg2) {
  nifly::BoneMatrix *arg1 = (nifly::BoneMatrix *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BoneMatrix *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoneMatrix_translation_get(void * jarg1) {
  void * jresult ;
  nifly::BoneMatrix *arg1 = (nifly::BoneMatrix *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BoneMatrix *)jarg1; 
  result =  ((arg1)->translation);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoneMatrix_rotation_set(void * jarg1, void * jarg2) {
  nifly::BoneMatrix *arg1 = (nifly::BoneMatrix *) 0 ;
  QuaternionXYZW arg2 ;
  QuaternionXYZW *argp2 ;
  
  arg1 = (nifly::BoneMatrix *)jarg1; 
  argp2 = (QuaternionXYZW *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null QuaternionXYZW", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoneMatrix_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::BoneMatrix *arg1 = (nifly::BoneMatrix *) 0 ;
  QuaternionXYZW result;
  
  arg1 = (nifly::BoneMatrix *)jarg1; 
  result =  ((arg1)->rotation);
  jresult = new QuaternionXYZW((const QuaternionXYZW &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoneMatrix_scale_set(void * jarg1, void * jarg2) {
  nifly::BoneMatrix *arg1 = (nifly::BoneMatrix *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BoneMatrix *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoneMatrix_scale_get(void * jarg1) {
  void * jresult ;
  nifly::BoneMatrix *arg1 = (nifly::BoneMatrix *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BoneMatrix *)jarg1; 
  result =  ((arg1)->scale);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoneMatrix() {
  void * jresult ;
  nifly::BoneMatrix *result = 0 ;
  
  result = (nifly::BoneMatrix *)new nifly::BoneMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BoneMatrix(void * jarg1) {
  nifly::BoneMatrix *arg1 = (nifly::BoneMatrix *) 0 ;
  
  arg1 = (nifly::BoneMatrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BonePose_matrices_set(void * jarg1, void * jarg2) {
  nifly::BonePose *arg1 = (nifly::BonePose *) 0 ;
  nifly::NiVector< nifly::BoneMatrix > *arg2 = (nifly::NiVector< nifly::BoneMatrix > *) 0 ;
  
  arg1 = (nifly::BonePose *)jarg1; 
  arg2 = (nifly::NiVector< nifly::BoneMatrix > *)jarg2; 
  if (arg1) (arg1)->matrices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BonePose_matrices_get(void * jarg1) {
  void * jresult ;
  nifly::BonePose *arg1 = (nifly::BonePose *) 0 ;
  nifly::NiVector< nifly::BoneMatrix > *result = 0 ;
  
  arg1 = (nifly::BonePose *)jarg1; 
  result = (nifly::NiVector< nifly::BoneMatrix > *)& ((arg1)->matrices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BonePose_Sync(void * jarg1, void * jarg2) {
  nifly::BonePose *arg1 = (nifly::BonePose *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BonePose *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BonePose() {
  void * jresult ;
  nifly::BonePose *result = 0 ;
  
  result = (nifly::BonePose *)new nifly::BonePose();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BonePose(void * jarg1) {
  nifly::BonePose *arg1 = (nifly::BonePose *) 0 ;
  
  arg1 = (nifly::BonePose *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPoseArray_bones_set(void * jarg1, void * jarg2) {
  nifly::bhkPoseArray *arg1 = (nifly::bhkPoseArray *) 0 ;
  nifly::NiStringRefVector< > *arg2 = (nifly::NiStringRefVector< > *) 0 ;
  
  arg1 = (nifly::bhkPoseArray *)jarg1; 
  arg2 = (nifly::NiStringRefVector< > *)jarg2; 
  if (arg1) (arg1)->bones = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPoseArray_bones_get(void * jarg1) {
  void * jresult ;
  nifly::bhkPoseArray *arg1 = (nifly::bhkPoseArray *) 0 ;
  nifly::NiStringRefVector< > *result = 0 ;
  
  arg1 = (nifly::bhkPoseArray *)jarg1; 
  result = (nifly::NiStringRefVector< > *)& ((arg1)->bones);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPoseArray_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkPoseArray::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkPoseArray_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkPoseArray *arg1 = (nifly::bhkPoseArray *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkPoseArray *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPoseArray_Sync(void * jarg1, void * jarg2) {
  nifly::bhkPoseArray *arg1 = (nifly::bhkPoseArray *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkPoseArray *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPoseArray_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::bhkPoseArray *arg1 = (nifly::bhkPoseArray *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkPoseArray *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkPoseArray_GetPoses(void * jarg1) {
  void * jresult ;
  nifly::bhkPoseArray *arg1 = (nifly::bhkPoseArray *) 0 ;
  SwigValueWrapper< std::vector< nifly::BonePose > > result;
  
  arg1 = (nifly::bhkPoseArray *)jarg1; 
  result = ((nifly::bhkPoseArray const *)arg1)->GetPoses();
  jresult = new std::vector< nifly::BonePose >((const std::vector< nifly::BonePose > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkPoseArray_SetPoses(void * jarg1, void * jarg2) {
  nifly::bhkPoseArray *arg1 = (nifly::bhkPoseArray *) 0 ;
  std::vector< nifly::BonePose > *arg2 = 0 ;
  
  arg1 = (nifly::bhkPoseArray *)jarg1; 
  arg2 = (std::vector< nifly::BonePose > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BonePose > const & type is null", 0);
    return ;
  } 
  (arg1)->SetPoses((std::vector< nifly::BonePose > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkPoseArray() {
  void * jresult ;
  nifly::bhkPoseArray *result = 0 ;
  
  result = (nifly::bhkPoseArray *)new nifly::bhkPoseArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkPoseArray(void * jarg1) {
  nifly::bhkPoseArray *arg1 = (nifly::bhkPoseArray *) 0 ;
  
  arg1 = (nifly::bhkPoseArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplate_boneRefs_set(void * jarg1, void * jarg2) {
  nifly::bhkRagdollTemplate *arg1 = (nifly::bhkRagdollTemplate *) 0 ;
  nifly::NiBlockRefArray< nifly::NiObject > *arg2 = (nifly::NiBlockRefArray< nifly::NiObject > *) 0 ;
  
  arg1 = (nifly::bhkRagdollTemplate *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiObject > *)jarg2; 
  if (arg1) (arg1)->boneRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRagdollTemplate_boneRefs_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRagdollTemplate *arg1 = (nifly::bhkRagdollTemplate *) 0 ;
  nifly::NiBlockRefArray< nifly::NiObject > *result = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplate *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiObject > *)& ((arg1)->boneRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRagdollTemplate_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkRagdollTemplate::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRagdollTemplate_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkRagdollTemplate *arg1 = (nifly::bhkRagdollTemplate *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplate *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplate_Sync(void * jarg1, void * jarg2) {
  nifly::bhkRagdollTemplate *arg1 = (nifly::bhkRagdollTemplate *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplate *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplate_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::bhkRagdollTemplate *arg1 = (nifly::bhkRagdollTemplate *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplate *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplate_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::bhkRagdollTemplate *arg1 = (nifly::bhkRagdollTemplate *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplate *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkRagdollTemplate() {
  void * jresult ;
  nifly::bhkRagdollTemplate *result = 0 ;
  
  result = (nifly::bhkRagdollTemplate *)new nifly::bhkRagdollTemplate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkRagdollTemplate(void * jarg1) {
  nifly::bhkRagdollTemplate *arg1 = (nifly::bhkRagdollTemplate *) 0 ;
  
  arg1 = (nifly::bhkRagdollTemplate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_name_set(void * jarg1, void * jarg2) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_name_get(void * jarg1) {
  void * jresult ;
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_mass_set(void * jarg1, float jarg2) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->mass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_mass_get(void * jarg1) {
  float jresult ;
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  result = (float) ((arg1)->mass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_restitution_set(void * jarg1, float jarg2) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_restitution_get(void * jarg1) {
  float jresult ;
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  result = (float) ((arg1)->restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_friction_set(void * jarg1, float jarg2) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_friction_get(void * jarg1) {
  float jresult ;
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  result = (float) ((arg1)->friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_radius_set(void * jarg1, float jarg2) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_radius_get(void * jarg1) {
  float jresult ;
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  float result;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_material_set(void * jarg1, unsigned int jarg2) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  nifly::HavokMaterial arg2 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  arg2 = (nifly::HavokMaterial)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_material_get(void * jarg1) {
  unsigned int jresult ;
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  nifly::HavokMaterial result;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  result = (nifly::HavokMaterial) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::bhkRagdollTemplateData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_Sync(void * jarg1, void * jarg2) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_GetConstraints(void * jarg1) {
  void * jresult ;
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  SwigValueWrapper< std::vector< nifly::ConstraintData > > result;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  result = ((nifly::bhkRagdollTemplateData const *)arg1)->GetConstraints();
  jresult = new std::vector< nifly::ConstraintData >((const std::vector< nifly::ConstraintData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_bhkRagdollTemplateData_SetConstraints(void * jarg1, void * jarg2) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  std::vector< nifly::ConstraintData > *arg2 = 0 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  arg2 = (std::vector< nifly::ConstraintData > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::ConstraintData > const & type is null", 0);
    return ;
  } 
  (arg1)->SetConstraints((std::vector< nifly::ConstraintData > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_bhkRagdollTemplateData() {
  void * jresult ;
  nifly::bhkRagdollTemplateData *result = 0 ;
  
  result = (nifly::bhkRagdollTemplateData *)new nifly::bhkRagdollTemplateData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_bhkRagdollTemplateData(void * jarg1) {
  nifly::bhkRagdollTemplateData *arg1 = (nifly::bhkRagdollTemplateData *) 0 ;
  
  arg1 = (nifly::bhkRagdollTemplateData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiExtraDataNiObject(void * jarg1) {
  nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *) 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiExtraDataNiObject_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *) 0 ;
  nifly::NiExtraData *result = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *)jarg1; 
  result = (nifly::NiExtraData *)((nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiExtraDataNiObject_Get(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiExtraDataNiObject_Put(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *arg1 = (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Put(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiExtraDataNiObject() {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *result = 0 ;
  
  result = (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *)new nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiExtraData_name_set(void * jarg1, void * jarg2) {
  nifly::NiExtraData *arg1 = (nifly::NiExtraData *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiExtraData *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiExtraData_name_get(void * jarg1) {
  void * jresult ;
  nifly::NiExtraData *arg1 = (nifly::NiExtraData *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiExtraData *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiExtraData *arg1 = (nifly::NiExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiExtraData_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiExtraData *arg1 = (nifly::NiExtraData *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiExtraData *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiExtraData() {
  void * jresult ;
  nifly::NiExtraData *result = 0 ;
  
  result = (nifly::NiExtraData *)new nifly::NiExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiExtraData(void * jarg1) {
  nifly::NiExtraData *arg1 = (nifly::NiExtraData *) 0 ;
  
  arg1 = (nifly::NiExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBinaryExtraData_data_set(void * jarg1, void * jarg2) {
  nifly::NiBinaryExtraData *arg1 = (nifly::NiBinaryExtraData *) 0 ;
  nifly::NiVector< uint8_t > *arg2 = (nifly::NiVector< uint8_t > *) 0 ;
  
  arg1 = (nifly::NiBinaryExtraData *)jarg1; 
  arg2 = (nifly::NiVector< uint8_t > *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBinaryExtraData_data_get(void * jarg1) {
  void * jresult ;
  nifly::NiBinaryExtraData *arg1 = (nifly::NiBinaryExtraData *) 0 ;
  nifly::NiVector< uint8_t > *result = 0 ;
  
  arg1 = (nifly::NiBinaryExtraData *)jarg1; 
  result = (nifly::NiVector< uint8_t > *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBinaryExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBinaryExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBinaryExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBinaryExtraData *arg1 = (nifly::NiBinaryExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBinaryExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBinaryExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiBinaryExtraData *arg1 = (nifly::NiBinaryExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBinaryExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBinaryExtraData() {
  void * jresult ;
  nifly::NiBinaryExtraData *result = 0 ;
  
  result = (nifly::NiBinaryExtraData *)new nifly::NiBinaryExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBinaryExtraData(void * jarg1) {
  nifly::NiBinaryExtraData *arg1 = (nifly::NiBinaryExtraData *) 0 ;
  
  arg1 = (nifly::NiBinaryExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatExtraData_floatData_set(void * jarg1, float jarg2) {
  nifly::NiFloatExtraData *arg1 = (nifly::NiFloatExtraData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiFloatExtraData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->floatData = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiFloatExtraData_floatData_get(void * jarg1) {
  float jresult ;
  nifly::NiFloatExtraData *arg1 = (nifly::NiFloatExtraData *) 0 ;
  float result;
  
  arg1 = (nifly::NiFloatExtraData *)jarg1; 
  result = (float) ((arg1)->floatData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiFloatExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiFloatExtraData *arg1 = (nifly::NiFloatExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiFloatExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiFloatExtraData *arg1 = (nifly::NiFloatExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiFloatExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiFloatExtraData() {
  void * jresult ;
  nifly::NiFloatExtraData *result = 0 ;
  
  result = (nifly::NiFloatExtraData *)new nifly::NiFloatExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFloatExtraData(void * jarg1) {
  nifly::NiFloatExtraData *arg1 = (nifly::NiFloatExtraData *) 0 ;
  
  arg1 = (nifly::NiFloatExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatsExtraData_floatsData_set(void * jarg1, void * jarg2) {
  nifly::NiFloatsExtraData *arg1 = (nifly::NiFloatsExtraData *) 0 ;
  nifly::NiVector< float > *arg2 = (nifly::NiVector< float > *) 0 ;
  
  arg1 = (nifly::NiFloatsExtraData *)jarg1; 
  arg2 = (nifly::NiVector< float > *)jarg2; 
  if (arg1) (arg1)->floatsData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFloatsExtraData_floatsData_get(void * jarg1) {
  void * jresult ;
  nifly::NiFloatsExtraData *arg1 = (nifly::NiFloatsExtraData *) 0 ;
  nifly::NiVector< float > *result = 0 ;
  
  arg1 = (nifly::NiFloatsExtraData *)jarg1; 
  result = (nifly::NiVector< float > *)& ((arg1)->floatsData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatsExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiFloatsExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFloatsExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiFloatsExtraData *arg1 = (nifly::NiFloatsExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiFloatsExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFloatsExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiFloatsExtraData *arg1 = (nifly::NiFloatsExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiFloatsExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiFloatsExtraData() {
  void * jresult ;
  nifly::NiFloatsExtraData *result = 0 ;
  
  result = (nifly::NiFloatsExtraData *)new nifly::NiFloatsExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFloatsExtraData(void * jarg1) {
  nifly::NiFloatsExtraData *arg1 = (nifly::NiFloatsExtraData *) 0 ;
  
  arg1 = (nifly::NiFloatsExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiStringExtraDataNiExtraData(void * jarg1) {
  nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *arg1 = (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *) 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStringExtraDataNiExtraData_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *arg1 = (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *) 0 ;
  nifly::NiStringExtraData *result = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *)jarg1; 
  result = (nifly::NiStringExtraData *)((nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringExtraDataNiExtraData_Get(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *arg1 = (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringExtraDataNiExtraData_Put(void * jarg1, void * jarg2) {
  nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *arg1 = (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Put(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStringExtraDataNiExtraData() {
  void * jresult ;
  nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *result = 0 ;
  
  result = (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *)new nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringExtraData_stringData_set(void * jarg1, void * jarg2) {
  nifly::NiStringExtraData *arg1 = (nifly::NiStringExtraData *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiStringExtraData *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->stringData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStringExtraData_stringData_get(void * jarg1) {
  void * jresult ;
  nifly::NiStringExtraData *arg1 = (nifly::NiStringExtraData *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiStringExtraData *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->stringData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiStringExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiStringExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiStringExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiStringExtraData *arg1 = (nifly::NiStringExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiStringExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiStringExtraData *arg1 = (nifly::NiStringExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiStringExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringExtraData_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiStringExtraData *arg1 = (nifly::NiStringExtraData *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiStringExtraData *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStringExtraData_GetStringRefList(void * jarg1) {
  void * jresult ;
  nifly::NiStringExtraData *arg1 = (nifly::NiStringExtraData *) 0 ;
  std::vector< nifly::NiStringRef * > result;
  
  arg1 = (nifly::NiStringExtraData *)jarg1; 
  result = (arg1)->GetStringRefList();
  jresult = new std::vector< nifly::NiStringRef * >((const std::vector< nifly::NiStringRef * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStringExtraData() {
  void * jresult ;
  nifly::NiStringExtraData *result = 0 ;
  
  result = (nifly::NiStringExtraData *)new nifly::NiStringExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiStringExtraData(void * jarg1) {
  nifly::NiStringExtraData *arg1 = (nifly::NiStringExtraData *) 0 ;
  
  arg1 = (nifly::NiStringExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringsExtraData_stringsData_set(void * jarg1, void * jarg2) {
  nifly::NiStringsExtraData *arg1 = (nifly::NiStringsExtraData *) 0 ;
  nifly::NiStringVector< > *arg2 = (nifly::NiStringVector< > *) 0 ;
  
  arg1 = (nifly::NiStringsExtraData *)jarg1; 
  arg2 = (nifly::NiStringVector< > *)jarg2; 
  if (arg1) (arg1)->stringsData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiStringsExtraData_stringsData_get(void * jarg1) {
  void * jresult ;
  nifly::NiStringsExtraData *arg1 = (nifly::NiStringsExtraData *) 0 ;
  nifly::NiStringVector< > *result = 0 ;
  
  arg1 = (nifly::NiStringsExtraData *)jarg1; 
  result = (nifly::NiStringVector< > *)& ((arg1)->stringsData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiStringsExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiStringsExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiStringsExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiStringsExtraData *arg1 = (nifly::NiStringsExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiStringsExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStringsExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiStringsExtraData *arg1 = (nifly::NiStringsExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiStringsExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStringsExtraData() {
  void * jresult ;
  nifly::NiStringsExtraData *result = 0 ;
  
  result = (nifly::NiStringsExtraData *)new nifly::NiStringsExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiStringsExtraData(void * jarg1) {
  nifly::NiStringsExtraData *arg1 = (nifly::NiStringsExtraData *) 0 ;
  
  arg1 = (nifly::NiStringsExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBooleanExtraData_booleanData_set(void * jarg1, unsigned int jarg2) {
  nifly::NiBooleanExtraData *arg1 = (nifly::NiBooleanExtraData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiBooleanExtraData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->booleanData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiBooleanExtraData_booleanData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiBooleanExtraData *arg1 = (nifly::NiBooleanExtraData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiBooleanExtraData *)jarg1; 
  result = (bool) ((arg1)->booleanData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBooleanExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiBooleanExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiBooleanExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiBooleanExtraData *arg1 = (nifly::NiBooleanExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiBooleanExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBooleanExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiBooleanExtraData *arg1 = (nifly::NiBooleanExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBooleanExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBooleanExtraData() {
  void * jresult ;
  nifly::NiBooleanExtraData *result = 0 ;
  
  result = (nifly::NiBooleanExtraData *)new nifly::NiBooleanExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBooleanExtraData(void * jarg1) {
  nifly::NiBooleanExtraData *arg1 = (nifly::NiBooleanExtraData *) 0 ;
  
  arg1 = (nifly::NiBooleanExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiIntegerExtraData_integerData_set(void * jarg1, unsigned int jarg2) {
  nifly::NiIntegerExtraData *arg1 = (nifly::NiIntegerExtraData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiIntegerExtraData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->integerData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiIntegerExtraData_integerData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiIntegerExtraData *arg1 = (nifly::NiIntegerExtraData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiIntegerExtraData *)jarg1; 
  result = (uint32_t) ((arg1)->integerData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiIntegerExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiIntegerExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiIntegerExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiIntegerExtraData *arg1 = (nifly::NiIntegerExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiIntegerExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiIntegerExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiIntegerExtraData *arg1 = (nifly::NiIntegerExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiIntegerExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiIntegerExtraData() {
  void * jresult ;
  nifly::NiIntegerExtraData *result = 0 ;
  
  result = (nifly::NiIntegerExtraData *)new nifly::NiIntegerExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiIntegerExtraData(void * jarg1) {
  nifly::NiIntegerExtraData *arg1 = (nifly::NiIntegerExtraData *) 0 ;
  
  arg1 = (nifly::NiIntegerExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiIntegersExtraData_integersData_set(void * jarg1, void * jarg2) {
  nifly::NiIntegersExtraData *arg1 = (nifly::NiIntegersExtraData *) 0 ;
  nifly::NiVector< uint32_t > *arg2 = (nifly::NiVector< uint32_t > *) 0 ;
  
  arg1 = (nifly::NiIntegersExtraData *)jarg1; 
  arg2 = (nifly::NiVector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->integersData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiIntegersExtraData_integersData_get(void * jarg1) {
  void * jresult ;
  nifly::NiIntegersExtraData *arg1 = (nifly::NiIntegersExtraData *) 0 ;
  nifly::NiVector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::NiIntegersExtraData *)jarg1; 
  result = (nifly::NiVector< uint32_t > *)& ((arg1)->integersData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiIntegersExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiIntegersExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiIntegersExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiIntegersExtraData *arg1 = (nifly::NiIntegersExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiIntegersExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiIntegersExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiIntegersExtraData *arg1 = (nifly::NiIntegersExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiIntegersExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiIntegersExtraData() {
  void * jresult ;
  nifly::NiIntegersExtraData *result = 0 ;
  
  result = (nifly::NiIntegersExtraData *)new nifly::NiIntegersExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiIntegersExtraData(void * jarg1) {
  nifly::NiIntegersExtraData *arg1 = (nifly::NiIntegersExtraData *) 0 ;
  
  arg1 = (nifly::NiIntegersExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVectorExtraData_vectorData_set(void * jarg1, void * jarg2) {
  nifly::NiVectorExtraData *arg1 = (nifly::NiVectorExtraData *) 0 ;
  Vector4 arg2 ;
  Vector4 *argp2 ;
  
  arg1 = (nifly::NiVectorExtraData *)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vectorData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiVectorExtraData_vectorData_get(void * jarg1) {
  void * jresult ;
  nifly::NiVectorExtraData *arg1 = (nifly::NiVectorExtraData *) 0 ;
  Vector4 result;
  
  arg1 = (nifly::NiVectorExtraData *)jarg1; 
  result =  ((arg1)->vectorData);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVectorExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiVectorExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVectorExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiVectorExtraData *arg1 = (nifly::NiVectorExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiVectorExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVectorExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiVectorExtraData *arg1 = (nifly::NiVectorExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiVectorExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiVectorExtraData() {
  void * jresult ;
  nifly::NiVectorExtraData *result = 0 ;
  
  result = (nifly::NiVectorExtraData *)new nifly::NiVectorExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiVectorExtraData(void * jarg1) {
  nifly::NiVectorExtraData *arg1 = (nifly::NiVectorExtraData *) 0 ;
  
  arg1 = (nifly::NiVectorExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiColorExtraData_colorData_set(void * jarg1, void * jarg2) {
  nifly::NiColorExtraData *arg1 = (nifly::NiColorExtraData *) 0 ;
  Color4 arg2 ;
  Color4 *argp2 ;
  
  arg1 = (nifly::NiColorExtraData *)jarg1; 
  argp2 = (Color4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Color4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->colorData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiColorExtraData_colorData_get(void * jarg1) {
  void * jresult ;
  nifly::NiColorExtraData *arg1 = (nifly::NiColorExtraData *) 0 ;
  Color4 result;
  
  arg1 = (nifly::NiColorExtraData *)jarg1; 
  result =  ((arg1)->colorData);
  jresult = new Color4((const Color4 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiColorExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiColorExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiColorExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiColorExtraData *arg1 = (nifly::NiColorExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiColorExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiColorExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiColorExtraData *arg1 = (nifly::NiColorExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiColorExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiColorExtraData() {
  void * jresult ;
  nifly::NiColorExtraData *result = 0 ;
  
  result = (nifly::NiColorExtraData *)new nifly::NiColorExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiColorExtraData(void * jarg1) {
  nifly::NiColorExtraData *arg1 = (nifly::NiColorExtraData *) 0 ;
  
  arg1 = (nifly::NiColorExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSXFlags_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSXFlags::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSXFlags_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSXFlags *arg1 = (nifly::BSXFlags *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSXFlags *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSXFlags() {
  void * jresult ;
  nifly::BSXFlags *result = 0 ;
  
  result = (nifly::BSXFlags *)new nifly::BSXFlags();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSXFlags(void * jarg1) {
  nifly::BSXFlags *arg1 = (nifly::BSXFlags *) 0 ;
  
  arg1 = (nifly::BSXFlags *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSWArray_data_set(void * jarg1, void * jarg2) {
  nifly::BSWArray *arg1 = (nifly::BSWArray *) 0 ;
  nifly::NiVector< uint32_t > *arg2 = (nifly::NiVector< uint32_t > *) 0 ;
  
  arg1 = (nifly::BSWArray *)jarg1; 
  arg2 = (nifly::NiVector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSWArray_data_get(void * jarg1) {
  void * jresult ;
  nifly::BSWArray *arg1 = (nifly::BSWArray *) 0 ;
  nifly::NiVector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::BSWArray *)jarg1; 
  result = (nifly::NiVector< uint32_t > *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSWArray_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSWArray::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSWArray_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSWArray *arg1 = (nifly::BSWArray *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSWArray *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSWArray_Sync(void * jarg1, void * jarg2) {
  nifly::BSWArray *arg1 = (nifly::BSWArray *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSWArray *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSWArray() {
  void * jresult ;
  nifly::BSWArray *result = 0 ;
  
  result = (nifly::BSWArray *)new nifly::BSWArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSWArray(void * jarg1) {
  nifly::BSWArray *arg1 = (nifly::BSWArray *) 0 ;
  
  arg1 = (nifly::BSWArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPositionData_data_set(void * jarg1, void * jarg2) {
  nifly::BSPositionData *arg1 = (nifly::BSPositionData *) 0 ;
  nifly::NiVector< half_float::half > *arg2 = (nifly::NiVector< half_float::half > *) 0 ;
  
  arg1 = (nifly::BSPositionData *)jarg1; 
  arg2 = (nifly::NiVector< half_float::half > *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPositionData_data_get(void * jarg1) {
  void * jresult ;
  nifly::BSPositionData *arg1 = (nifly::BSPositionData *) 0 ;
  nifly::NiVector< half_float::half > *result = 0 ;
  
  arg1 = (nifly::BSPositionData *)jarg1; 
  result = (nifly::NiVector< half_float::half > *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPositionData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPositionData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPositionData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPositionData *arg1 = (nifly::BSPositionData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPositionData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPositionData_Sync(void * jarg1, void * jarg2) {
  nifly::BSPositionData *arg1 = (nifly::BSPositionData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPositionData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPositionData() {
  void * jresult ;
  nifly::BSPositionData *result = 0 ;
  
  result = (nifly::BSPositionData *)new nifly::BSPositionData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPositionData(void * jarg1) {
  nifly::BSPositionData *arg1 = (nifly::BSPositionData *) 0 ;
  
  arg1 = (nifly::BSPositionData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEyeCenterExtraData_data_set(void * jarg1, void * jarg2) {
  nifly::BSEyeCenterExtraData *arg1 = (nifly::BSEyeCenterExtraData *) 0 ;
  nifly::NiVector< float > *arg2 = (nifly::NiVector< float > *) 0 ;
  
  arg1 = (nifly::BSEyeCenterExtraData *)jarg1; 
  arg2 = (nifly::NiVector< float > *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEyeCenterExtraData_data_get(void * jarg1) {
  void * jresult ;
  nifly::BSEyeCenterExtraData *arg1 = (nifly::BSEyeCenterExtraData *) 0 ;
  nifly::NiVector< float > *result = 0 ;
  
  arg1 = (nifly::BSEyeCenterExtraData *)jarg1; 
  result = (nifly::NiVector< float > *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSEyeCenterExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSEyeCenterExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSEyeCenterExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSEyeCenterExtraData *arg1 = (nifly::BSEyeCenterExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSEyeCenterExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEyeCenterExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::BSEyeCenterExtraData *arg1 = (nifly::BSEyeCenterExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSEyeCenterExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSEyeCenterExtraData() {
  void * jresult ;
  nifly::BSEyeCenterExtraData *result = 0 ;
  
  result = (nifly::BSEyeCenterExtraData *)new nifly::BSEyeCenterExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSEyeCenterExtraData(void * jarg1) {
  nifly::BSEyeCenterExtraData *arg1 = (nifly::BSEyeCenterExtraData *) 0 ;
  
  arg1 = (nifly::BSEyeCenterExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomObject_fileNameHash_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomObject *arg1 = (nifly::BSPackedGeomObject *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomObject *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->fileNameHash = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomObject_fileNameHash_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomObject *arg1 = (nifly::BSPackedGeomObject *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomObject *)jarg1; 
  result = (uint32_t) ((arg1)->fileNameHash);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomObject_dataOffset_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomObject *arg1 = (nifly::BSPackedGeomObject *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomObject *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->dataOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomObject_dataOffset_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomObject *arg1 = (nifly::BSPackedGeomObject *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomObject *)jarg1; 
  result = (uint32_t) ((arg1)->dataOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPackedGeomObject() {
  void * jresult ;
  nifly::BSPackedGeomObject *result = 0 ;
  
  result = (nifly::BSPackedGeomObject *)new nifly::BSPackedGeomObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPackedGeomObject(void * jarg1) {
  nifly::BSPackedGeomObject *arg1 = (nifly::BSPackedGeomObject *) 0 ;
  
  arg1 = (nifly::BSPackedGeomObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_grayscaleToPaletteScale_set(void * jarg1, float jarg2) {
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->grayscaleToPaletteScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_grayscaleToPaletteScale_get(void * jarg1) {
  float jresult ;
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  float result;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  result = (float) ((arg1)->grayscaleToPaletteScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_rotation_set(void * jarg1, void * jarg2) {
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  Matrix3 arg2 ;
  Matrix3 *argp2 ;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  argp2 = (Matrix3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Matrix3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  Matrix3 result;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  result =  ((arg1)->rotation);
  jresult = new Matrix3((const Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_translation_set(void * jarg1, void * jarg2) {
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_translation_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  result =  ((arg1)->translation);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_scale_set(void * jarg1, float jarg2) {
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_scale_get(void * jarg1) {
  float jresult ;
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  float result;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_bounds_set(void * jarg1, void * jarg2) {
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  BoundingSphere arg2 ;
  BoundingSphere *argp2 ;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  argp2 = (BoundingSphere *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BoundingSphere", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->bounds = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedGeomDataCombined_bounds_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  BoundingSphere result;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  result =  ((arg1)->bounds);
  jresult = new BoundingSphere((const BoundingSphere &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPackedGeomDataCombined() {
  void * jresult ;
  nifly::BSPackedGeomDataCombined *result = 0 ;
  
  result = (nifly::BSPackedGeomDataCombined *)new nifly::BSPackedGeomDataCombined();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPackedGeomDataCombined(void * jarg1) {
  nifly::BSPackedGeomDataCombined *arg1 = (nifly::BSPackedGeomDataCombined *) 0 ;
  
  arg1 = (nifly::BSPackedGeomDataCombined *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_numVertices_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_numVertices_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (uint32_t) ((arg1)->numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_lodLevels_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->lodLevels = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_lodLevels_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (uint32_t) ((arg1)->lodLevels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triCountLod0_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->triCountLod0 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triCountLod0_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (uint32_t) ((arg1)->triCountLod0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triOffsetLod0_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->triOffsetLod0 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triOffsetLod0_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (uint32_t) ((arg1)->triOffsetLod0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triCountLod1_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->triCountLod1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triCountLod1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (uint32_t) ((arg1)->triCountLod1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triOffsetLod1_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->triOffsetLod1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triOffsetLod1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (uint32_t) ((arg1)->triOffsetLod1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triCountLod2_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->triCountLod2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triCountLod2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (uint32_t) ((arg1)->triCountLod2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triOffsetLod2_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->triOffsetLod2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triOffsetLod2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (uint32_t) ((arg1)->triOffsetLod2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_combined_set(void * jarg1, void * jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  nifly::NiVector< nifly::BSPackedGeomDataCombined > *arg2 = (nifly::NiVector< nifly::BSPackedGeomDataCombined > *) 0 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (nifly::NiVector< nifly::BSPackedGeomDataCombined > *)jarg2; 
  if (arg1) (arg1)->combined = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedGeomData_combined_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  nifly::NiVector< nifly::BSPackedGeomDataCombined > *result = 0 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (nifly::NiVector< nifly::BSPackedGeomDataCombined > *)& ((arg1)->combined);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_vertexDesc_set(void * jarg1, void * jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  VertexDesc arg2 ;
  VertexDesc *argp2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  argp2 = (VertexDesc *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VertexDesc", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vertexDesc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedGeomData_vertexDesc_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  VertexDesc result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result =  ((arg1)->vertexDesc);
  jresult = new VertexDesc((const VertexDesc &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_vertData_set(void * jarg1, void * jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  std::vector< nifly::BSVertexData > *arg2 = (std::vector< nifly::BSVertexData > *) 0 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (std::vector< nifly::BSVertexData > *)jarg2; 
  if (arg1) (arg1)->vertData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedGeomData_vertData_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  std::vector< nifly::BSVertexData > *result = 0 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (std::vector< nifly::BSVertexData > *)& ((arg1)->vertData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triangles_set(void * jarg1, void * jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  std::vector< nifly::Triangle > *arg2 = (std::vector< nifly::Triangle > *) 0 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2; 
  if (arg1) (arg1)->triangles = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedGeomData_triangles_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  std::vector< nifly::Triangle > *result = 0 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (std::vector< nifly::Triangle > *)& ((arg1)->triangles);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_Sync(void * jarg1, void * jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_SetVertices(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertices(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_HasVertices(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)((nifly::BSPackedGeomData const *)arg1)->HasVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_SetUVs(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUVs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_HasUVs(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)((nifly::BSPackedGeomData const *)arg1)->HasUVs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_SetSecondUVs(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSecondUVs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_HasSecondUVs(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)(arg1)->HasSecondUVs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_SetNormals(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNormals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_HasNormals(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)((nifly::BSPackedGeomData const *)arg1)->HasNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_SetTangents(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTangents(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_HasTangents(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)((nifly::BSPackedGeomData const *)arg1)->HasTangents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_SetVertexColors(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertexColors(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_HasVertexColors(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)((nifly::BSPackedGeomData const *)arg1)->HasVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_SetSkinned(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSkinned(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_IsSkinned(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)((nifly::BSPackedGeomData const *)arg1)->IsSkinned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_SetEyeData(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEyeData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_HasEyeData(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)((nifly::BSPackedGeomData const *)arg1)->HasEyeData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedGeomData_SetFullPrecision(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFullPrecision(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_IsFullPrecision(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)((nifly::BSPackedGeomData const *)arg1)->IsFullPrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedGeomData_CanChangePrecision(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  result = (bool)((nifly::BSPackedGeomData const *)arg1)->CanChangePrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPackedGeomData() {
  void * jresult ;
  nifly::BSPackedGeomData *result = 0 ;
  
  result = (nifly::BSPackedGeomData *)new nifly::BSPackedGeomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPackedGeomData(void * jarg1) {
  nifly::BSPackedGeomData *arg1 = (nifly::BSPackedGeomData *) 0 ;
  
  arg1 = (nifly::BSPackedGeomData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_vertexDesc_set(void * jarg1, void * jarg2) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  VertexDesc arg2 ;
  VertexDesc *argp2 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  argp2 = (VertexDesc *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VertexDesc", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vertexDesc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_vertexDesc_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  VertexDesc result;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  result =  ((arg1)->vertexDesc);
  jresult = new VertexDesc((const VertexDesc &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_numVertices_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_numVertices_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  result = (uint32_t) ((arg1)->numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_numTriangles_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numTriangles = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_numTriangles_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  result = (uint32_t) ((arg1)->numTriangles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_unkFlags1_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkFlags1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_unkFlags1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  result = (uint32_t) ((arg1)->unkFlags1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_unkFlags2_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkFlags2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_unkFlags2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  result = (uint32_t) ((arg1)->unkFlags2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_numData_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_numData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  result = (uint32_t) ((arg1)->numData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_objects_set(void * jarg1, void * jarg2) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  std::vector< nifly::BSPackedGeomObject > *arg2 = (std::vector< nifly::BSPackedGeomObject > *) 0 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  arg2 = (std::vector< nifly::BSPackedGeomObject > *)jarg2; 
  if (arg1) (arg1)->objects = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_objects_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  std::vector< nifly::BSPackedGeomObject > *result = 0 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  result = (std::vector< nifly::BSPackedGeomObject > *)& ((arg1)->objects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_data_set(void * jarg1, void * jarg2) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  std::vector< nifly::BSPackedGeomData > *arg2 = (std::vector< nifly::BSPackedGeomData > *) 0 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  arg2 = (std::vector< nifly::BSPackedGeomData > *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_data_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  std::vector< nifly::BSPackedGeomData > *result = 0 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  result = (std::vector< nifly::BSPackedGeomData > *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPackedCombinedSharedGeomDataExtra::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedCombinedSharedGeomDataExtra_Sync(void * jarg1, void * jarg2) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPackedCombinedSharedGeomDataExtra() {
  void * jresult ;
  nifly::BSPackedCombinedSharedGeomDataExtra *result = 0 ;
  
  result = (nifly::BSPackedCombinedSharedGeomDataExtra *)new nifly::BSPackedCombinedSharedGeomDataExtra();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPackedCombinedSharedGeomDataExtra(void * jarg1) {
  nifly::BSPackedCombinedSharedGeomDataExtra *arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *) 0 ;
  
  arg1 = (nifly::BSPackedCombinedSharedGeomDataExtra *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSInvMarker_rotationX_set(void * jarg1, unsigned short jarg2) {
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->rotationX = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSInvMarker_rotationX_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  result = (uint16_t) ((arg1)->rotationX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSInvMarker_rotationY_set(void * jarg1, unsigned short jarg2) {
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->rotationY = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSInvMarker_rotationY_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  result = (uint16_t) ((arg1)->rotationY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSInvMarker_rotationZ_set(void * jarg1, unsigned short jarg2) {
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->rotationZ = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSInvMarker_rotationZ_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  result = (uint16_t) ((arg1)->rotationZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSInvMarker_zoom_set(void * jarg1, float jarg2) {
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->zoom = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSInvMarker_zoom_get(void * jarg1) {
  float jresult ;
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  float result;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  result = (float) ((arg1)->zoom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSInvMarker_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSInvMarker::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSInvMarker_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSInvMarker_Sync(void * jarg1, void * jarg2) {
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSInvMarker() {
  void * jresult ;
  nifly::BSInvMarker *result = 0 ;
  
  result = (nifly::BSInvMarker *)new nifly::BSInvMarker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSInvMarker(void * jarg1) {
  nifly::BSInvMarker *arg1 = (nifly::BSInvMarker *) 0 ;
  
  arg1 = (nifly::BSInvMarker *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_FurniturePosition_offset_set(void * jarg1, void * jarg2) {
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_FurniturePosition_offset_get(void * jarg1) {
  void * jresult ;
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  result =  ((arg1)->offset);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_FurniturePosition_orientation_set(void * jarg1, unsigned short jarg2) {
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->orientation = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_FurniturePosition_orientation_get(void * jarg1) {
  unsigned short jresult ;
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  result = (uint16_t) ((arg1)->orientation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_FurniturePosition_posRef1_set(void * jarg1, unsigned char jarg2) {
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->posRef1 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_FurniturePosition_posRef1_get(void * jarg1) {
  unsigned char jresult ;
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  result = (uint8_t) ((arg1)->posRef1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_FurniturePosition_posRef2_set(void * jarg1, unsigned char jarg2) {
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->posRef2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_FurniturePosition_posRef2_get(void * jarg1) {
  unsigned char jresult ;
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  result = (uint8_t) ((arg1)->posRef2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_FurniturePosition_heading_set(void * jarg1, float jarg2) {
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_FurniturePosition_heading_get(void * jarg1) {
  float jresult ;
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  float result;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  result = (float) ((arg1)->heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_FurniturePosition_animationType_set(void * jarg1, unsigned short jarg2) {
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->animationType = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_FurniturePosition_animationType_get(void * jarg1) {
  unsigned short jresult ;
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  result = (uint16_t) ((arg1)->animationType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_FurniturePosition_entryPoints_set(void * jarg1, unsigned short jarg2) {
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->entryPoints = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_FurniturePosition_entryPoints_get(void * jarg1) {
  unsigned short jresult ;
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  result = (uint16_t) ((arg1)->entryPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_FurniturePosition() {
  void * jresult ;
  nifly::FurniturePosition *result = 0 ;
  
  result = (nifly::FurniturePosition *)new nifly::FurniturePosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_FurniturePosition(void * jarg1) {
  nifly::FurniturePosition *arg1 = (nifly::FurniturePosition *) 0 ;
  
  arg1 = (nifly::FurniturePosition *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSFurnitureMarker_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSFurnitureMarker::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSFurnitureMarker_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSFurnitureMarker *arg1 = (nifly::BSFurnitureMarker *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSFurnitureMarker *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSFurnitureMarker_Sync(void * jarg1, void * jarg2) {
  nifly::BSFurnitureMarker *arg1 = (nifly::BSFurnitureMarker *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSFurnitureMarker *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSFurnitureMarker_GetPositions(void * jarg1) {
  void * jresult ;
  nifly::BSFurnitureMarker *arg1 = (nifly::BSFurnitureMarker *) 0 ;
  SwigValueWrapper< std::vector< nifly::FurniturePosition > > result;
  
  arg1 = (nifly::BSFurnitureMarker *)jarg1; 
  result = (arg1)->GetPositions();
  jresult = new std::vector< nifly::FurniturePosition >((const std::vector< nifly::FurniturePosition > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSFurnitureMarker_SetPositions(void * jarg1, void * jarg2) {
  nifly::BSFurnitureMarker *arg1 = (nifly::BSFurnitureMarker *) 0 ;
  std::vector< nifly::FurniturePosition > *arg2 = 0 ;
  
  arg1 = (nifly::BSFurnitureMarker *)jarg1; 
  arg2 = (std::vector< nifly::FurniturePosition > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::FurniturePosition > const & type is null", 0);
    return ;
  } 
  (arg1)->SetPositions((std::vector< nifly::FurniturePosition > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSFurnitureMarker() {
  void * jresult ;
  nifly::BSFurnitureMarker *result = 0 ;
  
  result = (nifly::BSFurnitureMarker *)new nifly::BSFurnitureMarker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSFurnitureMarker(void * jarg1) {
  nifly::BSFurnitureMarker *arg1 = (nifly::BSFurnitureMarker *) 0 ;
  
  arg1 = (nifly::BSFurnitureMarker *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSFurnitureMarkerNode_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSFurnitureMarkerNode::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSFurnitureMarkerNode_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSFurnitureMarkerNode *arg1 = (nifly::BSFurnitureMarkerNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSFurnitureMarkerNode *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSFurnitureMarkerNode() {
  void * jresult ;
  nifly::BSFurnitureMarkerNode *result = 0 ;
  
  result = (nifly::BSFurnitureMarkerNode *)new nifly::BSFurnitureMarkerNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSFurnitureMarkerNode(void * jarg1) {
  nifly::BSFurnitureMarkerNode *arg1 = (nifly::BSFurnitureMarkerNode *) 0 ;
  
  arg1 = (nifly::BSFurnitureMarkerNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_DecalVectorBlock_numVectors_set(void * jarg1, unsigned short jarg2) {
  nifly::DecalVectorBlock *arg1 = (nifly::DecalVectorBlock *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::DecalVectorBlock *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numVectors = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_DecalVectorBlock_numVectors_get(void * jarg1) {
  unsigned short jresult ;
  nifly::DecalVectorBlock *arg1 = (nifly::DecalVectorBlock *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::DecalVectorBlock *)jarg1; 
  result = (uint16_t) ((arg1)->numVectors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_DecalVectorBlock_points_set(void * jarg1, void * jarg2) {
  nifly::DecalVectorBlock *arg1 = (nifly::DecalVectorBlock *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::DecalVectorBlock *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->points = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_DecalVectorBlock_points_get(void * jarg1) {
  void * jresult ;
  nifly::DecalVectorBlock *arg1 = (nifly::DecalVectorBlock *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::DecalVectorBlock *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->points);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_DecalVectorBlock_normals_set(void * jarg1, void * jarg2) {
  nifly::DecalVectorBlock *arg1 = (nifly::DecalVectorBlock *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::DecalVectorBlock *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->normals = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_DecalVectorBlock_normals_get(void * jarg1) {
  void * jresult ;
  nifly::DecalVectorBlock *arg1 = (nifly::DecalVectorBlock *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::DecalVectorBlock *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->normals);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_DecalVectorBlock() {
  void * jresult ;
  nifly::DecalVectorBlock *result = 0 ;
  
  result = (nifly::DecalVectorBlock *)new nifly::DecalVectorBlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_DecalVectorBlock(void * jarg1) {
  nifly::DecalVectorBlock *arg1 = (nifly::DecalVectorBlock *) 0 ;
  
  arg1 = (nifly::DecalVectorBlock *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDecalPlacementVectorExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSDecalPlacementVectorExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDecalPlacementVectorExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSDecalPlacementVectorExtraData *arg1 = (nifly::BSDecalPlacementVectorExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSDecalPlacementVectorExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDecalPlacementVectorExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::BSDecalPlacementVectorExtraData *arg1 = (nifly::BSDecalPlacementVectorExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSDecalPlacementVectorExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSDecalPlacementVectorExtraData_GetDecalVectorBlocks(void * jarg1) {
  void * jresult ;
  nifly::BSDecalPlacementVectorExtraData *arg1 = (nifly::BSDecalPlacementVectorExtraData *) 0 ;
  SwigValueWrapper< std::vector< nifly::DecalVectorBlock > > result;
  
  arg1 = (nifly::BSDecalPlacementVectorExtraData *)jarg1; 
  result = (arg1)->GetDecalVectorBlocks();
  jresult = new std::vector< nifly::DecalVectorBlock >((const std::vector< nifly::DecalVectorBlock > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDecalPlacementVectorExtraData_SetDecalVectorBlocks(void * jarg1, void * jarg2) {
  nifly::BSDecalPlacementVectorExtraData *arg1 = (nifly::BSDecalPlacementVectorExtraData *) 0 ;
  std::vector< nifly::DecalVectorBlock > *arg2 = 0 ;
  
  arg1 = (nifly::BSDecalPlacementVectorExtraData *)jarg1; 
  arg2 = (std::vector< nifly::DecalVectorBlock > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::DecalVectorBlock > const & type is null", 0);
    return ;
  } 
  (arg1)->SetDecalVectorBlocks((std::vector< nifly::DecalVectorBlock > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSDecalPlacementVectorExtraData() {
  void * jresult ;
  nifly::BSDecalPlacementVectorExtraData *result = 0 ;
  
  result = (nifly::BSDecalPlacementVectorExtraData *)new nifly::BSDecalPlacementVectorExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSDecalPlacementVectorExtraData(void * jarg1) {
  nifly::BSDecalPlacementVectorExtraData *arg1 = (nifly::BSDecalPlacementVectorExtraData *) 0 ;
  
  arg1 = (nifly::BSDecalPlacementVectorExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBehaviorGraphExtraData_behaviorGraphFile_set(void * jarg1, void * jarg2) {
  nifly::BSBehaviorGraphExtraData *arg1 = (nifly::BSBehaviorGraphExtraData *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::BSBehaviorGraphExtraData *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->behaviorGraphFile = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSBehaviorGraphExtraData_behaviorGraphFile_get(void * jarg1) {
  void * jresult ;
  nifly::BSBehaviorGraphExtraData *arg1 = (nifly::BSBehaviorGraphExtraData *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::BSBehaviorGraphExtraData *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->behaviorGraphFile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBehaviorGraphExtraData_controlsBaseSkel_set(void * jarg1, unsigned int jarg2) {
  nifly::BSBehaviorGraphExtraData *arg1 = (nifly::BSBehaviorGraphExtraData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSBehaviorGraphExtraData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->controlsBaseSkel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSBehaviorGraphExtraData_controlsBaseSkel_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSBehaviorGraphExtraData *arg1 = (nifly::BSBehaviorGraphExtraData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSBehaviorGraphExtraData *)jarg1; 
  result = (bool) ((arg1)->controlsBaseSkel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSBehaviorGraphExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSBehaviorGraphExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSBehaviorGraphExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSBehaviorGraphExtraData *arg1 = (nifly::BSBehaviorGraphExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSBehaviorGraphExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBehaviorGraphExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::BSBehaviorGraphExtraData *arg1 = (nifly::BSBehaviorGraphExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSBehaviorGraphExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBehaviorGraphExtraData_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::BSBehaviorGraphExtraData *arg1 = (nifly::BSBehaviorGraphExtraData *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSBehaviorGraphExtraData *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSBehaviorGraphExtraData() {
  void * jresult ;
  nifly::BSBehaviorGraphExtraData *result = 0 ;
  
  result = (nifly::BSBehaviorGraphExtraData *)new nifly::BSBehaviorGraphExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSBehaviorGraphExtraData(void * jarg1) {
  nifly::BSBehaviorGraphExtraData *arg1 = (nifly::BSBehaviorGraphExtraData *) 0 ;
  
  arg1 = (nifly::BSBehaviorGraphExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBound_center_set(void * jarg1, void * jarg2) {
  nifly::BSBound *arg1 = (nifly::BSBound *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSBound *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->center = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSBound_center_get(void * jarg1) {
  void * jresult ;
  nifly::BSBound *arg1 = (nifly::BSBound *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSBound *)jarg1; 
  result =  ((arg1)->center);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBound_halfExtents_set(void * jarg1, void * jarg2) {
  nifly::BSBound *arg1 = (nifly::BSBound *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSBound *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->halfExtents = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSBound_halfExtents_get(void * jarg1) {
  void * jresult ;
  nifly::BSBound *arg1 = (nifly::BSBound *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSBound *)jarg1; 
  result =  ((arg1)->halfExtents);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSBound_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSBound::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSBound_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSBound *arg1 = (nifly::BSBound *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSBound *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBound_Sync(void * jarg1, void * jarg2) {
  nifly::BSBound *arg1 = (nifly::BSBound *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSBound *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSBound() {
  void * jresult ;
  nifly::BSBound *result = 0 ;
  
  result = (nifly::BSBound *)new nifly::BSBound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSBound(void * jarg1) {
  nifly::BSBound *arg1 = (nifly::BSBound *) 0 ;
  
  arg1 = (nifly::BSBound *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoneLOD_distance_set(void * jarg1, unsigned int jarg2) {
  nifly::BoneLOD *arg1 = (nifly::BoneLOD *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BoneLOD *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BoneLOD_distance_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BoneLOD *arg1 = (nifly::BoneLOD *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BoneLOD *)jarg1; 
  result = (uint32_t) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoneLOD_boneName_set(void * jarg1, void * jarg2) {
  nifly::BoneLOD *arg1 = (nifly::BoneLOD *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::BoneLOD *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->boneName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoneLOD_boneName_get(void * jarg1) {
  void * jresult ;
  nifly::BoneLOD *arg1 = (nifly::BoneLOD *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::BoneLOD *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->boneName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoneLOD() {
  void * jresult ;
  nifly::BoneLOD *result = 0 ;
  
  result = (nifly::BoneLOD *)new nifly::BoneLOD();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BoneLOD(void * jarg1) {
  nifly::BoneLOD *arg1 = (nifly::BoneLOD *) 0 ;
  
  arg1 = (nifly::BoneLOD *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSBoneLODExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSBoneLODExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSBoneLODExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSBoneLODExtraData *arg1 = (nifly::BSBoneLODExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSBoneLODExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBoneLODExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::BSBoneLODExtraData *arg1 = (nifly::BSBoneLODExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSBoneLODExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBoneLODExtraData_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::BSBoneLODExtraData *arg1 = (nifly::BSBoneLODExtraData *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSBoneLODExtraData *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSBoneLODExtraData_GetBoneLODs(void * jarg1) {
  void * jresult ;
  nifly::BSBoneLODExtraData *arg1 = (nifly::BSBoneLODExtraData *) 0 ;
  SwigValueWrapper< std::vector< nifly::BoneLOD > > result;
  
  arg1 = (nifly::BSBoneLODExtraData *)jarg1; 
  result = (arg1)->GetBoneLODs();
  jresult = new std::vector< nifly::BoneLOD >((const std::vector< nifly::BoneLOD > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSBoneLODExtraData_SetBoneLODs(void * jarg1, void * jarg2) {
  nifly::BSBoneLODExtraData *arg1 = (nifly::BSBoneLODExtraData *) 0 ;
  std::vector< nifly::BoneLOD > *arg2 = 0 ;
  
  arg1 = (nifly::BSBoneLODExtraData *)jarg1; 
  arg2 = (std::vector< nifly::BoneLOD > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BoneLOD > const & type is null", 0);
    return ;
  } 
  (arg1)->SetBoneLODs((std::vector< nifly::BoneLOD > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSBoneLODExtraData() {
  void * jresult ;
  nifly::BSBoneLODExtraData *result = 0 ;
  
  result = (nifly::BSBoneLODExtraData *)new nifly::BSBoneLODExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSBoneLODExtraData(void * jarg1) {
  nifly::BSBoneLODExtraData *arg1 = (nifly::BSBoneLODExtraData *) 0 ;
  
  arg1 = (nifly::BSBoneLODExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTextKeyExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTextKeyExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTextKeyExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTextKeyExtraData *arg1 = (nifly::NiTextKeyExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTextKeyExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextKeyExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiTextKeyExtraData *arg1 = (nifly::NiTextKeyExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiTextKeyExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextKeyExtraData_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiTextKeyExtraData *arg1 = (nifly::NiTextKeyExtraData *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiTextKeyExtraData *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTextKeyExtraData_GetTextKeys(void * jarg1) {
  void * jresult ;
  nifly::NiTextKeyExtraData *arg1 = (nifly::NiTextKeyExtraData *) 0 ;
  SwigValueWrapper< std::vector< nifly::Key< nifly::NiStringRef > > > result;
  
  arg1 = (nifly::NiTextKeyExtraData *)jarg1; 
  result = (arg1)->GetTextKeys();
  jresult = new std::vector< nifly::Key< nifly::NiStringRef > >((const std::vector< nifly::Key< nifly::NiStringRef > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTextKeyExtraData_SetTextKeys(void * jarg1, void * jarg2) {
  nifly::NiTextKeyExtraData *arg1 = (nifly::NiTextKeyExtraData *) 0 ;
  std::vector< nifly::Key< nifly::NiStringRef > > *arg2 = 0 ;
  
  arg1 = (nifly::NiTextKeyExtraData *)jarg1; 
  arg2 = (std::vector< nifly::Key< nifly::NiStringRef > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Key< nifly::NiStringRef > > const & type is null", 0);
    return ;
  } 
  (arg1)->SetTextKeys((std::vector< nifly::Key< nifly::NiStringRef > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTextKeyExtraData() {
  void * jresult ;
  nifly::NiTextKeyExtraData *result = 0 ;
  
  result = (nifly::NiTextKeyExtraData *)new nifly::NiTextKeyExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTextKeyExtraData(void * jarg1) {
  nifly::NiTextKeyExtraData *arg1 = (nifly::NiTextKeyExtraData *) 0 ;
  
  arg1 = (nifly::NiTextKeyExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDistantObjectLargeRefExtraData_largeRef_set(void * jarg1, unsigned int jarg2) {
  nifly::BSDistantObjectLargeRefExtraData *arg1 = (nifly::BSDistantObjectLargeRefExtraData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSDistantObjectLargeRefExtraData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->largeRef = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSDistantObjectLargeRefExtraData_largeRef_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSDistantObjectLargeRefExtraData *arg1 = (nifly::BSDistantObjectLargeRefExtraData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSDistantObjectLargeRefExtraData *)jarg1; 
  result = (bool) ((arg1)->largeRef);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDistantObjectLargeRefExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSDistantObjectLargeRefExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDistantObjectLargeRefExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSDistantObjectLargeRefExtraData *arg1 = (nifly::BSDistantObjectLargeRefExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSDistantObjectLargeRefExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDistantObjectLargeRefExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::BSDistantObjectLargeRefExtraData *arg1 = (nifly::BSDistantObjectLargeRefExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSDistantObjectLargeRefExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSDistantObjectLargeRefExtraData() {
  void * jresult ;
  nifly::BSDistantObjectLargeRefExtraData *result = 0 ;
  
  result = (nifly::BSDistantObjectLargeRefExtraData *)new nifly::BSDistantObjectLargeRefExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSDistantObjectLargeRefExtraData(void * jarg1) {
  nifly::BSDistantObjectLargeRefExtraData *arg1 = (nifly::BSDistantObjectLargeRefExtraData *) 0 ;
  
  arg1 = (nifly::BSDistantObjectLargeRefExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPoint_root_set(void * jarg1, void * jarg2) {
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->root = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSConnectPoint_root_get(void * jarg1) {
  void * jresult ;
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->root);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPoint_variableName_set(void * jarg1, void * jarg2) {
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->variableName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSConnectPoint_variableName_get(void * jarg1) {
  void * jresult ;
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->variableName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPoint_rotation_set(void * jarg1, void * jarg2) {
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  Quaternion arg2 ;
  Quaternion *argp2 ;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  argp2 = (Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSConnectPoint_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  Quaternion result;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  result =  ((arg1)->rotation);
  jresult = new Quaternion((const Quaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPoint_translation_set(void * jarg1, void * jarg2) {
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  Vector3 arg2 ;
  Vector3 *argp2 ;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->translation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSConnectPoint_translation_get(void * jarg1) {
  void * jresult ;
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  Vector3 result;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  result =  ((arg1)->translation);
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPoint_scale_set(void * jarg1, float jarg2) {
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSConnectPoint_scale_get(void * jarg1) {
  float jresult ;
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  float result;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPoint_Sync(void * jarg1, void * jarg2) {
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSConnectPoint() {
  void * jresult ;
  nifly::BSConnectPoint *result = 0 ;
  
  result = (nifly::BSConnectPoint *)new nifly::BSConnectPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSConnectPoint(void * jarg1) {
  nifly::BSConnectPoint *arg1 = (nifly::BSConnectPoint *) 0 ;
  
  arg1 = (nifly::BSConnectPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSConnectPointParents_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSConnectPointParents::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSConnectPointParents_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSConnectPointParents *arg1 = (nifly::BSConnectPointParents *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSConnectPointParents *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPointParents_Sync(void * jarg1, void * jarg2) {
  nifly::BSConnectPointParents *arg1 = (nifly::BSConnectPointParents *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSConnectPointParents *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSConnectPointParents_GetConnectPoints(void * jarg1) {
  void * jresult ;
  nifly::BSConnectPointParents *arg1 = (nifly::BSConnectPointParents *) 0 ;
  SwigValueWrapper< std::vector< nifly::BSConnectPoint > > result;
  
  arg1 = (nifly::BSConnectPointParents *)jarg1; 
  result = (arg1)->GetConnectPoints();
  jresult = new std::vector< nifly::BSConnectPoint >((const std::vector< nifly::BSConnectPoint > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPointParents_SetConnectPoints(void * jarg1, void * jarg2) {
  nifly::BSConnectPointParents *arg1 = (nifly::BSConnectPointParents *) 0 ;
  std::vector< nifly::BSConnectPoint > *arg2 = 0 ;
  
  arg1 = (nifly::BSConnectPointParents *)jarg1; 
  arg2 = (std::vector< nifly::BSConnectPoint > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSConnectPoint > const & type is null", 0);
    return ;
  } 
  (arg1)->SetConnectPoints((std::vector< nifly::BSConnectPoint > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSConnectPointParents() {
  void * jresult ;
  nifly::BSConnectPointParents *result = 0 ;
  
  result = (nifly::BSConnectPointParents *)new nifly::BSConnectPointParents();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSConnectPointParents(void * jarg1) {
  nifly::BSConnectPointParents *arg1 = (nifly::BSConnectPointParents *) 0 ;
  
  arg1 = (nifly::BSConnectPointParents *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPointChildren_skinned_set(void * jarg1, unsigned int jarg2) {
  nifly::BSConnectPointChildren *arg1 = (nifly::BSConnectPointChildren *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSConnectPointChildren *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->skinned = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSConnectPointChildren_skinned_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSConnectPointChildren *arg1 = (nifly::BSConnectPointChildren *) 0 ;
  bool result;
  
  arg1 = (nifly::BSConnectPointChildren *)jarg1; 
  result = (bool) ((arg1)->skinned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPointChildren_targets_set(void * jarg1, void * jarg2) {
  nifly::BSConnectPointChildren *arg1 = (nifly::BSConnectPointChildren *) 0 ;
  nifly::NiStringVector< > *arg2 = (nifly::NiStringVector< > *) 0 ;
  
  arg1 = (nifly::BSConnectPointChildren *)jarg1; 
  arg2 = (nifly::NiStringVector< > *)jarg2; 
  if (arg1) (arg1)->targets = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSConnectPointChildren_targets_get(void * jarg1) {
  void * jresult ;
  nifly::BSConnectPointChildren *arg1 = (nifly::BSConnectPointChildren *) 0 ;
  nifly::NiStringVector< > *result = 0 ;
  
  arg1 = (nifly::BSConnectPointChildren *)jarg1; 
  result = (nifly::NiStringVector< > *)& ((arg1)->targets);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSConnectPointChildren_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSConnectPointChildren::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSConnectPointChildren_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSConnectPointChildren *arg1 = (nifly::BSConnectPointChildren *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSConnectPointChildren *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSConnectPointChildren_Sync(void * jarg1, void * jarg2) {
  nifly::BSConnectPointChildren *arg1 = (nifly::BSConnectPointChildren *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSConnectPointChildren *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSConnectPointChildren() {
  void * jresult ;
  nifly::BSConnectPointChildren *result = 0 ;
  
  result = (nifly::BSConnectPointChildren *)new nifly::BSConnectPointChildren();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSConnectPointChildren(void * jarg1) {
  nifly::BSConnectPointChildren *arg1 = (nifly::BSConnectPointChildren *) 0 ;
  
  arg1 = (nifly::BSConnectPointChildren *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSExtraData() {
  void * jresult ;
  nifly::BSExtraData *result = 0 ;
  
  result = (nifly::BSExtraData *)new nifly::BSExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSExtraData(void * jarg1) {
  nifly::BSExtraData *arg1 = (nifly::BSExtraData *) 0 ;
  
  arg1 = (nifly::BSExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSClothExtraData__SWIG_0() {
  void * jresult ;
  nifly::BSClothExtraData *result = 0 ;
  
  result = (nifly::BSClothExtraData *)new nifly::BSClothExtraData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSClothExtraData__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  uint32_t arg1 ;
  nifly::BSClothExtraData *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  result = (nifly::BSClothExtraData *)new nifly::BSClothExtraData(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSClothExtraData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSClothExtraData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSClothExtraData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSClothExtraData *arg1 = (nifly::BSClothExtraData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSClothExtraData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSClothExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::BSClothExtraData *arg1 = (nifly::BSClothExtraData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSClothExtraData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSClothExtraData_GetData(void * jarg1) {
  void * jresult ;
  nifly::BSClothExtraData *arg1 = (nifly::BSClothExtraData *) 0 ;
  std::vector< char > result;
  
  arg1 = (nifly::BSClothExtraData *)jarg1; 
  result = (arg1)->GetData();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSClothExtraData_SetData(void * jarg1, void * jarg2) {
  nifly::BSClothExtraData *arg1 = (nifly::BSClothExtraData *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (nifly::BSClothExtraData *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  (arg1)->SetData((std::vector< char > const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSClothExtraData_ToHKX(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  nifly::BSClothExtraData *arg1 = (nifly::BSClothExtraData *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::BSClothExtraData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->ToHKX((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSClothExtraData_FromHKX(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  nifly::BSClothExtraData *arg1 = (nifly::BSClothExtraData *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::BSClothExtraData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->FromHKX((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSClothExtraData(void * jarg1) {
  nifly::BSClothExtraData *arg1 = (nifly::BSClothExtraData *) 0 ;
  
  arg1 = (nifly::BSClothExtraData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFactory_Create(void * jarg1) {
  void * jresult ;
  nifly::NiFactory *arg1 = (nifly::NiFactory *) 0 ;
  nifly::NiObject *result = 0 ;
  
  arg1 = (nifly::NiFactory *)jarg1; 
  result = (nifly::NiObject *)(arg1)->Create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFactory_Load(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NiFactory *arg1 = (nifly::NiFactory *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  nifly::NiObject *result = 0 ;
  
  arg1 = (nifly::NiFactory *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return 0;
  } 
  result = (nifly::NiObject *)(arg1)->Load(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFactory(void * jarg1) {
  nifly::NiFactory *arg1 = (nifly::NiFactory *) 0 ;
  
  arg1 = (nifly::NiFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiFactoryRegister() {
  void * jresult ;
  nifly::NiFactoryRegister *result = 0 ;
  
  result = (nifly::NiFactoryRegister *)new nifly::NiFactoryRegister();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFactoryRegister_GetFactoryByName(void * jarg1, char * jarg2) {
  void * jresult ;
  nifly::NiFactoryRegister *arg1 = (nifly::NiFactoryRegister *) 0 ;
  std::string *arg2 = 0 ;
  nifly::NiFactory *result = 0 ;
  
  arg1 = (nifly::NiFactoryRegister *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (nifly::NiFactory *)(arg1)->GetFactoryByName((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFactoryRegister_Get() {
  void * jresult ;
  nifly::NiFactoryRegister *result = 0 ;
  
  result = (nifly::NiFactoryRegister *) &nifly::NiFactoryRegister::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFactoryRegister(void * jarg1) {
  nifly::NiFactoryRegister *arg1 = (nifly::NiFactoryRegister *) 0 ;
  
  arg1 = (nifly::NiFactoryRegister *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_dataType_set(void * jarg1, int jarg2) {
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dataType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_dataType_get(void * jarg1) {
  int jresult ;
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  int result;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  result = (int) ((arg1)->dataType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_numChannelBytesPerElement_set(void * jarg1, unsigned int jarg2) {
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numChannelBytesPerElement = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_numChannelBytesPerElement_get(void * jarg1) {
  unsigned int jresult ;
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  result = (uint32_t) ((arg1)->numChannelBytesPerElement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_numChannelBytes_set(void * jarg1, unsigned int jarg2) {
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numChannelBytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_numChannelBytes_get(void * jarg1) {
  unsigned int jresult ;
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  result = (uint32_t) ((arg1)->numChannelBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_numTotalBytesPerElement_set(void * jarg1, unsigned int jarg2) {
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numTotalBytesPerElement = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_numTotalBytesPerElement_get(void * jarg1) {
  unsigned int jresult ;
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  result = (uint32_t) ((arg1)->numTotalBytesPerElement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_blockIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->blockIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_blockIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  result = (uint32_t) ((arg1)->blockIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_channelOffset_set(void * jarg1, unsigned int jarg2) {
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->channelOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_channelOffset_get(void * jarg1) {
  unsigned int jresult ;
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  result = (uint32_t) ((arg1)->channelOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_unkByte1_set(void * jarg1, unsigned char jarg2) {
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->unkByte1 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_unkByte1_get(void * jarg1) {
  unsigned char jresult ;
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  result = (uint8_t) ((arg1)->unkByte1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataInfo_Sync(void * jarg1, void * jarg2) {
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_AdditionalDataInfo() {
  void * jresult ;
  nifly::AdditionalDataInfo *result = 0 ;
  
  result = (nifly::AdditionalDataInfo *)new nifly::AdditionalDataInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_AdditionalDataInfo(void * jarg1) {
  nifly::AdditionalDataInfo *arg1 = (nifly::AdditionalDataInfo *) 0 ;
  
  arg1 = (nifly::AdditionalDataInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_hasData_set(void * jarg1, unsigned int jarg2) {
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_hasData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  bool result;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  result = (bool) ((arg1)->hasData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_blockSize_set(void * jarg1, unsigned int jarg2) {
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->blockSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_blockSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  result = (uint32_t) ((arg1)->blockSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_numBlocks_set(void * jarg1, unsigned int jarg2) {
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numBlocks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_numBlocks_get(void * jarg1) {
  unsigned int jresult ;
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  result = (uint32_t) ((arg1)->numBlocks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_blockOffsets_set(void * jarg1, void * jarg2) {
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  std::vector< uint32_t > *arg2 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->blockOffsets = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_blockOffsets_get(void * jarg1) {
  void * jresult ;
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  result = (std::vector< uint32_t > *)& ((arg1)->blockOffsets);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_numData_set(void * jarg1, unsigned int jarg2) {
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_numData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  result = (uint32_t) ((arg1)->numData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_dataSizes_set(void * jarg1, void * jarg2) {
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  std::vector< uint32_t > *arg2 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->dataSizes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_dataSizes_get(void * jarg1) {
  void * jresult ;
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  result = (std::vector< uint32_t > *)& ((arg1)->dataSizes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_data_set(void * jarg1, void * jarg2) {
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  arg2 = (std::vector< std::vector< uint8_t > > *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_data_get(void * jarg1) {
  void * jresult ;
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  result = (std::vector< std::vector< uint8_t > > *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_AdditionalDataBlock_Sync(void * jarg1, void * jarg2) {
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_AdditionalDataBlock() {
  void * jresult ;
  nifly::AdditionalDataBlock *result = 0 ;
  
  result = (nifly::AdditionalDataBlock *)new nifly::AdditionalDataBlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_AdditionalDataBlock(void * jarg1) {
  nifly::AdditionalDataBlock *arg1 = (nifly::AdditionalDataBlock *) 0 ;
  
  arg1 = (nifly::AdditionalDataBlock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_AdditionalGeomData() {
  void * jresult ;
  nifly::AdditionalGeomData *result = 0 ;
  
  result = (nifly::AdditionalGeomData *)new nifly::AdditionalGeomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_AdditionalGeomData(void * jarg1) {
  nifly::AdditionalGeomData *arg1 = (nifly::AdditionalGeomData *) 0 ;
  
  arg1 = (nifly::AdditionalGeomData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAdditionalGeometryData_numVertices_set(void * jarg1, unsigned short jarg2) {
  nifly::NiAdditionalGeometryData *arg1 = (nifly::NiAdditionalGeometryData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiAdditionalGeometryData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiAdditionalGeometryData_numVertices_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiAdditionalGeometryData *arg1 = (nifly::NiAdditionalGeometryData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiAdditionalGeometryData *)jarg1; 
  result = (uint16_t) ((arg1)->numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAdditionalGeometryData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiAdditionalGeometryData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAdditionalGeometryData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiAdditionalGeometryData *arg1 = (nifly::NiAdditionalGeometryData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiAdditionalGeometryData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAdditionalGeometryData_Sync(void * jarg1, void * jarg2) {
  nifly::NiAdditionalGeometryData *arg1 = (nifly::NiAdditionalGeometryData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiAdditionalGeometryData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiAdditionalGeometryData_GetBlockInfos(void * jarg1) {
  void * jresult ;
  nifly::NiAdditionalGeometryData *arg1 = (nifly::NiAdditionalGeometryData *) 0 ;
  SwigValueWrapper< std::vector< nifly::AdditionalDataInfo > > result;
  
  arg1 = (nifly::NiAdditionalGeometryData *)jarg1; 
  result = ((nifly::NiAdditionalGeometryData const *)arg1)->GetBlockInfos();
  jresult = new std::vector< nifly::AdditionalDataInfo >((const std::vector< nifly::AdditionalDataInfo > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAdditionalGeometryData_SetBlockInfos(void * jarg1, void * jarg2) {
  nifly::NiAdditionalGeometryData *arg1 = (nifly::NiAdditionalGeometryData *) 0 ;
  std::vector< nifly::AdditionalDataInfo > *arg2 = 0 ;
  
  arg1 = (nifly::NiAdditionalGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::AdditionalDataInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::AdditionalDataInfo > const & type is null", 0);
    return ;
  } 
  (arg1)->SetBlockInfos((std::vector< nifly::AdditionalDataInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiAdditionalGeometryData_GetBlocks(void * jarg1) {
  void * jresult ;
  nifly::NiAdditionalGeometryData *arg1 = (nifly::NiAdditionalGeometryData *) 0 ;
  SwigValueWrapper< std::vector< nifly::AdditionalDataBlock > > result;
  
  arg1 = (nifly::NiAdditionalGeometryData *)jarg1; 
  result = ((nifly::NiAdditionalGeometryData const *)arg1)->GetBlocks();
  jresult = new std::vector< nifly::AdditionalDataBlock >((const std::vector< nifly::AdditionalDataBlock > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAdditionalGeometryData_SetBlocks(void * jarg1, void * jarg2) {
  nifly::NiAdditionalGeometryData *arg1 = (nifly::NiAdditionalGeometryData *) 0 ;
  std::vector< nifly::AdditionalDataBlock > *arg2 = 0 ;
  
  arg1 = (nifly::NiAdditionalGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::AdditionalDataBlock > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::AdditionalDataBlock > const & type is null", 0);
    return ;
  } 
  (arg1)->SetBlocks((std::vector< nifly::AdditionalDataBlock > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiAdditionalGeometryData() {
  void * jresult ;
  nifly::NiAdditionalGeometryData *result = 0 ;
  
  result = (nifly::NiAdditionalGeometryData *)new nifly::NiAdditionalGeometryData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiAdditionalGeometryData(void * jarg1) {
  nifly::NiAdditionalGeometryData *arg1 = (nifly::NiAdditionalGeometryData *) 0 ;
  
  arg1 = (nifly::NiAdditionalGeometryData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_hasData_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_hasData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  bool result;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  result = (bool) ((arg1)->hasData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_numTotalBytes_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numTotalBytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_numTotalBytes_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  result = (uint32_t) ((arg1)->numTotalBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_numBlocks_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numBlocks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_numBlocks_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  result = (uint32_t) ((arg1)->numBlocks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_blockOffsets_set(void * jarg1, void * jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  std::vector< uint32_t > *arg2 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->blockOffsets = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_blockOffsets_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  result = (std::vector< uint32_t > *)& ((arg1)->blockOffsets);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_numAtoms_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numAtoms = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_numAtoms_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  result = (uint32_t) ((arg1)->numAtoms);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_atomSizes_set(void * jarg1, void * jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  std::vector< uint32_t > *arg2 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->atomSizes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_atomSizes_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  result = (std::vector< uint32_t > *)& ((arg1)->atomSizes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_data_set(void * jarg1, void * jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = (std::vector< uint8_t > *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_data_get(void * jarg1) {
  void * jresult ;
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  result = (std::vector< uint8_t > *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_unkInt1_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_unkInt1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_numTotalBytesPerElement_set(void * jarg1, unsigned int jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numTotalBytesPerElement = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_numTotalBytesPerElement_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  result = (uint32_t) ((arg1)->numTotalBytesPerElement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalDataBlock_Sync(void * jarg1, void * jarg2) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPackedAdditionalDataBlock() {
  void * jresult ;
  nifly::BSPackedAdditionalDataBlock *result = 0 ;
  
  result = (nifly::BSPackedAdditionalDataBlock *)new nifly::BSPackedAdditionalDataBlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPackedAdditionalDataBlock(void * jarg1) {
  nifly::BSPackedAdditionalDataBlock *arg1 = (nifly::BSPackedAdditionalDataBlock *) 0 ;
  
  arg1 = (nifly::BSPackedAdditionalDataBlock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalGeometryData_numVertices_set(void * jarg1, unsigned short jarg2) {
  nifly::BSPackedAdditionalGeometryData *arg1 = (nifly::BSPackedAdditionalGeometryData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSPackedAdditionalGeometryData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSPackedAdditionalGeometryData_numVertices_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSPackedAdditionalGeometryData *arg1 = (nifly::BSPackedAdditionalGeometryData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSPackedAdditionalGeometryData *)jarg1; 
  result = (uint16_t) ((arg1)->numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPackedAdditionalGeometryData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPackedAdditionalGeometryData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPackedAdditionalGeometryData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPackedAdditionalGeometryData *arg1 = (nifly::BSPackedAdditionalGeometryData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPackedAdditionalGeometryData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalGeometryData_Sync(void * jarg1, void * jarg2) {
  nifly::BSPackedAdditionalGeometryData *arg1 = (nifly::BSPackedAdditionalGeometryData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPackedAdditionalGeometryData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedAdditionalGeometryData_GetBlockInfos(void * jarg1) {
  void * jresult ;
  nifly::BSPackedAdditionalGeometryData *arg1 = (nifly::BSPackedAdditionalGeometryData *) 0 ;
  SwigValueWrapper< std::vector< nifly::AdditionalDataInfo > > result;
  
  arg1 = (nifly::BSPackedAdditionalGeometryData *)jarg1; 
  result = ((nifly::BSPackedAdditionalGeometryData const *)arg1)->GetBlockInfos();
  jresult = new std::vector< nifly::AdditionalDataInfo >((const std::vector< nifly::AdditionalDataInfo > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalGeometryData_SetBlockInfos(void * jarg1, void * jarg2) {
  nifly::BSPackedAdditionalGeometryData *arg1 = (nifly::BSPackedAdditionalGeometryData *) 0 ;
  std::vector< nifly::AdditionalDataInfo > *arg2 = 0 ;
  
  arg1 = (nifly::BSPackedAdditionalGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::AdditionalDataInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::AdditionalDataInfo > const & type is null", 0);
    return ;
  } 
  (arg1)->SetBlockInfos((std::vector< nifly::AdditionalDataInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPackedAdditionalGeometryData_GetBlocks(void * jarg1) {
  void * jresult ;
  nifly::BSPackedAdditionalGeometryData *arg1 = (nifly::BSPackedAdditionalGeometryData *) 0 ;
  SwigValueWrapper< std::vector< nifly::BSPackedAdditionalDataBlock > > result;
  
  arg1 = (nifly::BSPackedAdditionalGeometryData *)jarg1; 
  result = ((nifly::BSPackedAdditionalGeometryData const *)arg1)->GetBlocks();
  jresult = new std::vector< nifly::BSPackedAdditionalDataBlock >((const std::vector< nifly::BSPackedAdditionalDataBlock > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPackedAdditionalGeometryData_SetBlocks(void * jarg1, void * jarg2) {
  nifly::BSPackedAdditionalGeometryData *arg1 = (nifly::BSPackedAdditionalGeometryData *) 0 ;
  std::vector< nifly::BSPackedAdditionalDataBlock > *arg2 = 0 ;
  
  arg1 = (nifly::BSPackedAdditionalGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::BSPackedAdditionalDataBlock > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSPackedAdditionalDataBlock > const & type is null", 0);
    return ;
  } 
  (arg1)->SetBlocks((std::vector< nifly::BSPackedAdditionalDataBlock > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPackedAdditionalGeometryData() {
  void * jresult ;
  nifly::BSPackedAdditionalGeometryData *result = 0 ;
  
  result = (nifly::BSPackedAdditionalGeometryData *)new nifly::BSPackedAdditionalGeometryData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPackedAdditionalGeometryData(void * jarg1) {
  nifly::BSPackedAdditionalGeometryData *arg1 = (nifly::BSPackedAdditionalGeometryData *) 0 ;
  
  arg1 = (nifly::BSPackedAdditionalGeometryData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_vertices_set(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->vertices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometryData_vertices_get(void * jarg1) {
  void * jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->vertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_normals_set(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->normals = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometryData_normals_get(void * jarg1) {
  void * jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->normals);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_tangents_set(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->tangents = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometryData_tangents_get(void * jarg1) {
  void * jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->tangents);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_bitangents_set(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->bitangents = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometryData_bitangents_get(void * jarg1) {
  void * jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->bitangents);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_vertexColors_set(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Color4 > *arg2 = (std::vector< nifly::Color4 > *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::Color4 > *)jarg2; 
  if (arg1) (arg1)->vertexColors = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometryData_vertexColors_get(void * jarg1) {
  void * jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Color4 > *result = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (std::vector< nifly::Color4 > *)& ((arg1)->vertexColors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_groupID_set(void * jarg1, int jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->groupID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiGeometryData_groupID_get(void * jarg1) {
  int jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  int result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (int) ((arg1)->groupID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_compressFlags_set(void * jarg1, unsigned char jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->compressFlags = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiGeometryData_compressFlags_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (uint8_t) ((arg1)->compressFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_materialCRC_set(void * jarg1, unsigned int jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->materialCRC = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometryData_materialCRC_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (uint32_t) ((arg1)->materialCRC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_keepFlags_set(void * jarg1, unsigned char jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->keepFlags = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiGeometryData_keepFlags_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (uint8_t) ((arg1)->keepFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_numUVSets_set(void * jarg1, unsigned short jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numUVSets = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiGeometryData_numUVSets_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (uint16_t) ((arg1)->numUVSets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_uvSets_set(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< std::vector< nifly::Vector2 > > *arg2 = (std::vector< std::vector< nifly::Vector2 > > *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< std::vector< nifly::Vector2 > > *)jarg2; 
  if (arg1) (arg1)->uvSets = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometryData_uvSets_get(void * jarg1) {
  void * jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< std::vector< nifly::Vector2 > > *result = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (std::vector< std::vector< nifly::Vector2 > > *)& ((arg1)->uvSets);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_consistencyFlags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->consistencyFlags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiGeometryData_consistencyFlags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (uint16_t) ((arg1)->consistencyFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_additionalDataRef_set(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  nifly::NiBlockRef< nifly::AdditionalGeomData > *arg2 = (nifly::NiBlockRef< nifly::AdditionalGeomData > *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::AdditionalGeomData > *)jarg2; 
  if (arg1) (arg1)->additionalDataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometryData_additionalDataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  nifly::NiBlockRef< nifly::AdditionalGeomData > *result = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (nifly::NiBlockRef< nifly::AdditionalGeomData > *)& ((arg1)->additionalDataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_Sync(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiGeometryData_GetNumVertices(void * jarg1) {
  unsigned short jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (uint16_t)((nifly::NiGeometryData const *)arg1)->GetNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_SetVertices(void * jarg1, unsigned int jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertices(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometryData_HasVertices(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (bool)((nifly::NiGeometryData const *)arg1)->HasVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_SetNormals(void * jarg1, unsigned int jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNormals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometryData_HasNormals(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (bool)((nifly::NiGeometryData const *)arg1)->HasNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_SetVertexColors(void * jarg1, unsigned int jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertexColors(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometryData_HasVertexColors(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (bool)((nifly::NiGeometryData const *)arg1)->HasVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_SetUVs(void * jarg1, unsigned int jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUVs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometryData_HasUVs(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (bool)((nifly::NiGeometryData const *)arg1)->HasUVs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_SetTangents(void * jarg1, unsigned int jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTangents(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometryData_HasTangents(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (bool)((nifly::NiGeometryData const *)arg1)->HasTangents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometryData_GetNumTriangles(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = (uint32_t)((nifly::NiGeometryData const *)arg1)->GetNumTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometryData_GetTriangles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NiGeometryData const *)arg1)->GetTriangles(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_SetTriangles(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > const & type is null", 0);
    return ;
  } 
  (arg1)->SetTriangles((std::vector< nifly::Triangle > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_SetBounds(void * jarg1, void * jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  BoundingSphere *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (BoundingSphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BoundingSphere const & type is null", 0);
    return ;
  } 
  (arg1)->SetBounds((BoundingSphere const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometryData_GetBounds(void * jarg1) {
  void * jresult ;
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  BoundingSphere result;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  result = ((nifly::NiGeometryData const *)arg1)->GetBounds();
  jresult = new BoundingSphere((const BoundingSphere &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_UpdateBounds(void * jarg1) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  (arg1)->UpdateBounds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_Create(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::vector< nifly::Triangle > *arg4 = (std::vector< nifly::Triangle > *) 0 ;
  std::vector< nifly::Vector2 > *arg5 = (std::vector< nifly::Vector2 > *) 0 ;
  std::vector< nifly::Vector3 > *arg6 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::vector< nifly::Triangle > *)jarg4; 
  arg5 = (std::vector< nifly::Vector2 > *)jarg5; 
  arg6 = (std::vector< nifly::Vector3 > *)jarg6; 
  (arg1)->Create(*arg2,(std::vector< nifly::Vector3 > const *)arg3,(std::vector< nifly::Triangle > const *)arg4,(std::vector< nifly::Vector2 > const *)arg5,(std::vector< nifly::Vector3 > const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_RecalcNormals__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool arg2 ;
  float arg3 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  (arg1)->RecalcNormals(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_RecalcNormals__SWIG_1(void * jarg1, unsigned int jarg2) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RecalcNormals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_RecalcNormals__SWIG_2(void * jarg1) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  (arg1)->RecalcNormals();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometryData_CalcTangentSpace(void * jarg1) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  (arg1)->CalcTangentSpace();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiGeometryData() {
  void * jresult ;
  nifly::NiGeometryData *result = 0 ;
  
  result = (nifly::NiGeometryData *)new nifly::NiGeometryData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiGeometryData(void * jarg1) {
  nifly::NiGeometryData *arg1 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::NiGeometryData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiShapeNiAVObject(void * jarg1) {
  nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *arg1 = (nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShapeNiAVObject_Clone(void * jarg1) {
  void * jresult ;
  nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *arg1 = (nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *) 0 ;
  nifly::NiShape *result = 0 ;
  
  arg1 = (nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *)jarg1; 
  result = (nifly::NiShape *)((nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiShapeNiAVObject() {
  void * jresult ;
  nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *result = 0 ;
  
  result = (nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *)new nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShape_GetGeomData(void * jarg1) {
  void * jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  nifly::NiGeometryData *result = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (nifly::NiGeometryData *)((nifly::NiShape const *)arg1)->GetGeomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_SetGeomData(void * jarg1, void * jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  nifly::NiGeometryData *arg2 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (nifly::NiGeometryData *)jarg2; 
  (arg1)->SetGeomData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_HasData(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->HasData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShape_DataRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  nifly::NiBlockRef< nifly::NiGeometryData > *result = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiGeometryData > *)(arg1)->DataRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_HasSkinInstance(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->HasSkinInstance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShape_SkinInstanceRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  nifly::NiBlockRef< NiBoneContainer > *result = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (nifly::NiBlockRef< NiBoneContainer > *)(arg1)->SkinInstanceRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_HasShaderProperty(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->HasShaderProperty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShape_ShaderPropertyRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  nifly::NiBlockRef< NiShader > *result = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (nifly::NiBlockRef< NiShader > *)(arg1)->ShaderPropertyRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_HasAlphaProperty(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->HasAlphaProperty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShape_AlphaPropertyRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  nifly::NiBlockRef< NiAlphaProperty > *result = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (nifly::NiBlockRef< NiAlphaProperty > *)(arg1)->AlphaPropertyRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiShape_GetNumVertices(void * jarg1) {
  unsigned short jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (uint16_t)((nifly::NiShape const *)arg1)->GetNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_SetVertices(void * jarg1, unsigned int jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertices(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_HasVertices(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->HasVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_SetUVs(void * jarg1, unsigned int jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUVs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_HasUVs(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->HasUVs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_SetNormals(void * jarg1, unsigned int jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNormals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_HasNormals(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->HasNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_SetTangents(void * jarg1, unsigned int jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTangents(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_HasTangents(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->HasTangents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_SetVertexColors(void * jarg1, unsigned int jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertexColors(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_HasVertexColors(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->HasVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_SetSkinned(void * jarg1, unsigned int jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSkinned(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_IsSkinned(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (bool)((nifly::NiShape const *)arg1)->IsSkinned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_GetNumTriangles(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (uint32_t)((nifly::NiShape const *)arg1)->GetNumTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_GetTriangles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NiShape const *)arg1)->GetTriangles(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_SetTriangles(void * jarg1, void * jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > const & type is null", 0);
    return ;
  } 
  (arg1)->SetTriangles((std::vector< nifly::Triangle > const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShape_ReorderTriangles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  std::vector< uint32_t > *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32_t > const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->ReorderTriangles((std::vector< uint32_t > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_SetBounds(void * jarg1, void * jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  BoundingSphere *arg2 = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (BoundingSphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BoundingSphere const & type is null", 0);
    return ;
  } 
  (arg1)->SetBounds((BoundingSphere const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShape_GetBounds(void * jarg1) {
  void * jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  BoundingSphere result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = ((nifly::NiShape const *)arg1)->GetBounds();
  jresult = new BoundingSphere((const BoundingSphere &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShape_UpdateBounds(void * jarg1) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  (arg1)->UpdateBounds();
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiShape_GetBoneID(void * jarg1, void * jarg2, char * jarg3) {
  int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  nifly::NiHeader *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (nifly::NiHeader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiHeader const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)((nifly::NiShape const *)arg1)->GetBoneID((nifly::NiHeader const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiShape() {
  void * jresult ;
  nifly::NiShape *result = 0 ;
  
  result = (nifly::NiShape *)new nifly::NiShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiShape(void * jarg1) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_vertexDesc_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  VertexDesc arg2 ;
  VertexDesc *argp2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  argp2 = (VertexDesc *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VertexDesc", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vertexDesc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_vertexDesc_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  VertexDesc result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result =  ((arg1)->vertexDesc);
  jresult = new VertexDesc((const VertexDesc &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_dataSize_set(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->dataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_dataSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->dataSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_vertexSize_set(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vertexSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_vertexSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->vertexSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_particleDataSize_set(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->particleDataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_particleDataSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->particleDataSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_particleVerts_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->particleVerts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_particleVerts_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->particleVerts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_particleNorms_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->particleNorms = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_particleNorms_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->particleNorms);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_particleTris_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Triangle > *arg2 = (std::vector< nifly::Triangle > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2; 
  if (arg1) (arg1)->particleTris = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_particleTris_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Triangle > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Triangle > *)& ((arg1)->particleTris);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_rawVertices_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->rawVertices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_rawVertices_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->rawVertices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_rawNormals_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->rawNormals = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_rawNormals_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->rawNormals);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_rawTangents_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->rawTangents = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_rawTangents_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->rawTangents);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_rawBitangents_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->rawBitangents = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_rawBitangents_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)& ((arg1)->rawBitangents);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_rawUvs_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector2 > *arg2 = (std::vector< nifly::Vector2 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector2 > *)jarg2; 
  if (arg1) (arg1)->rawUvs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_rawUvs_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector2 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector2 > *)& ((arg1)->rawUvs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_rawColors_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Color4 > *arg2 = (std::vector< nifly::Color4 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Color4 > *)jarg2; 
  if (arg1) (arg1)->rawColors = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_rawColors_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Color4 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Color4 > *)& ((arg1)->rawColors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_rawEyeData_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->rawEyeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_rawEyeData_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< float > *)& ((arg1)->rawEyeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_deletedTris_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< uint32_t > *arg2 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->deletedTris = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_deletedTris_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< uint32_t > *)& ((arg1)->deletedTris);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_vertData_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::BSVertexData > *arg2 = (std::vector< nifly::BSVertexData > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::BSVertexData > *)jarg2; 
  if (arg1) (arg1)->vertData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_vertData_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::BSVertexData > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::BSVertexData > *)& ((arg1)->vertData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_triangles_set(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Triangle > *arg2 = (std::vector< nifly::Triangle > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2; 
  if (arg1) (arg1)->triangles = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_triangles_get(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Triangle > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Triangle > *)& ((arg1)->triangles);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSTriShape() {
  void * jresult ;
  nifly::BSTriShape *result = 0 ;
  
  result = (nifly::BSTriShape *)new nifly::BSTriShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSTriShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSTriShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSTriShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_Sync(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasSkinInstance(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->HasSkinInstance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_SkinInstanceRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  nifly::NiBlockRef< NiBoneContainer > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (nifly::NiBlockRef< NiBoneContainer > *)(arg1)->SkinInstanceRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasShaderProperty(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->HasShaderProperty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_ShaderPropertyRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  nifly::NiBlockRef< NiShader > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (nifly::NiBlockRef< NiShader > *)(arg1)->ShaderPropertyRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasAlphaProperty(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->HasAlphaProperty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_AlphaPropertyRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  nifly::NiBlockRef< NiAlphaProperty > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (nifly::NiBlockRef< NiAlphaProperty > *)(arg1)->AlphaPropertyRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetRawVerts(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetRawVerts();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetNormalData__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetNormalData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetNormalData__SWIG_1(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetNormalData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetTangentData__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetTangentData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetTangentData__SWIG_1(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetTangentData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetBitangentData__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetBitangentData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetBitangentData__SWIG_1(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetBitangentData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetUVData(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector2 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Vector2 > *)(arg1)->GetUVData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetColorData(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Color4 > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< nifly::Color4 > *)(arg1)->GetColorData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetEyeData(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (std::vector< float > *)(arg1)->GetEyeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSTriShape_GetNumVertices(void * jarg1) {
  unsigned short jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (uint16_t)((nifly::BSTriShape const *)arg1)->GetNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetVertices(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertices(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasVertices(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->HasVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetUVs(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUVs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasUVs(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->HasUVs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetSecondUVs(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSecondUVs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasSecondUVs(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)(arg1)->HasSecondUVs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetNormals__SWIG_0(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNormals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasNormals(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->HasNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetTangents(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTangents(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasTangents(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->HasTangents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetVertexColors(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertexColors(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasVertexColors(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->HasVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetSkinned(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSkinned(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_IsSkinned(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->IsSkinned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetEyeData__SWIG_0(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEyeData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_HasEyeData(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->HasEyeData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetFullPrecision(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFullPrecision(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_IsFullPrecision(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->IsFullPrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_CanChangePrecision(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (bool)((nifly::BSTriShape const *)arg1)->CanChangePrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_GetNumTriangles(void * jarg1) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = (uint32_t)((nifly::BSTriShape const *)arg1)->GetNumTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSTriShape_GetTriangles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::BSTriShape const *)arg1)->GetTriangles(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetTriangles(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > const & type is null", 0);
    return ;
  } 
  (arg1)->SetTriangles((std::vector< nifly::Triangle > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetBounds(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  BoundingSphere *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (BoundingSphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BoundingSphere const & type is null", 0);
    return ;
  } 
  (arg1)->SetBounds((BoundingSphere const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTriShape_GetBounds(void * jarg1) {
  void * jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  BoundingSphere result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  result = ((nifly::BSTriShape const *)arg1)->GetBounds();
  jresult = new BoundingSphere((const BoundingSphere &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_UpdateBounds(void * jarg1) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  (arg1)->UpdateBounds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetVertexData(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::BSVertexData > *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::BSVertexData > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSVertexData > const & type is null", 0);
    return ;
  } 
  (arg1)->SetVertexData((std::vector< nifly::BSVertexData > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetNormals__SWIG_1(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetNormals((std::vector< nifly::Vector3 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_RecalcNormals__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3, void * jarg4) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  float arg3 ;
  std::unordered_set< uint32_t > *arg4 = (std::unordered_set< uint32_t > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = (std::unordered_set< uint32_t > *)jarg4; 
  (arg1)->RecalcNormals(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_RecalcNormals__SWIG_1(void * jarg1, unsigned int jarg2, float jarg3) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  float arg3 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  (arg1)->RecalcNormals(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_RecalcNormals__SWIG_2(void * jarg1, unsigned int jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RecalcNormals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_RecalcNormals__SWIG_3(void * jarg1) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  (arg1)->RecalcNormals();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_CalcTangentSpace(void * jarg1) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  (arg1)->CalcTangentSpace();
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BSTriShape_CalcDataSizes(void * jarg1, void * jarg2) {
  int jresult ;
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->CalcDataSizes(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetTangentData(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetTangentData((std::vector< nifly::Vector3 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetBitangentData(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetBitangentData((std::vector< nifly::Vector3 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_SetEyeData__SWIG_1(void * jarg1, void * jarg2) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  (arg1)->SetEyeData((std::vector< float > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_Create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::vector< nifly::Triangle > *arg4 = (std::vector< nifly::Triangle > *) 0 ;
  std::vector< nifly::Vector2 > *arg5 = (std::vector< nifly::Vector2 > *) 0 ;
  std::vector< nifly::Vector3 > *arg6 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::vector< nifly::Triangle > *)jarg4; 
  arg5 = (std::vector< nifly::Vector2 > *)jarg5; 
  arg6 = (std::vector< nifly::Vector3 > *)jarg6; 
  (arg1)->Create(*arg2,(std::vector< nifly::Vector3 > const *)arg3,(std::vector< nifly::Triangle > const *)arg4,(std::vector< nifly::Vector2 > const *)arg5,(std::vector< nifly::Vector3 > const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTriShape_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::vector< nifly::Triangle > *arg4 = (std::vector< nifly::Triangle > *) 0 ;
  std::vector< nifly::Vector2 > *arg5 = (std::vector< nifly::Vector2 > *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::vector< nifly::Triangle > *)jarg4; 
  arg5 = (std::vector< nifly::Vector2 > *)jarg5; 
  (arg1)->Create(*arg2,(std::vector< nifly::Vector3 > const *)arg3,(std::vector< nifly::Triangle > const *)arg4,(std::vector< nifly::Vector2 > const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSTriShape(void * jarg1) {
  nifly::BSTriShape *arg1 = (nifly::BSTriShape *) 0 ;
  
  arg1 = (nifly::BSTriShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSubSegmentInfo_partID_set(void * jarg1, int jarg2) {
  nifly::NifSubSegmentInfo *arg1 = (nifly::NifSubSegmentInfo *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NifSubSegmentInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->partID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifSubSegmentInfo_partID_get(void * jarg1) {
  int jresult ;
  nifly::NifSubSegmentInfo *arg1 = (nifly::NifSubSegmentInfo *) 0 ;
  int result;
  
  arg1 = (nifly::NifSubSegmentInfo *)jarg1; 
  result = (int) ((arg1)->partID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSubSegmentInfo_userSlotID_set(void * jarg1, unsigned int jarg2) {
  nifly::NifSubSegmentInfo *arg1 = (nifly::NifSubSegmentInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NifSubSegmentInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->userSlotID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifSubSegmentInfo_userSlotID_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NifSubSegmentInfo *arg1 = (nifly::NifSubSegmentInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NifSubSegmentInfo *)jarg1; 
  result = (uint32_t) ((arg1)->userSlotID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSubSegmentInfo_material_set(void * jarg1, unsigned int jarg2) {
  nifly::NifSubSegmentInfo *arg1 = (nifly::NifSubSegmentInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NifSubSegmentInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifSubSegmentInfo_material_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NifSubSegmentInfo *arg1 = (nifly::NifSubSegmentInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NifSubSegmentInfo *)jarg1; 
  result = (uint32_t) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSubSegmentInfo_extraData_set(void * jarg1, void * jarg2) {
  nifly::NifSubSegmentInfo *arg1 = (nifly::NifSubSegmentInfo *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (nifly::NifSubSegmentInfo *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->extraData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifSubSegmentInfo_extraData_get(void * jarg1) {
  void * jresult ;
  nifly::NifSubSegmentInfo *arg1 = (nifly::NifSubSegmentInfo *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (nifly::NifSubSegmentInfo *)jarg1; 
  result = (std::vector< float > *)& ((arg1)->extraData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifSubSegmentInfo() {
  void * jresult ;
  nifly::NifSubSegmentInfo *result = 0 ;
  
  result = (nifly::NifSubSegmentInfo *)new nifly::NifSubSegmentInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NifSubSegmentInfo(void * jarg1) {
  nifly::NifSubSegmentInfo *arg1 = (nifly::NifSubSegmentInfo *) 0 ;
  
  arg1 = (nifly::NifSubSegmentInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSegmentInfo_partID_set(void * jarg1, int jarg2) {
  nifly::NifSegmentInfo *arg1 = (nifly::NifSegmentInfo *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NifSegmentInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->partID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifSegmentInfo_partID_get(void * jarg1) {
  int jresult ;
  nifly::NifSegmentInfo *arg1 = (nifly::NifSegmentInfo *) 0 ;
  int result;
  
  arg1 = (nifly::NifSegmentInfo *)jarg1; 
  result = (int) ((arg1)->partID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSegmentInfo_subs_set(void * jarg1, void * jarg2) {
  nifly::NifSegmentInfo *arg1 = (nifly::NifSegmentInfo *) 0 ;
  std::vector< nifly::NifSubSegmentInfo > *arg2 = (std::vector< nifly::NifSubSegmentInfo > *) 0 ;
  
  arg1 = (nifly::NifSegmentInfo *)jarg1; 
  arg2 = (std::vector< nifly::NifSubSegmentInfo > *)jarg2; 
  if (arg1) (arg1)->subs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifSegmentInfo_subs_get(void * jarg1) {
  void * jresult ;
  nifly::NifSegmentInfo *arg1 = (nifly::NifSegmentInfo *) 0 ;
  std::vector< nifly::NifSubSegmentInfo > *result = 0 ;
  
  arg1 = (nifly::NifSegmentInfo *)jarg1; 
  result = (std::vector< nifly::NifSubSegmentInfo > *)& ((arg1)->subs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifSegmentInfo() {
  void * jresult ;
  nifly::NifSegmentInfo *result = 0 ;
  
  result = (nifly::NifSegmentInfo *)new nifly::NifSegmentInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NifSegmentInfo(void * jarg1) {
  nifly::NifSegmentInfo *arg1 = (nifly::NifSegmentInfo *) 0 ;
  
  arg1 = (nifly::NifSegmentInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSegmentationInfo_segs_set(void * jarg1, void * jarg2) {
  nifly::NifSegmentationInfo *arg1 = (nifly::NifSegmentationInfo *) 0 ;
  std::vector< nifly::NifSegmentInfo > *arg2 = (std::vector< nifly::NifSegmentInfo > *) 0 ;
  
  arg1 = (nifly::NifSegmentationInfo *)jarg1; 
  arg2 = (std::vector< nifly::NifSegmentInfo > *)jarg2; 
  if (arg1) (arg1)->segs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifSegmentationInfo_segs_get(void * jarg1) {
  void * jresult ;
  nifly::NifSegmentationInfo *arg1 = (nifly::NifSegmentationInfo *) 0 ;
  std::vector< nifly::NifSegmentInfo > *result = 0 ;
  
  arg1 = (nifly::NifSegmentationInfo *)jarg1; 
  result = (std::vector< nifly::NifSegmentInfo > *)& ((arg1)->segs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSegmentationInfo_ssfFile_set(void * jarg1, char * jarg2) {
  nifly::NifSegmentationInfo *arg1 = (nifly::NifSegmentationInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (nifly::NifSegmentationInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ssfFile = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NifSegmentationInfo_ssfFile_get(void * jarg1) {
  char * jresult ;
  nifly::NifSegmentationInfo *arg1 = (nifly::NifSegmentationInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (nifly::NifSegmentationInfo *)jarg1; 
  result = (std::string *) & ((arg1)->ssfFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifSegmentationInfo() {
  void * jresult ;
  nifly::NifSegmentationInfo *result = 0 ;
  
  result = (nifly::NifSegmentationInfo *)new nifly::NifSegmentationInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NifSegmentationInfo(void * jarg1) {
  nifly::NifSegmentationInfo *arg1 = (nifly::NifSegmentationInfo *) 0 ;
  
  arg1 = (nifly::NifSegmentationInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSGeometrySegmentData_flags_set(void * jarg1, unsigned char jarg2) {
  nifly::BSGeometrySegmentData *arg1 = (nifly::BSGeometrySegmentData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BSGeometrySegmentData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BSGeometrySegmentData_flags_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BSGeometrySegmentData *arg1 = (nifly::BSGeometrySegmentData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BSGeometrySegmentData *)jarg1; 
  result = (uint8_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSGeometrySegmentData_index_set(void * jarg1, unsigned int jarg2) {
  nifly::BSGeometrySegmentData *arg1 = (nifly::BSGeometrySegmentData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSGeometrySegmentData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSGeometrySegmentData_index_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSGeometrySegmentData *arg1 = (nifly::BSGeometrySegmentData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSGeometrySegmentData *)jarg1; 
  result = (uint32_t) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSGeometrySegmentData_numTris_set(void * jarg1, unsigned int jarg2) {
  nifly::BSGeometrySegmentData *arg1 = (nifly::BSGeometrySegmentData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSGeometrySegmentData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numTris = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSGeometrySegmentData_numTris_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSGeometrySegmentData *arg1 = (nifly::BSGeometrySegmentData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSGeometrySegmentData *)jarg1; 
  result = (uint32_t) ((arg1)->numTris);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSGeometrySegmentData_Sync(void * jarg1, void * jarg2) {
  nifly::BSGeometrySegmentData *arg1 = (nifly::BSGeometrySegmentData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSGeometrySegmentData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSGeometrySegmentData() {
  void * jresult ;
  nifly::BSGeometrySegmentData *result = 0 ;
  
  result = (nifly::BSGeometrySegmentData *)new nifly::BSGeometrySegmentData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSGeometrySegmentData(void * jarg1) {
  nifly::BSGeometrySegmentData *arg1 = (nifly::BSGeometrySegmentData *) 0 ;
  
  arg1 = (nifly::BSGeometrySegmentData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegment_startIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->startIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegment_startIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)jarg1; 
  result = (uint32_t) ((arg1)->startIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegment_numPrimitives_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numPrimitives = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegment_numPrimitives_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)jarg1; 
  result = (uint32_t) ((arg1)->numPrimitives);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegment_arrayIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->arrayIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegment_arrayIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)jarg1; 
  result = (uint32_t) ((arg1)->arrayIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegment_unkInt1_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unkInt1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegment_unkInt1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)jarg1; 
  result = (uint32_t) ((arg1)->unkInt1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSubIndexTriShape_BSSITSSubSegment() {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegment *result = 0 ;
  
  result = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)new nifly::BSSubIndexTriShape::BSSITSSubSegment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSubIndexTriShape_BSSITSSubSegment(void * jarg1) {
  nifly::BSSubIndexTriShape::BSSITSSubSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_startIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->startIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_startIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  result = (uint32_t) ((arg1)->startIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_numPrimitives_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numPrimitives = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_numPrimitives_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  result = (uint32_t) ((arg1)->numPrimitives);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_parentArrayIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->parentArrayIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_parentArrayIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  result = (uint32_t) ((arg1)->parentArrayIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_numSubSegments_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numSubSegments = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_numSubSegments_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  result = (uint32_t) ((arg1)->numSubSegments);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_subSegments_set(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegment > *arg2 = (std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegment > *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  arg2 = (std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegment > *)jarg2; 
  if (arg1) (arg1)->subSegments = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegment_subSegments_get(void * jarg1) {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegment > *result = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  result = (std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegment > *)& ((arg1)->subSegments);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSubIndexTriShape_BSSITSSegment() {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegment *result = 0 ;
  
  result = (nifly::BSSubIndexTriShape::BSSITSSegment *)new nifly::BSSubIndexTriShape::BSSITSSegment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSubIndexTriShape_BSSITSSegment(void * jarg1) {
  nifly::BSSubIndexTriShape::BSSITSSegment *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentDataRecord_userSlotID_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->userSlotID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentDataRecord_userSlotID_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)jarg1; 
  result = (uint32_t) ((arg1)->userSlotID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentDataRecord_material_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentDataRecord_material_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)jarg1; 
  result = (uint32_t) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentDataRecord_numData_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentDataRecord_numData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)jarg1; 
  result = (uint32_t) ((arg1)->numData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentDataRecord_extraData_set(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->extraData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentDataRecord_extraData_get(void * jarg1) {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)jarg1; 
  result = (std::vector< float > *)& ((arg1)->extraData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSubIndexTriShape_BSSITSSubSegmentDataRecord() {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *result = 0 ;
  
  result = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)new nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSubIndexTriShape_BSSITSSubSegmentDataRecord(void * jarg1) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_numSegments_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numSegments = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_numSegments_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  result = (uint32_t) ((arg1)->numSegments);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_numTotalSegments_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numTotalSegments = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_numTotalSegments_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  result = (uint32_t) ((arg1)->numTotalSegments);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_arrayIndices_set(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  std::vector< uint32_t > *arg2 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->arrayIndices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_arrayIndices_get(void * jarg1) {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  result = (std::vector< uint32_t > *)& ((arg1)->arrayIndices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_dataRecords_set(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord > *arg2 = (std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord > *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  arg2 = (std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord > *)jarg2; 
  if (arg1) (arg1)->dataRecords = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_dataRecords_get(void * jarg1) {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord > *result = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  result = (std::vector< nifly::BSSubIndexTriShape::BSSITSSubSegmentDataRecord > *)& ((arg1)->dataRecords);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_ssfFile_set(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->ssfFile = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSubSegmentData_ssfFile_get(void * jarg1) {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->ssfFile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSubIndexTriShape_BSSITSSubSegmentData() {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *result = 0 ;
  
  result = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)new nifly::BSSubIndexTriShape::BSSITSSubSegmentData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSubIndexTriShape_BSSITSSubSegmentData(void * jarg1) {
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_numPrimitives_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numPrimitives = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_numPrimitives_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  result = (uint32_t) ((arg1)->numPrimitives);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_numSegments_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numSegments = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_numSegments_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  result = (uint32_t) ((arg1)->numSegments);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_numTotalSegments_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numTotalSegments = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_numTotalSegments_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  result = (uint32_t) ((arg1)->numTotalSegments);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_segments_set(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  std::vector< nifly::BSSubIndexTriShape::BSSITSSegment > *arg2 = (std::vector< nifly::BSSubIndexTriShape::BSSITSSegment > *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  arg2 = (std::vector< nifly::BSSubIndexTriShape::BSSITSSegment > *)jarg2; 
  if (arg1) (arg1)->segments = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_segments_get(void * jarg1) {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  std::vector< nifly::BSSubIndexTriShape::BSSITSSegment > *result = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  result = (std::vector< nifly::BSSubIndexTriShape::BSSITSSegment > *)& ((arg1)->segments);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_subSegmentData_set(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *arg2 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  arg2 = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)jarg2; 
  if (arg1) (arg1)->subSegmentData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BSSITSSegmentation_subSegmentData_get(void * jarg1) {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  nifly::BSSubIndexTriShape::BSSITSSubSegmentData *result = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  result = (nifly::BSSubIndexTriShape::BSSITSSubSegmentData *)& ((arg1)->subSegmentData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSubIndexTriShape_BSSITSSegmentation() {
  void * jresult ;
  nifly::BSSubIndexTriShape::BSSITSSegmentation *result = 0 ;
  
  result = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)new nifly::BSSubIndexTriShape::BSSITSSegmentation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSubIndexTriShape_BSSITSSegmentation(void * jarg1) {
  nifly::BSSubIndexTriShape::BSSITSSegmentation *arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape::BSSITSSegmentation *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSSubIndexTriShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_Sync(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_GetSegments(void * jarg1) {
  void * jresult ;
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  SwigValueWrapper< std::vector< nifly::BSGeometrySegmentData > > result;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  result = ((nifly::BSSubIndexTriShape const *)arg1)->GetSegments();
  jresult = new std::vector< nifly::BSGeometrySegmentData >((const std::vector< nifly::BSGeometrySegmentData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_SetSegments(void * jarg1, void * jarg2) {
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  std::vector< nifly::BSGeometrySegmentData > *arg2 = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  arg2 = (std::vector< nifly::BSGeometrySegmentData > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSGeometrySegmentData > const & type is null", 0);
    return ;
  } 
  (arg1)->SetSegments((std::vector< nifly::BSGeometrySegmentData > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_GetSegmentation(void * jarg1, void * jarg2, void * jarg3) {
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  nifly::NifSegmentationInfo *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  arg2 = (nifly::NifSegmentationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifSegmentationInfo & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  ((nifly::BSSubIndexTriShape const *)arg1)->GetSegmentation(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_SetSegmentation(void * jarg1, void * jarg2, void * jarg3) {
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  nifly::NifSegmentationInfo *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  arg2 = (nifly::NifSegmentationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifSegmentationInfo const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->SetSegmentation((nifly::NifSegmentationInfo const &)*arg2,(std::vector< int > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_SetDefaultSegments(void * jarg1) {
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  (arg1)->SetDefaultSegments();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_Create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::vector< nifly::Triangle > *arg4 = (std::vector< nifly::Triangle > *) 0 ;
  std::vector< nifly::Vector2 > *arg5 = (std::vector< nifly::Vector2 > *) 0 ;
  std::vector< nifly::Vector3 > *arg6 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::vector< nifly::Triangle > *)jarg4; 
  arg5 = (std::vector< nifly::Vector2 > *)jarg5; 
  arg6 = (std::vector< nifly::Vector3 > *)jarg6; 
  (arg1)->Create(*arg2,(std::vector< nifly::Vector3 > const *)arg3,(std::vector< nifly::Triangle > const *)arg4,(std::vector< nifly::Vector2 > const *)arg5,(std::vector< nifly::Vector3 > const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSubIndexTriShape_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::vector< nifly::Triangle > *arg4 = (std::vector< nifly::Triangle > *) 0 ;
  std::vector< nifly::Vector2 > *arg5 = (std::vector< nifly::Vector2 > *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::vector< nifly::Triangle > *)jarg4; 
  arg5 = (std::vector< nifly::Vector2 > *)jarg5; 
  (arg1)->Create(*arg2,(std::vector< nifly::Vector3 > const *)arg3,(std::vector< nifly::Triangle > const *)arg4,(std::vector< nifly::Vector2 > const *)arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSubIndexTriShape() {
  void * jresult ;
  nifly::BSSubIndexTriShape *result = 0 ;
  
  result = (nifly::BSSubIndexTriShape *)new nifly::BSSubIndexTriShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSubIndexTriShape(void * jarg1) {
  nifly::BSSubIndexTriShape *arg1 = (nifly::BSSubIndexTriShape *) 0 ;
  
  arg1 = (nifly::BSSubIndexTriShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_lodSize0_set(void * jarg1, unsigned int jarg2) {
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->lodSize0 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_lodSize0_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->lodSize0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_lodSize1_set(void * jarg1, unsigned int jarg2) {
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->lodSize1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_lodSize1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->lodSize1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_lodSize2_set(void * jarg1, unsigned int jarg2) {
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->lodSize2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_lodSize2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->lodSize2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSMeshLODTriShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_Sync(void * jarg1, void * jarg2) {
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMeshLODTriShape_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSMeshLODTriShape() {
  void * jresult ;
  nifly::BSMeshLODTriShape *result = 0 ;
  
  result = (nifly::BSMeshLODTriShape *)new nifly::BSMeshLODTriShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSMeshLODTriShape(void * jarg1) {
  nifly::BSMeshLODTriShape *arg1 = (nifly::BSMeshLODTriShape *) 0 ;
  
  arg1 = (nifly::BSMeshLODTriShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_dynamicDataSize_set(void * jarg1, unsigned int jarg2) {
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->dynamicDataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_dynamicDataSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->dynamicDataSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_dynamicData_set(void * jarg1, void * jarg2) {
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  std::vector< nifly::Vector4 > *arg2 = (std::vector< nifly::Vector4 > *) 0 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  arg2 = (std::vector< nifly::Vector4 > *)jarg2; 
  if (arg1) (arg1)->dynamicData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_dynamicData_get(void * jarg1) {
  void * jresult ;
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  std::vector< nifly::Vector4 > *result = 0 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  result = (std::vector< nifly::Vector4 > *)& ((arg1)->dynamicData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSDynamicTriShape() {
  void * jresult ;
  nifly::BSDynamicTriShape *result = 0 ;
  
  result = (nifly::BSDynamicTriShape *)new nifly::BSDynamicTriShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSDynamicTriShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_Sync(void * jarg1, void * jarg2) {
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_CalcDynamicData(void * jarg1) {
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  (arg1)->CalcDynamicData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_Create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::vector< nifly::Triangle > *arg4 = (std::vector< nifly::Triangle > *) 0 ;
  std::vector< nifly::Vector2 > *arg5 = (std::vector< nifly::Vector2 > *) 0 ;
  std::vector< nifly::Vector3 > *arg6 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::vector< nifly::Triangle > *)jarg4; 
  arg5 = (std::vector< nifly::Vector2 > *)jarg5; 
  arg6 = (std::vector< nifly::Vector3 > *)jarg6; 
  (arg1)->Create(*arg2,(std::vector< nifly::Vector3 > const *)arg3,(std::vector< nifly::Triangle > const *)arg4,(std::vector< nifly::Vector2 > const *)arg5,(std::vector< nifly::Vector3 > const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDynamicTriShape_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::vector< nifly::Triangle > *arg4 = (std::vector< nifly::Triangle > *) 0 ;
  std::vector< nifly::Vector2 > *arg5 = (std::vector< nifly::Vector2 > *) 0 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::vector< nifly::Triangle > *)jarg4; 
  arg5 = (std::vector< nifly::Vector2 > *)jarg5; 
  (arg1)->Create(*arg2,(std::vector< nifly::Vector3 > const *)arg3,(std::vector< nifly::Triangle > const *)arg4,(std::vector< nifly::Vector2 > const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSDynamicTriShape(void * jarg1) {
  nifly::BSDynamicTriShape *arg1 = (nifly::BSDynamicTriShape *) 0 ;
  
  arg1 = (nifly::BSDynamicTriShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MaterialInfo_nameRef_set(void * jarg1, void * jarg2) {
  nifly::MaterialInfo *arg1 = (nifly::MaterialInfo *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::MaterialInfo *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->nameRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MaterialInfo_nameRef_get(void * jarg1) {
  void * jresult ;
  nifly::MaterialInfo *arg1 = (nifly::MaterialInfo *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::MaterialInfo *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->nameRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MaterialInfo_extraData_set(void * jarg1, unsigned int jarg2) {
  nifly::MaterialInfo *arg1 = (nifly::MaterialInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::MaterialInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->extraData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_MaterialInfo_extraData_get(void * jarg1) {
  unsigned int jresult ;
  nifly::MaterialInfo *arg1 = (nifly::MaterialInfo *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::MaterialInfo *)jarg1; 
  result = (uint32_t) ((arg1)->extraData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_MaterialInfo() {
  void * jresult ;
  nifly::MaterialInfo *result = 0 ;
  
  result = (nifly::MaterialInfo *)new nifly::MaterialInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_MaterialInfo(void * jarg1) {
  nifly::MaterialInfo *arg1 = (nifly::MaterialInfo *) 0 ;
  
  arg1 = (nifly::MaterialInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_activeMaterial_set(void * jarg1, int jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->activeMaterial = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiGeometry_activeMaterial_get(void * jarg1) {
  int jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  int result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (int) ((arg1)->activeMaterial);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_defaultMatNeedsUpdateFlag_set(void * jarg1, unsigned char jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->defaultMatNeedsUpdateFlag = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiGeometry_defaultMatNeedsUpdateFlag_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (uint8_t) ((arg1)->defaultMatNeedsUpdateFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_shader_set(void * jarg1, unsigned int jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->shader = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometry_shader_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (bool) ((arg1)->shader);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_shaderName_set(void * jarg1, void * jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->shaderName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometry_shaderName_get(void * jarg1) {
  void * jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->shaderName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_implementation_set(void * jarg1, unsigned int jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->implementation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometry_implementation_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (uint32_t) ((arg1)->implementation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_Sync(void * jarg1, void * jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometry_IsSkinned(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (bool)((nifly::NiGeometry const *)arg1)->IsSkinned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometry_GetMaterials(void * jarg1) {
  void * jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  SwigValueWrapper< std::vector< nifly::MaterialInfo > > result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = ((nifly::NiGeometry const *)arg1)->GetMaterials();
  jresult = new std::vector< nifly::MaterialInfo >((const std::vector< nifly::MaterialInfo > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiGeometry_SetMaterials(void * jarg1, void * jarg2) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  std::vector< nifly::MaterialInfo > *arg2 = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  arg2 = (std::vector< nifly::MaterialInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::MaterialInfo > const & type is null", 0);
    return ;
  } 
  (arg1)->SetMaterials((std::vector< nifly::MaterialInfo > const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometry_HasData(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (bool)((nifly::NiGeometry const *)arg1)->HasData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometry_DataRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  nifly::NiBlockRef< nifly::NiGeometryData > *result = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiGeometryData > *)(arg1)->DataRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometry_HasSkinInstance(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (bool)((nifly::NiGeometry const *)arg1)->HasSkinInstance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometry_SkinInstanceRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  nifly::NiBlockRef< NiBoneContainer > *result = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (nifly::NiBlockRef< NiBoneContainer > *)(arg1)->SkinInstanceRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometry_HasShaderProperty(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (bool)((nifly::NiGeometry const *)arg1)->HasShaderProperty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometry_ShaderPropertyRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  nifly::NiBlockRef< NiShader > *result = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (nifly::NiBlockRef< NiShader > *)(arg1)->ShaderPropertyRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiGeometry_HasAlphaProperty(void * jarg1) {
  unsigned int jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  bool result;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (bool)((nifly::NiGeometry const *)arg1)->HasAlphaProperty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiGeometry_AlphaPropertyRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  nifly::NiBlockRef< NiAlphaProperty > *result = 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  result = (nifly::NiBlockRef< NiAlphaProperty > *)(arg1)->AlphaPropertyRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiGeometry() {
  void * jresult ;
  nifly::NiGeometry *result = 0 ;
  
  result = (nifly::NiGeometry *)new nifly::NiGeometry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiGeometry(void * jarg1) {
  nifly::NiGeometry *arg1 = (nifly::NiGeometry *) 0 ;
  
  arg1 = (nifly::NiGeometry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTriBasedGeom() {
  void * jresult ;
  nifly::NiTriBasedGeom *result = 0 ;
  
  result = (nifly::NiTriBasedGeom *)new nifly::NiTriBasedGeom();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTriBasedGeom(void * jarg1) {
  nifly::NiTriBasedGeom *arg1 = (nifly::NiTriBasedGeom *) 0 ;
  
  arg1 = (nifly::NiTriBasedGeom *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriBasedGeomData_Sync(void * jarg1, void * jarg2) {
  nifly::NiTriBasedGeomData *arg1 = (nifly::NiTriBasedGeomData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiTriBasedGeomData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriBasedGeomData_Create(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  nifly::NiTriBasedGeomData *arg1 = (nifly::NiTriBasedGeomData *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::vector< nifly::Triangle > *arg4 = (std::vector< nifly::Triangle > *) 0 ;
  std::vector< nifly::Vector2 > *arg5 = (std::vector< nifly::Vector2 > *) 0 ;
  std::vector< nifly::Vector3 > *arg6 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::NiTriBasedGeomData *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::vector< nifly::Triangle > *)jarg4; 
  arg5 = (std::vector< nifly::Vector2 > *)jarg5; 
  arg6 = (std::vector< nifly::Vector3 > *)jarg6; 
  (arg1)->Create(*arg2,(std::vector< nifly::Vector3 > const *)arg3,(std::vector< nifly::Triangle > const *)arg4,(std::vector< nifly::Vector2 > const *)arg5,(std::vector< nifly::Vector3 > const *)arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTriBasedGeomData() {
  void * jresult ;
  nifly::NiTriBasedGeomData *result = 0 ;
  
  result = (nifly::NiTriBasedGeomData *)new nifly::NiTriBasedGeomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTriBasedGeomData(void * jarg1) {
  nifly::NiTriBasedGeomData *arg1 = (nifly::NiTriBasedGeomData *) 0 ;
  
  arg1 = (nifly::NiTriBasedGeomData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MatchGroup_count_set(void * jarg1, unsigned short jarg2) {
  nifly::MatchGroup *arg1 = (nifly::MatchGroup *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::MatchGroup *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_MatchGroup_count_get(void * jarg1) {
  unsigned short jresult ;
  nifly::MatchGroup *arg1 = (nifly::MatchGroup *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::MatchGroup *)jarg1; 
  result = (uint16_t) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MatchGroup_matches_set(void * jarg1, void * jarg2) {
  nifly::MatchGroup *arg1 = (nifly::MatchGroup *) 0 ;
  std::vector< uint16_t > *arg2 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (nifly::MatchGroup *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2; 
  if (arg1) (arg1)->matches = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MatchGroup_matches_get(void * jarg1) {
  void * jresult ;
  nifly::MatchGroup *arg1 = (nifly::MatchGroup *) 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (nifly::MatchGroup *)jarg1; 
  result = (std::vector< uint16_t > *)& ((arg1)->matches);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_MatchGroup() {
  void * jresult ;
  nifly::MatchGroup *result = 0 ;
  
  result = (nifly::MatchGroup *)new nifly::MatchGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_MatchGroup(void * jarg1) {
  nifly::MatchGroup *arg1 = (nifly::MatchGroup *) 0 ;
  
  arg1 = (nifly::MatchGroup *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTriShapeData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTriShapeData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTriShapeData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShapeData_Sync(void * jarg1, void * jarg2) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShapeData_Create(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::vector< nifly::Triangle > *arg4 = (std::vector< nifly::Triangle > *) 0 ;
  std::vector< nifly::Vector2 > *arg5 = (std::vector< nifly::Vector2 > *) 0 ;
  std::vector< nifly::Vector3 > *arg6 = (std::vector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::vector< nifly::Triangle > *)jarg4; 
  arg5 = (std::vector< nifly::Vector2 > *)jarg5; 
  arg6 = (std::vector< nifly::Vector3 > *)jarg6; 
  (arg1)->Create(*arg2,(std::vector< nifly::Vector3 > const *)arg3,(std::vector< nifly::Triangle > const *)arg4,(std::vector< nifly::Vector2 > const *)arg5,(std::vector< nifly::Vector3 > const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShapeData_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTriShapeData_GetMatchGroups(void * jarg1) {
  void * jresult ;
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  SwigValueWrapper< std::vector< nifly::MatchGroup > > result;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  result = ((nifly::NiTriShapeData const *)arg1)->GetMatchGroups();
  jresult = new std::vector< nifly::MatchGroup >((const std::vector< nifly::MatchGroup > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShapeData_SetMatchGroups(void * jarg1, void * jarg2) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  std::vector< nifly::MatchGroup > *arg2 = 0 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  arg2 = (std::vector< nifly::MatchGroup > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::MatchGroup > const & type is null", 0);
    return ;
  } 
  (arg1)->SetMatchGroups((std::vector< nifly::MatchGroup > const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTriShapeData_GetNumTriangles(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  result = (uint32_t)((nifly::NiTriShapeData const *)arg1)->GetNumTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTriShapeData_GetTriangles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NiTriShapeData const *)arg1)->GetTriangles(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShapeData_SetTriangles(void * jarg1, void * jarg2) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > const & type is null", 0);
    return ;
  } 
  (arg1)->SetTriangles((std::vector< nifly::Triangle > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShapeData_RecalcNormals__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  bool arg2 ;
  float arg3 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  (arg1)->RecalcNormals(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShapeData_RecalcNormals__SWIG_1(void * jarg1, unsigned int jarg2) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RecalcNormals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShapeData_RecalcNormals__SWIG_2(void * jarg1) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  (arg1)->RecalcNormals();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShapeData_CalcTangentSpace(void * jarg1) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  (arg1)->CalcTangentSpace();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTriShapeData() {
  void * jresult ;
  nifly::NiTriShapeData *result = 0 ;
  
  result = (nifly::NiTriShapeData *)new nifly::NiTriShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTriShapeData(void * jarg1) {
  nifly::NiTriShapeData *arg1 = (nifly::NiTriShapeData *) 0 ;
  
  arg1 = (nifly::NiTriShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTriShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTriShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTriShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTriShape *arg1 = (nifly::NiTriShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTriShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTriShape_GetGeomData(void * jarg1) {
  void * jresult ;
  nifly::NiTriShape *arg1 = (nifly::NiTriShape *) 0 ;
  nifly::NiGeometryData *result = 0 ;
  
  arg1 = (nifly::NiTriShape *)jarg1; 
  result = (nifly::NiGeometryData *)((nifly::NiTriShape const *)arg1)->GetGeomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriShape_SetGeomData(void * jarg1, void * jarg2) {
  nifly::NiTriShape *arg1 = (nifly::NiTriShape *) 0 ;
  nifly::NiGeometryData *arg2 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::NiTriShape *)jarg1; 
  arg2 = (nifly::NiGeometryData *)jarg2; 
  (arg1)->SetGeomData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTriShape() {
  void * jresult ;
  nifly::NiTriShape *result = 0 ;
  
  result = (nifly::NiTriShape *)new nifly::NiTriShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTriShape(void * jarg1) {
  nifly::NiTriShape *arg1 = (nifly::NiTriShape *) 0 ;
  
  arg1 = (nifly::NiTriShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StripsInfo_stripLengths_set(void * jarg1, void * jarg2) {
  nifly::StripsInfo *arg1 = (nifly::StripsInfo *) 0 ;
  nifly::NiVector< uint16_t,uint16_t > *arg2 = (nifly::NiVector< uint16_t,uint16_t > *) 0 ;
  
  arg1 = (nifly::StripsInfo *)jarg1; 
  arg2 = (nifly::NiVector< uint16_t,uint16_t > *)jarg2; 
  if (arg1) (arg1)->stripLengths = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StripsInfo_stripLengths_get(void * jarg1) {
  void * jresult ;
  nifly::StripsInfo *arg1 = (nifly::StripsInfo *) 0 ;
  nifly::NiVector< uint16_t,uint16_t > *result = 0 ;
  
  arg1 = (nifly::StripsInfo *)jarg1; 
  result = (nifly::NiVector< uint16_t,uint16_t > *)& ((arg1)->stripLengths);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StripsInfo_hasPoints_set(void * jarg1, unsigned int jarg2) {
  nifly::StripsInfo *arg1 = (nifly::StripsInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::StripsInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasPoints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_StripsInfo_hasPoints_get(void * jarg1) {
  unsigned int jresult ;
  nifly::StripsInfo *arg1 = (nifly::StripsInfo *) 0 ;
  bool result;
  
  arg1 = (nifly::StripsInfo *)jarg1; 
  result = (bool) ((arg1)->hasPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StripsInfo_points_set(void * jarg1, void * jarg2) {
  nifly::StripsInfo *arg1 = (nifly::StripsInfo *) 0 ;
  std::vector< std::vector< uint16_t > > *arg2 = (std::vector< std::vector< uint16_t > > *) 0 ;
  
  arg1 = (nifly::StripsInfo *)jarg1; 
  arg2 = (std::vector< std::vector< uint16_t > > *)jarg2; 
  if (arg1) (arg1)->points = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StripsInfo_points_get(void * jarg1) {
  void * jresult ;
  nifly::StripsInfo *arg1 = (nifly::StripsInfo *) 0 ;
  std::vector< std::vector< uint16_t > > *result = 0 ;
  
  arg1 = (nifly::StripsInfo *)jarg1; 
  result = (std::vector< std::vector< uint16_t > > *)& ((arg1)->points);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StripsInfo_Sync(void * jarg1, void * jarg2) {
  nifly::StripsInfo *arg1 = (nifly::StripsInfo *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::StripsInfo *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_StripsInfo() {
  void * jresult ;
  nifly::StripsInfo *result = 0 ;
  
  result = (nifly::StripsInfo *)new nifly::StripsInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_StripsInfo(void * jarg1) {
  nifly::StripsInfo *arg1 = (nifly::StripsInfo *) 0 ;
  
  arg1 = (nifly::StripsInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriStripsData_stripsInfo_set(void * jarg1, void * jarg2) {
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  nifly::StripsInfo *arg2 = (nifly::StripsInfo *) 0 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  arg2 = (nifly::StripsInfo *)jarg2; 
  if (arg1) (arg1)->stripsInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTriStripsData_stripsInfo_get(void * jarg1) {
  void * jresult ;
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  nifly::StripsInfo *result = 0 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  result = (nifly::StripsInfo *)& ((arg1)->stripsInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTriStripsData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTriStripsData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTriStripsData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriStripsData_Sync(void * jarg1, void * jarg2) {
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriStripsData_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTriStripsData_GetNumTriangles(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  result = (uint32_t)((nifly::NiTriStripsData const *)arg1)->GetNumTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTriStripsData_GetTriangles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NiTriStripsData const *)arg1)->GetTriangles(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriStripsData_SetTriangles(void * jarg1, void * jarg2) {
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > const & type is null", 0);
    return ;
  } 
  (arg1)->SetTriangles((std::vector< nifly::Triangle > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTriStripsData_StripsToTris(void * jarg1) {
  void * jresult ;
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  SwigValueWrapper< std::vector< nifly::Triangle > > result;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  result = ((nifly::NiTriStripsData const *)arg1)->StripsToTris();
  jresult = new std::vector< nifly::Triangle >((const std::vector< nifly::Triangle > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriStripsData_RecalcNormals__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3) {
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  bool arg2 ;
  float arg3 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  (arg1)->RecalcNormals(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriStripsData_RecalcNormals__SWIG_1(void * jarg1, unsigned int jarg2) {
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RecalcNormals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriStripsData_RecalcNormals__SWIG_2(void * jarg1) {
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  (arg1)->RecalcNormals();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriStripsData_CalcTangentSpace(void * jarg1) {
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  (arg1)->CalcTangentSpace();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTriStripsData() {
  void * jresult ;
  nifly::NiTriStripsData *result = 0 ;
  
  result = (nifly::NiTriStripsData *)new nifly::NiTriStripsData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTriStripsData(void * jarg1) {
  nifly::NiTriStripsData *arg1 = (nifly::NiTriStripsData *) 0 ;
  
  arg1 = (nifly::NiTriStripsData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTriStrips_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTriStrips::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTriStrips_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTriStrips *arg1 = (nifly::NiTriStrips *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTriStrips *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTriStrips_GetGeomData(void * jarg1) {
  void * jresult ;
  nifly::NiTriStrips *arg1 = (nifly::NiTriStrips *) 0 ;
  nifly::NiGeometryData *result = 0 ;
  
  arg1 = (nifly::NiTriStrips *)jarg1; 
  result = (nifly::NiGeometryData *)((nifly::NiTriStrips const *)arg1)->GetGeomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTriStrips_SetGeomData(void * jarg1, void * jarg2) {
  nifly::NiTriStrips *arg1 = (nifly::NiTriStrips *) 0 ;
  nifly::NiGeometryData *arg2 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::NiTriStrips *)jarg1; 
  arg2 = (nifly::NiGeometryData *)jarg2; 
  (arg1)->SetGeomData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTriStrips_ReorderTriangles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::NiTriStrips *arg1 = (nifly::NiTriStrips *) 0 ;
  std::vector< uint32_t > *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::NiTriStrips *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32_t > const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->ReorderTriangles((std::vector< uint32_t > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTriStrips() {
  void * jresult ;
  nifly::NiTriStrips *result = 0 ;
  
  result = (nifly::NiTriStrips *)new nifly::NiTriStrips();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTriStrips(void * jarg1) {
  nifly::NiTriStrips *arg1 = (nifly::NiTriStrips *) 0 ;
  
  arg1 = (nifly::NiTriStrips *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLinesData_lineFlags_set(void * jarg1, void * jarg2) {
  nifly::NiLinesData *arg1 = (nifly::NiLinesData *) 0 ;
  std::deque< bool > arg2 ;
  std::deque< bool > *argp2 ;
  
  arg1 = (nifly::NiLinesData *)jarg1; 
  argp2 = (std::deque< bool > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::deque< bool >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->lineFlags = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLinesData_lineFlags_get(void * jarg1) {
  void * jresult ;
  nifly::NiLinesData *arg1 = (nifly::NiLinesData *) 0 ;
  std::deque< bool > result;
  
  arg1 = (nifly::NiLinesData *)jarg1; 
  result =  ((arg1)->lineFlags);
  jresult = new std::deque< bool >((const std::deque< bool > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLinesData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiLinesData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLinesData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiLinesData *arg1 = (nifly::NiLinesData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiLinesData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLinesData_Sync(void * jarg1, void * jarg2) {
  nifly::NiLinesData *arg1 = (nifly::NiLinesData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiLinesData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLinesData_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::NiLinesData *arg1 = (nifly::NiLinesData *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::NiLinesData *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLinesData() {
  void * jresult ;
  nifly::NiLinesData *result = 0 ;
  
  result = (nifly::NiLinesData *)new nifly::NiLinesData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLinesData(void * jarg1) {
  nifly::NiLinesData *arg1 = (nifly::NiLinesData *) 0 ;
  
  arg1 = (nifly::NiLinesData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLines_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiLines::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiLines_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiLines *arg1 = (nifly::NiLines *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiLines *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiLines_GetGeomData(void * jarg1) {
  void * jresult ;
  nifly::NiLines *arg1 = (nifly::NiLines *) 0 ;
  nifly::NiGeometryData *result = 0 ;
  
  arg1 = (nifly::NiLines *)jarg1; 
  result = (nifly::NiGeometryData *)((nifly::NiLines const *)arg1)->GetGeomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiLines_SetGeomData(void * jarg1, void * jarg2) {
  nifly::NiLines *arg1 = (nifly::NiLines *) 0 ;
  nifly::NiGeometryData *arg2 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::NiLines *)jarg1; 
  arg2 = (nifly::NiGeometryData *)jarg2; 
  (arg1)->SetGeomData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiLines() {
  void * jresult ;
  nifly::NiLines *result = 0 ;
  
  result = (nifly::NiLines *)new nifly::NiLines();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiLines(void * jarg1) {
  nifly::NiLines *arg1 = (nifly::NiLines *) 0 ;
  
  arg1 = (nifly::NiLines *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PolygonInfo_numVertices_set(void * jarg1, unsigned short jarg2) {
  nifly::PolygonInfo *arg1 = (nifly::PolygonInfo *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::PolygonInfo *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_PolygonInfo_numVertices_get(void * jarg1) {
  unsigned short jresult ;
  nifly::PolygonInfo *arg1 = (nifly::PolygonInfo *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::PolygonInfo *)jarg1; 
  result = (uint16_t) ((arg1)->numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PolygonInfo_vertexOffset_set(void * jarg1, unsigned short jarg2) {
  nifly::PolygonInfo *arg1 = (nifly::PolygonInfo *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::PolygonInfo *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->vertexOffset = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_PolygonInfo_vertexOffset_get(void * jarg1) {
  unsigned short jresult ;
  nifly::PolygonInfo *arg1 = (nifly::PolygonInfo *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::PolygonInfo *)jarg1; 
  result = (uint16_t) ((arg1)->vertexOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PolygonInfo_numTriangles_set(void * jarg1, unsigned short jarg2) {
  nifly::PolygonInfo *arg1 = (nifly::PolygonInfo *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::PolygonInfo *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numTriangles = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_PolygonInfo_numTriangles_get(void * jarg1) {
  unsigned short jresult ;
  nifly::PolygonInfo *arg1 = (nifly::PolygonInfo *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::PolygonInfo *)jarg1; 
  result = (uint16_t) ((arg1)->numTriangles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_PolygonInfo_triangleOffset_set(void * jarg1, unsigned short jarg2) {
  nifly::PolygonInfo *arg1 = (nifly::PolygonInfo *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::PolygonInfo *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->triangleOffset = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_PolygonInfo_triangleOffset_get(void * jarg1) {
  unsigned short jresult ;
  nifly::PolygonInfo *arg1 = (nifly::PolygonInfo *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::PolygonInfo *)jarg1; 
  result = (uint16_t) ((arg1)->triangleOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_PolygonInfo() {
  void * jresult ;
  nifly::PolygonInfo *result = 0 ;
  
  result = (nifly::PolygonInfo *)new nifly::PolygonInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_PolygonInfo(void * jarg1) {
  nifly::PolygonInfo *arg1 = (nifly::PolygonInfo *) 0 ;
  
  arg1 = (nifly::PolygonInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiScreenElementsData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiScreenElementsData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiScreenElementsData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiScreenElementsData *arg1 = (nifly::NiScreenElementsData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiScreenElementsData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiScreenElementsData_Sync(void * jarg1, void * jarg2) {
  nifly::NiScreenElementsData *arg1 = (nifly::NiScreenElementsData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiScreenElementsData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiScreenElementsData_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::NiScreenElementsData *arg1 = (nifly::NiScreenElementsData *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::NiScreenElementsData *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiScreenElementsData() {
  void * jresult ;
  nifly::NiScreenElementsData *result = 0 ;
  
  result = (nifly::NiScreenElementsData *)new nifly::NiScreenElementsData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiScreenElementsData(void * jarg1) {
  nifly::NiScreenElementsData *arg1 = (nifly::NiScreenElementsData *) 0 ;
  
  arg1 = (nifly::NiScreenElementsData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiScreenElements_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiScreenElements::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiScreenElements_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiScreenElements *arg1 = (nifly::NiScreenElements *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiScreenElements *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiScreenElements_GetGeomData(void * jarg1) {
  void * jresult ;
  nifly::NiScreenElements *arg1 = (nifly::NiScreenElements *) 0 ;
  nifly::NiGeometryData *result = 0 ;
  
  arg1 = (nifly::NiScreenElements *)jarg1; 
  result = (nifly::NiGeometryData *)((nifly::NiScreenElements const *)arg1)->GetGeomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiScreenElements_SetGeomData(void * jarg1, void * jarg2) {
  nifly::NiScreenElements *arg1 = (nifly::NiScreenElements *) 0 ;
  nifly::NiGeometryData *arg2 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::NiScreenElements *)jarg1; 
  arg2 = (nifly::NiGeometryData *)jarg2; 
  (arg1)->SetGeomData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiScreenElements() {
  void * jresult ;
  nifly::NiScreenElements *result = 0 ;
  
  result = (nifly::NiScreenElements *)new nifly::NiScreenElements();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiScreenElements(void * jarg1) {
  nifly::NiScreenElements *arg1 = (nifly::NiScreenElements *) 0 ;
  
  arg1 = (nifly::NiScreenElements *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLODTriShape_level0_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->level0 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLODTriShape_level0_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->level0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLODTriShape_level1_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->level1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLODTriShape_level1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->level1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLODTriShape_level2_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->level2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLODTriShape_level2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  result = (uint32_t) ((arg1)->level2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLODTriShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSLODTriShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLODTriShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLODTriShape_GetGeomData(void * jarg1) {
  void * jresult ;
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  nifly::NiGeometryData *result = 0 ;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  result = (nifly::NiGeometryData *)((nifly::BSLODTriShape const *)arg1)->GetGeomData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLODTriShape_SetGeomData(void * jarg1, void * jarg2) {
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  nifly::NiGeometryData *arg2 = (nifly::NiGeometryData *) 0 ;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  arg2 = (nifly::NiGeometryData *)jarg2; 
  (arg1)->SetGeomData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLODTriShape_Sync(void * jarg1, void * jarg2) {
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSLODTriShape() {
  void * jresult ;
  nifly::BSLODTriShape *result = 0 ;
  
  result = (nifly::BSLODTriShape *)new nifly::BSLODTriShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSLODTriShape(void * jarg1) {
  nifly::BSLODTriShape *arg1 = (nifly::BSLODTriShape *) 0 ;
  
  arg1 = (nifly::BSLODTriShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSegmentedTriShape_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSSegmentedTriShape::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSegmentedTriShape_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSSegmentedTriShape *arg1 = (nifly::BSSegmentedTriShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSSegmentedTriShape *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSegmentedTriShape_Sync(void * jarg1, void * jarg2) {
  nifly::BSSegmentedTriShape *arg1 = (nifly::BSSegmentedTriShape *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSSegmentedTriShape *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSegmentedTriShape_GetSegments(void * jarg1) {
  void * jresult ;
  nifly::BSSegmentedTriShape *arg1 = (nifly::BSSegmentedTriShape *) 0 ;
  SwigValueWrapper< std::vector< nifly::BSGeometrySegmentData > > result;
  
  arg1 = (nifly::BSSegmentedTriShape *)jarg1; 
  result = ((nifly::BSSegmentedTriShape const *)arg1)->GetSegments();
  jresult = new std::vector< nifly::BSGeometrySegmentData >((const std::vector< nifly::BSGeometrySegmentData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSegmentedTriShape_SetSegments(void * jarg1, void * jarg2) {
  nifly::BSSegmentedTriShape *arg1 = (nifly::BSSegmentedTriShape *) 0 ;
  std::vector< nifly::BSGeometrySegmentData > *arg2 = 0 ;
  
  arg1 = (nifly::BSSegmentedTriShape *)jarg1; 
  arg2 = (std::vector< nifly::BSGeometrySegmentData > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSGeometrySegmentData > const & type is null", 0);
    return ;
  } 
  (arg1)->SetSegments((std::vector< nifly::BSGeometrySegmentData > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSegmentedTriShape() {
  void * jresult ;
  nifly::BSSegmentedTriShape *result = 0 ;
  
  result = (nifly::BSSegmentedTriShape *)new nifly::BSSegmentedTriShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSegmentedTriShape(void * jarg1) {
  nifly::BSSegmentedTriShape *arg1 = (nifly::BSSegmentedTriShape *) 0 ;
  
  arg1 = (nifly::BSSegmentedTriShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_matcher_kd_node_p_set(void * jarg1, int jarg2) {
  nifly::kd_matcher::kd_node *arg1 = (nifly::kd_matcher::kd_node *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::kd_matcher::kd_node *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->p = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_kd_matcher_kd_node_p_get(void * jarg1) {
  int jresult ;
  nifly::kd_matcher::kd_node *arg1 = (nifly::kd_matcher::kd_node *) 0 ;
  int result;
  
  arg1 = (nifly::kd_matcher::kd_node *)jarg1; 
  result = (int) ((arg1)->p);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_matcher_kd_node_matchset_set(void * jarg1, void * jarg2) {
  nifly::kd_matcher::kd_node *arg1 = (nifly::kd_matcher::kd_node *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  arg1 = (nifly::kd_matcher::kd_node *)jarg1; 
  arg2 = (std::vector< int > *)jarg2; 
  if (arg1) (arg1)->matchset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_kd_matcher_kd_node_matchset_get(void * jarg1) {
  void * jresult ;
  nifly::kd_matcher::kd_node *arg1 = (nifly::kd_matcher::kd_node *) 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (nifly::kd_matcher::kd_node *)jarg1; 
  result = (std::vector< int > *)& ((arg1)->matchset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_kd_matcher_kd_node(int jarg1) {
  void * jresult ;
  int arg1 ;
  nifly::kd_matcher::kd_node *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (nifly::kd_matcher::kd_node *)new nifly::kd_matcher::kd_node(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_matcher_kd_node_add(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  nifly::kd_matcher::kd_node *arg1 = (nifly::kd_matcher::kd_node *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (nifly::kd_matcher::kd_node *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->add((Vector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_matcher_kd_node_collect(void * jarg1, void * jarg2) {
  nifly::kd_matcher::kd_node *arg1 = (nifly::kd_matcher::kd_node *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  
  arg1 = (nifly::kd_matcher::kd_node *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > & type is null", 0);
    return ;
  } 
  (arg1)->collect(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_kd_matcher_kd_node(void * jarg1) {
  nifly::kd_matcher::kd_node *arg1 = (nifly::kd_matcher::kd_node *) 0 ;
  
  arg1 = (nifly::kd_matcher::kd_node *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_matcher_matches_set(void * jarg1, void * jarg2) {
  nifly::kd_matcher *arg1 = (nifly::kd_matcher *) 0 ;
  std::vector< std::vector< int > > *arg2 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = (nifly::kd_matcher *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2; 
  if (arg1) (arg1)->matches = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_kd_matcher_matches_get(void * jarg1) {
  void * jresult ;
  nifly::kd_matcher *arg1 = (nifly::kd_matcher *) 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (nifly::kd_matcher *)jarg1; 
  result = (std::vector< std::vector< int > > *)& ((arg1)->matches);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_kd_matcher(void * jarg1, int jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  int arg2 ;
  nifly::kd_matcher *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (nifly::kd_matcher *)new nifly::kd_matcher((Vector3 const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_kd_matcher(void * jarg1) {
  nifly::kd_matcher *arg1 = (nifly::kd_matcher *) 0 ;
  
  arg1 = (nifly::kd_matcher *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_SortingMatcher_matches_set(void * jarg1, void * jarg2) {
  nifly::SortingMatcher *arg1 = (nifly::SortingMatcher *) 0 ;
  std::vector< std::vector< int > > *arg2 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = (nifly::SortingMatcher *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2; 
  if (arg1) (arg1)->matches = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_SortingMatcher_matches_get(void * jarg1) {
  void * jresult ;
  nifly::SortingMatcher *arg1 = (nifly::SortingMatcher *) 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (nifly::SortingMatcher *)jarg1; 
  result = (std::vector< std::vector< int > > *)& ((arg1)->matches);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_SortingMatcher(void * jarg1, int jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  int arg2 ;
  nifly::SortingMatcher *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (nifly::SortingMatcher *)new nifly::SortingMatcher((Vector3 const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_SortingMatcher(void * jarg1) {
  nifly::SortingMatcher *arg1 = (nifly::SortingMatcher *) 0 ;
  
  arg1 = (nifly::SortingMatcher *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_query_result_v_set(void * jarg1, void * jarg2) {
  nifly::kd_query_result *arg1 = (nifly::kd_query_result *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (nifly::kd_query_result *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_kd_query_result_v_get(void * jarg1) {
  void * jresult ;
  nifly::kd_query_result *arg1 = (nifly::kd_query_result *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (nifly::kd_query_result *)jarg1; 
  result = (Vector3 *) ((arg1)->v);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_query_result_vertex_index_set(void * jarg1, unsigned short jarg2) {
  nifly::kd_query_result *arg1 = (nifly::kd_query_result *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::kd_query_result *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->vertex_index = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_kd_query_result_vertex_index_get(void * jarg1) {
  unsigned short jresult ;
  nifly::kd_query_result *arg1 = (nifly::kd_query_result *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::kd_query_result *)jarg1; 
  result = (uint16_t) ((arg1)->vertex_index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_query_result_distance_set(void * jarg1, float jarg2) {
  nifly::kd_query_result *arg1 = (nifly::kd_query_result *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::kd_query_result *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_kd_query_result_distance_get(void * jarg1) {
  float jresult ;
  nifly::kd_query_result *arg1 = (nifly::kd_query_result *) 0 ;
  float result;
  
  arg1 = (nifly::kd_query_result *)jarg1; 
  result = (float) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_kd_query_result() {
  void * jresult ;
  nifly::kd_query_result *result = 0 ;
  
  result = (nifly::kd_query_result *)new nifly::kd_query_result();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_kd_query_result(void * jarg1) {
  nifly::kd_query_result *arg1 = (nifly::kd_query_result *) 0 ;
  
  arg1 = (nifly::kd_query_result *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_tree_kd_node_p_set(void * jarg1, void * jarg2) {
  nifly::kd_tree::kd_node *arg1 = (nifly::kd_tree::kd_node *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (nifly::kd_tree::kd_node *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->p = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_kd_tree_kd_node_p_get(void * jarg1) {
  void * jresult ;
  nifly::kd_tree::kd_node *arg1 = (nifly::kd_tree::kd_node *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (nifly::kd_tree::kd_node *)jarg1; 
  result = (Vector3 *) ((arg1)->p);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_tree_kd_node_p_i_set(void * jarg1, int jarg2) {
  nifly::kd_tree::kd_node *arg1 = (nifly::kd_tree::kd_node *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::kd_tree::kd_node *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->p_i = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_kd_tree_kd_node_p_i_get(void * jarg1) {
  int jresult ;
  nifly::kd_tree::kd_node *arg1 = (nifly::kd_tree::kd_node *) 0 ;
  int result;
  
  arg1 = (nifly::kd_tree::kd_node *)jarg1; 
  result = (int) ((arg1)->p_i);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_kd_tree_kd_node(void * jarg1, int jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  int arg2 ;
  nifly::kd_tree::kd_node *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (nifly::kd_tree::kd_node *)new nifly::kd_tree::kd_node(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_tree_kd_node_add(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  nifly::kd_tree::kd_node *arg1 = (nifly::kd_tree::kd_node *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (nifly::kd_tree::kd_node *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->add(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_tree_kd_node_find_closest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, int jarg6) {
  nifly::kd_tree::kd_node *arg1 = (nifly::kd_tree::kd_node *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  std::vector< nifly::kd_query_result > *arg3 = 0 ;
  float arg4 ;
  float *arg5 = 0 ;
  int arg6 ;
  
  arg1 = (nifly::kd_tree::kd_node *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (std::vector< nifly::kd_query_result > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::kd_query_result > & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg6 = (int)jarg6; 
  (arg1)->find_closest(arg2,*arg3,arg4,*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_tree_kd_node_find_closest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  nifly::kd_tree::kd_node *arg1 = (nifly::kd_tree::kd_node *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  std::vector< nifly::kd_query_result > *arg3 = 0 ;
  float arg4 ;
  float *arg5 = 0 ;
  
  arg1 = (nifly::kd_tree::kd_node *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (std::vector< nifly::kd_query_result > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::kd_query_result > & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  (arg1)->find_closest(arg2,*arg3,arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_kd_tree_kd_node(void * jarg1) {
  nifly::kd_tree::kd_node *arg1 = (nifly::kd_tree::kd_node *) 0 ;
  
  arg1 = (nifly::kd_tree::kd_node *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_kd_tree_queryResult_set(void * jarg1, void * jarg2) {
  nifly::kd_tree *arg1 = (nifly::kd_tree *) 0 ;
  std::vector< nifly::kd_query_result > *arg2 = (std::vector< nifly::kd_query_result > *) 0 ;
  
  arg1 = (nifly::kd_tree *)jarg1; 
  arg2 = (std::vector< nifly::kd_query_result > *)jarg2; 
  if (arg1) (arg1)->queryResult = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_kd_tree_queryResult_get(void * jarg1) {
  void * jresult ;
  nifly::kd_tree *arg1 = (nifly::kd_tree *) 0 ;
  std::vector< nifly::kd_query_result > *result = 0 ;
  
  arg1 = (nifly::kd_tree *)jarg1; 
  result = (std::vector< nifly::kd_query_result > *)& ((arg1)->queryResult);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_kd_tree(void * jarg1, int jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  int arg2 ;
  nifly::kd_tree *result = 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (nifly::kd_tree *)new nifly::kd_tree(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_kd_tree_kd_nn(void * jarg1, void * jarg2, float jarg3) {
  int jresult ;
  nifly::kd_tree *arg1 = (nifly::kd_tree *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  float arg3 ;
  int result;
  
  arg1 = (nifly::kd_tree *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)(arg1)->kd_nn(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_kd_tree(void * jarg1) {
  nifly::kd_tree *arg1 = (nifly::kd_tree *) 0 ;
  
  arg1 = (nifly::kd_tree *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TBC_tension_set(void * jarg1, float jarg2) {
  nifly::TBC *arg1 = (nifly::TBC *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::TBC *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tension = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_TBC_tension_get(void * jarg1) {
  float jresult ;
  nifly::TBC *arg1 = (nifly::TBC *) 0 ;
  float result;
  
  arg1 = (nifly::TBC *)jarg1; 
  result = (float) ((arg1)->tension);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TBC_bias_set(void * jarg1, float jarg2) {
  nifly::TBC *arg1 = (nifly::TBC *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::TBC *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bias = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_TBC_bias_get(void * jarg1) {
  float jresult ;
  nifly::TBC *arg1 = (nifly::TBC *) 0 ;
  float result;
  
  arg1 = (nifly::TBC *)jarg1; 
  result = (float) ((arg1)->bias);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TBC_continuity_set(void * jarg1, float jarg2) {
  nifly::TBC *arg1 = (nifly::TBC *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::TBC *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->continuity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_TBC_continuity_get(void * jarg1) {
  float jresult ;
  nifly::TBC *arg1 = (nifly::TBC *) 0 ;
  float result;
  
  arg1 = (nifly::TBC *)jarg1; 
  result = (float) ((arg1)->continuity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_TBC() {
  void * jresult ;
  nifly::TBC *result = 0 ;
  
  result = (nifly::TBC *)new nifly::TBC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_TBC(void * jarg1) {
  nifly::TBC *arg1 = (nifly::TBC *) 0 ;
  
  arg1 = (nifly::TBC *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptOptions_targetVersion_set(void * jarg1, void * jarg2) {
  nifly::OptOptions *arg1 = (nifly::OptOptions *) 0 ;
  nifly::NiVersion *arg2 = (nifly::NiVersion *) 0 ;
  
  arg1 = (nifly::OptOptions *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2; 
  if (arg1) (arg1)->targetVersion = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_OptOptions_targetVersion_get(void * jarg1) {
  void * jresult ;
  nifly::OptOptions *arg1 = (nifly::OptOptions *) 0 ;
  nifly::NiVersion *result = 0 ;
  
  arg1 = (nifly::OptOptions *)jarg1; 
  result = (nifly::NiVersion *)& ((arg1)->targetVersion);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptOptions_headParts_set(void * jarg1, unsigned int jarg2) {
  nifly::OptOptions *arg1 = (nifly::OptOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::OptOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->headParts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_OptOptions_headParts_get(void * jarg1) {
  unsigned int jresult ;
  nifly::OptOptions *arg1 = (nifly::OptOptions *) 0 ;
  bool result;
  
  arg1 = (nifly::OptOptions *)jarg1; 
  result = (bool) ((arg1)->headParts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptOptions_removeParallax_set(void * jarg1, unsigned int jarg2) {
  nifly::OptOptions *arg1 = (nifly::OptOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::OptOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->removeParallax = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_OptOptions_removeParallax_get(void * jarg1) {
  unsigned int jresult ;
  nifly::OptOptions *arg1 = (nifly::OptOptions *) 0 ;
  bool result;
  
  arg1 = (nifly::OptOptions *)jarg1; 
  result = (bool) ((arg1)->removeParallax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptOptions_calcBounds_set(void * jarg1, unsigned int jarg2) {
  nifly::OptOptions *arg1 = (nifly::OptOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::OptOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->calcBounds = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_OptOptions_calcBounds_get(void * jarg1) {
  unsigned int jresult ;
  nifly::OptOptions *arg1 = (nifly::OptOptions *) 0 ;
  bool result;
  
  arg1 = (nifly::OptOptions *)jarg1; 
  result = (bool) ((arg1)->calcBounds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_OptOptions() {
  void * jresult ;
  nifly::OptOptions *result = 0 ;
  
  result = (nifly::OptOptions *)new nifly::OptOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_OptOptions(void * jarg1) {
  nifly::OptOptions *arg1 = (nifly::OptOptions *) 0 ;
  
  arg1 = (nifly::OptOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptResult_versionMismatch_set(void * jarg1, unsigned int jarg2) {
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->versionMismatch = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_OptResult_versionMismatch_get(void * jarg1) {
  unsigned int jresult ;
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  bool result;
  
  arg1 = (nifly::OptResult *)jarg1; 
  result = (bool) ((arg1)->versionMismatch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptResult_dupesRenamed_set(void * jarg1, unsigned int jarg2) {
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dupesRenamed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_OptResult_dupesRenamed_get(void * jarg1) {
  unsigned int jresult ;
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  bool result;
  
  arg1 = (nifly::OptResult *)jarg1; 
  result = (bool) ((arg1)->dupesRenamed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptResult_shapesVColorsRemoved_set(void * jarg1, void * jarg2) {
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->shapesVColorsRemoved = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_OptResult_shapesVColorsRemoved_get(void * jarg1) {
  void * jresult ;
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->shapesVColorsRemoved);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptResult_shapesNormalsRemoved_set(void * jarg1, void * jarg2) {
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->shapesNormalsRemoved = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_OptResult_shapesNormalsRemoved_get(void * jarg1) {
  void * jresult ;
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->shapesNormalsRemoved);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptResult_shapesPartTriangulated_set(void * jarg1, void * jarg2) {
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->shapesPartTriangulated = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_OptResult_shapesPartTriangulated_get(void * jarg1) {
  void * jresult ;
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->shapesPartTriangulated);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptResult_shapesTangentsAdded_set(void * jarg1, void * jarg2) {
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->shapesTangentsAdded = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_OptResult_shapesTangentsAdded_get(void * jarg1) {
  void * jresult ;
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->shapesTangentsAdded);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_OptResult_shapesParallaxRemoved_set(void * jarg1, void * jarg2) {
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->shapesParallaxRemoved = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_OptResult_shapesParallaxRemoved_get(void * jarg1) {
  void * jresult ;
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->shapesParallaxRemoved);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_OptResult() {
  void * jresult ;
  nifly::OptResult *result = 0 ;
  
  result = (nifly::OptResult *)new nifly::OptResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_OptResult(void * jarg1) {
  nifly::OptResult *arg1 = (nifly::OptResult *) 0 ;
  
  arg1 = (nifly::OptResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoneWeightsSort() {
  void * jresult ;
  nifly::BoneWeightsSort *result = 0 ;
  
  result = (nifly::BoneWeightsSort *)new nifly::BoneWeightsSort();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BoneWeightsSort(void * jarg1) {
  nifly::BoneWeightsSort *arg1 = (nifly::BoneWeightsSort *) 0 ;
  
  arg1 = (nifly::BoneWeightsSort *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifLoadOptions_isTerrain_set(void * jarg1, unsigned int jarg2) {
  nifly::NifLoadOptions *arg1 = (nifly::NifLoadOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NifLoadOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTerrain = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifLoadOptions_isTerrain_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NifLoadOptions *arg1 = (nifly::NifLoadOptions *) 0 ;
  bool result;
  
  arg1 = (nifly::NifLoadOptions *)jarg1; 
  result = (bool) ((arg1)->isTerrain);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifLoadOptions() {
  void * jresult ;
  nifly::NifLoadOptions *result = 0 ;
  
  result = (nifly::NifLoadOptions *)new nifly::NifLoadOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NifLoadOptions(void * jarg1) {
  nifly::NifLoadOptions *arg1 = (nifly::NifLoadOptions *) 0 ;
  
  arg1 = (nifly::NifLoadOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSaveOptions_optimize_set(void * jarg1, unsigned int jarg2) {
  nifly::NifSaveOptions *arg1 = (nifly::NifSaveOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NifSaveOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->optimize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifSaveOptions_optimize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NifSaveOptions *arg1 = (nifly::NifSaveOptions *) 0 ;
  bool result;
  
  arg1 = (nifly::NifSaveOptions *)jarg1; 
  result = (bool) ((arg1)->optimize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifSaveOptions_sortBlocks_set(void * jarg1, unsigned int jarg2) {
  nifly::NifSaveOptions *arg1 = (nifly::NifSaveOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NifSaveOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->sortBlocks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifSaveOptions_sortBlocks_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NifSaveOptions *arg1 = (nifly::NifSaveOptions *) 0 ;
  bool result;
  
  arg1 = (nifly::NifSaveOptions *)jarg1; 
  result = (bool) ((arg1)->sortBlocks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifSaveOptions() {
  void * jresult ;
  nifly::NifSaveOptions *result = 0 ;
  
  result = (nifly::NifSaveOptions *)new nifly::NifSaveOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NifSaveOptions(void * jarg1) {
  nifly::NifSaveOptions *arg1 = (nifly::NifSaveOptions *) 0 ;
  
  arg1 = (nifly::NifSaveOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifFile__SWIG_0() {
  void * jresult ;
  nifly::NifFile *result = 0 ;
  
  result = (nifly::NifFile *)new nifly::NifFile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifFile__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  nifly::NifFile *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (nifly::NifFile *)new nifly::NifFile(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifFile__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  std::filesystem::path *arg1 = 0 ;
  nifly::NifLoadOptions *arg2 = 0 ;
  nifly::NifFile *result = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & type is null", 0);
    return 0;
  } 
  arg2 = (nifly::NifLoadOptions *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifLoadOptions const & type is null", 0);
    return 0;
  } 
  result = (nifly::NifFile *)new nifly::NifFile((std::filesystem::path const &)*arg1,(nifly::NifLoadOptions const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifFile__SWIG_3(void * jarg1) {
  void * jresult ;
  std::filesystem::path *arg1 = 0 ;
  nifly::NifFile *result = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & type is null", 0);
    return 0;
  } 
  result = (nifly::NifFile *)new nifly::NifFile((std::filesystem::path const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifFile__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  std::istream *arg1 = 0 ;
  nifly::NifLoadOptions *arg2 = 0 ;
  nifly::NifFile *result = 0 ;
  
  arg1 = (std::istream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
    return 0;
  } 
  arg2 = (nifly::NifLoadOptions *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifLoadOptions const & type is null", 0);
    return 0;
  } 
  result = (nifly::NifFile *)new nifly::NifFile(*arg1,(nifly::NifLoadOptions const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifFile__SWIG_5(void * jarg1) {
  void * jresult ;
  std::istream *arg1 = 0 ;
  nifly::NifFile *result = 0 ;
  
  arg1 = (std::istream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
    return 0;
  } 
  result = (nifly::NifFile *)new nifly::NifFile(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifFile__SWIG_6(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  nifly::NifLoadOptions *arg2 = 0 ;
  nifly::NifFile *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (nifly::NifLoadOptions *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifLoadOptions const & type is null", 0);
    return 0;
  } 
  result = (nifly::NifFile *)new nifly::NifFile((std::string const &)*arg1,(nifly::NifLoadOptions const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifFile__SWIG_7(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  nifly::NifFile *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (nifly::NifFile *)new nifly::NifFile((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NifFile__SWIG_8(void * jarg1) {
  void * jresult ;
  nifly::NifFile *arg1 = 0 ;
  nifly::NifFile *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifFile const & type is null", 0);
    return 0;
  } 
  result = (nifly::NifFile *)new nifly::NifFile((nifly::NifFile const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetHeader__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiHeader *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = (nifly::NiHeader *) &(arg1)->GetHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CopyFrom(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NifFile *arg2 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NifFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifFile const & type is null", 0);
    return ;
  } 
  (arg1)->CopyFrom((nifly::NifFile const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Load__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::filesystem::path *arg2 = 0 ;
  nifly::NifLoadOptions *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & type is null", 0);
    return 0;
  } 
  arg3 = (nifly::NifLoadOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifLoadOptions const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Load((std::filesystem::path const &)*arg2,(nifly::NifLoadOptions const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Load__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::filesystem::path *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Load((std::filesystem::path const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Load__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  nifly::NifLoadOptions *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (nifly::NifLoadOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifLoadOptions const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Load((std::string const &)*arg2,(nifly::NifLoadOptions const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Load__SWIG_3(void * jarg1, char * jarg2) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->Load((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Load__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::istream *arg2 = 0 ;
  nifly::NifLoadOptions *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
    return 0;
  } 
  arg3 = (nifly::NifLoadOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifLoadOptions const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Load(*arg2,(nifly::NifLoadOptions const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Load__SWIG_5(void * jarg1, void * jarg2) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::istream *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::istream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::istream & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Load(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Save__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::filesystem::path *arg2 = 0 ;
  nifly::NifSaveOptions *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & type is null", 0);
    return 0;
  } 
  arg3 = (nifly::NifSaveOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifSaveOptions const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Save((std::filesystem::path const &)*arg2,(nifly::NifSaveOptions const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Save__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::filesystem::path *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Save((std::filesystem::path const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Save__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  nifly::NifSaveOptions *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (nifly::NifSaveOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifSaveOptions const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Save((std::string const &)*arg2,(nifly::NifSaveOptions const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Save__SWIG_3(void * jarg1, char * jarg2) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->Save((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Save__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::ostream *arg2 = 0 ;
  nifly::NifSaveOptions *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return 0;
  } 
  arg3 = (nifly::NifSaveOptions *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifSaveOptions const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Save(*arg2,(nifly::NifSaveOptions const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_Save__SWIG_5(void * jarg1, void * jarg2) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::ostream *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->Save(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_Optimize(void * jarg1) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  (arg1)->Optimize();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_OptimizeFor(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::OptOptions *arg2 = 0 ;
  nifly::OptResult result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::OptOptions *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::OptOptions & type is null", 0);
    return 0;
  } 
  result = (arg1)->OptimizeFor(*arg2);
  jresult = new nifly::OptResult((const nifly::OptResult &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_PrepareData(void * jarg1) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  (arg1)->PrepareData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_FinalizeData(void * jarg1) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  (arg1)->FinalizeData();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_IsValid(void * jarg1) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = (bool)((nifly::NifFile const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_HasUnknown(void * jarg1) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = (bool)((nifly::NifFile const *)arg1)->HasUnknown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_IsTerrain(void * jarg1) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = (bool)((nifly::NifFile const *)arg1)->IsTerrain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_IsSSECompatible__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = (bool)((nifly::NifFile const *)arg1)->IsSSECompatible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_IsSSECompatible__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (bool)((nifly::NifFile const *)arg1)->IsSSECompatible(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_Create(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion const & type is null", 0);
    return ;
  } 
  (arg1)->Create((nifly::NiVersion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_Clear(void * jarg1) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_LinkGeomData(void * jarg1) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  (arg1)->LinkGeomData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_RemoveInvalidTris(void * jarg1) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  ((nifly::NifFile const *)arg1)->RemoveInvalidTris();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_NifFile_GetVertexLimit() {
  unsigned long jresult ;
  size_t result;
  
  result = nifly::NifFile::GetVertexLimit();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_NifFile_GetTriangleLimit(void * jarg1) {
  unsigned long jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  size_t result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = ((nifly::NifFile const *)arg1)->GetTriangleLimit();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_AddNode__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  nifly::NiNode *arg4 = (nifly::NiNode *) 0 ;
  nifly::NiNode *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (nifly::NiNode *)jarg4; 
  result = (nifly::NiNode *)(arg1)->AddNode((std::string const &)*arg2,(MatTransform const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_AddNode__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  nifly::NiNode *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform const & type is null", 0);
    return 0;
  } 
  result = (nifly::NiNode *)(arg1)->AddNode((std::string const &)*arg2,(MatTransform const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_DeleteNode(void * jarg1, char * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->DeleteNode((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_CanDeleteNode__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  nifly::NiNode *arg1 = (nifly::NiNode *) 0 ;
  bool result;
  
  arg1 = (nifly::NiNode *)jarg1; 
  result = (bool)nifly::NifFile::CanDeleteNode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_CanDeleteNode__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((nifly::NifFile const *)arg1)->CanDeleteNode((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NifFile_GetNodeName(void * jarg1, int jarg2) {
  char * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((nifly::NifFile const *)arg1)->GetNodeName(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetNodeName(void * jarg1, int jarg2, char * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetNodeName(arg2,(std::string const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_AssignExtraData(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiAVObject *arg2 = (nifly::NiAVObject *) 0 ;
  nifly::NiExtraData *arg3 = (nifly::NiExtraData *) 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiAVObject *)jarg2; 
  arg3 = (nifly::NiExtraData *)jarg3; 
  result = (int)(arg1)->AssignExtraData(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapeOrder(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->SetShapeOrder((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetSortIndex__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NiRef *arg1 = 0 ;
  std::vector< int > *arg2 = 0 ;
  int *arg3 = 0 ;
  
  arg1 = (nifly::NiRef *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiRef const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  nifly::NifFile::SetSortIndex((nifly::NiRef const &)*arg1,*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SortAVObject(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiAVObject *arg2 = (nifly::NiAVObject *) 0 ;
  std::vector< int > *arg3 = 0 ;
  int *arg4 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiAVObject *)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->SortAVObject(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SortShape(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< int > *arg3 = 0 ;
  int *arg4 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->SortShape(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SortGraph(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiNode *arg2 = (nifly::NiNode *) 0 ;
  std::vector< int > *arg3 = 0 ;
  int *arg4 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiNode *)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  (arg1)->SortGraph(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_PrettySortBlocks(void * jarg1) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  (arg1)->PrettySortBlocks();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_DeleteUnreferencedNodes__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)(arg1)->DeleteUnreferencedNodes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_DeleteUnreferencedNodes__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = (bool)(arg1)->DeleteUnreferencedNodes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_GetBlockID(void * jarg1, void * jarg2) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiObject *arg2 = (nifly::NiObject *) 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiObject *)jarg2; 
  result = (int)((nifly::NifFile const *)arg1)->GetBlockID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetParentNode(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiObject *arg2 = (nifly::NiObject *) 0 ;
  nifly::NiNode *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiObject *)jarg2; 
  result = (nifly::NiNode *)((nifly::NifFile const *)arg1)->GetParentNode(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetParentNode(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiObject *arg2 = (nifly::NiObject *) 0 ;
  nifly::NiNode *arg3 = (nifly::NiNode *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiObject *)jarg2; 
  arg3 = (nifly::NiNode *)jarg3; 
  (arg1)->SetParentNode(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetNodes(void * jarg1) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiNode * > > result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = ((nifly::NifFile const *)arg1)->GetNodes();
  jresult = new std::vector< nifly::NiNode * >((const std::vector< nifly::NiNode * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetShader(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  NiShader *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (NiShader *)((nifly::NifFile const *)arg1)->GetShader(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetMaterialProperty(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  NiMaterialProperty *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (NiMaterialProperty *)((nifly::NifFile const *)arg1)->GetMaterialProperty(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetStencilProperty(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  NiStencilProperty *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (NiStencilProperty *)((nifly::NifFile const *)arg1)->GetStencilProperty(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_GetTextureSlot__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  NiShader *arg2 = (NiShader *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (NiShader *)jarg2; 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (int)((nifly::NifFile const *)arg1)->GetTextureSlot(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_GetTextureSlot__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  NiShader *arg2 = (NiShader *) 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (NiShader *)jarg2; 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  result = (int)((nifly::NifFile const *)arg1)->GetTextureSlot(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetTextureSlot__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  NiShader *arg2 = (NiShader *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (NiShader *)jarg2; 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  (arg1)->SetTextureSlot(arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetTextureSlot__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  NiShader *arg2 = (NiShader *) 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (NiShader *)jarg2; 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return ;
  } 
  (arg1)->SetTextureSlot(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_TrimTexturePaths(void * jarg1) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  (arg1)->TrimTexturePaths();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CloneChildren__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiObject *arg2 = (nifly::NiObject *) 0 ;
  nifly::NifFile *arg3 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiObject *)jarg2; 
  arg3 = (nifly::NifFile *)jarg3; 
  (arg1)->CloneChildren(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CloneChildren__SWIG_1(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiObject *arg2 = (nifly::NiObject *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiObject *)jarg2; 
  (arg1)->CloneChildren(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_CloneShape__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::string *arg3 = 0 ;
  nifly::NifFile *arg4 = (nifly::NifFile *) 0 ;
  nifly::NiShape *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (nifly::NifFile *)jarg4; 
  result = (nifly::NiShape *)(arg1)->CloneShape(arg2,(std::string const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_CloneShape__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::string *arg3 = 0 ;
  nifly::NiShape *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (nifly::NiShape *)(arg1)->CloneShape(arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_CloneNamedNode__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  nifly::NifFile *arg3 = (nifly::NifFile *) 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (nifly::NifFile *)jarg3; 
  result = (int)(arg1)->CloneNamedNode((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_CloneNamedNode__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->CloneNamedNode((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetShapeNames(void * jarg1) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = ((nifly::NifFile const *)arg1)->GetShapeNames();
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetShapes(void * jarg1) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiShape * > > result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = ((nifly::NifFile const *)arg1)->GetShapes();
  jresult = new std::vector< nifly::NiShape * >((const std::vector< nifly::NiShape * > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_RenameShape(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)nifly::NifFile::RenameShape(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_RenameDuplicateShapes(void * jarg1) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = (bool)(arg1)->RenameDuplicateShapes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_TriangulateShape(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->TriangulateShape(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetRootNode(void * jarg1) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiNode *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = (nifly::NiNode *)((nifly::NifFile const *)arg1)->GetRootNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_GetTree__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::vector< nifly::NiObject * > *arg2 = 0 ;
  nifly::NiObject *arg3 = (nifly::NiObject *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::vector< nifly::NiObject * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiObject * > & type is null", 0);
    return ;
  } 
  arg3 = (nifly::NiObject *)jarg3; 
  ((nifly::NifFile const *)arg1)->GetTree(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_GetTree__SWIG_1(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::vector< nifly::NiObject * > *arg2 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (std::vector< nifly::NiObject * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiObject * > & type is null", 0);
    return ;
  } 
  ((nifly::NifFile const *)arg1)->GetTree(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetNodeTransformToParent(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetNodeTransformToParent((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetNodeTransform(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetNodeTransform((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetNodeTransformToGlobal(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetNodeTransformToGlobal((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetAbsoluteNodeTransform(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetAbsoluteNodeTransform((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_SetNodeTransformToParent__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->SetNodeTransformToParent((std::string const &)*arg2,(MatTransform const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_SetNodeTransformToParent__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetNodeTransformToParent((std::string const &)*arg2,(MatTransform const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_SetNodeTransform__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->SetNodeTransform((std::string const &)*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_SetNodeTransform__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  MatTransform *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetNodeTransform((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeBoneList(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< std::string > *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return 0;
  } 
  result = (int)((nifly::NifFile const *)arg1)->GetShapeBoneList(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeBoneIDList(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< int > *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return 0;
  } 
  result = (int)((nifly::NifFile const *)arg1)->GetShapeBoneIDList(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapeBoneIDList(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->SetShapeBoneIDList(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeBoneWeights(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  int arg3 ;
  std::unordered_map< uint16_t,float > *arg4 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (std::unordered_map< uint16_t,float > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< uint16_t,float > & type is null", 0);
    return 0;
  } 
  result = (int)((nifly::NifFile const *)arg1)->GetShapeBoneWeights(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_CalcShapeTransformGlobalToSkin(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  MatTransform *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->CalcShapeTransformGlobalToSkin(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeTransformGlobalToSkin(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  MatTransform *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetShapeTransformGlobalToSkin(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapeTransformGlobalToSkin(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  MatTransform *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (MatTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform const & type is null", 0);
    return ;
  } 
  (arg1)->SetShapeTransformGlobalToSkin(arg2,(MatTransform const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeTransformSkinToBone__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::string *arg3 = 0 ;
  MatTransform *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (MatTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetShapeTransformSkinToBone(arg2,(std::string const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeTransformSkinToBone__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  int arg3 ;
  MatTransform *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (MatTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetShapeTransformSkinToBone(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapeTransformSkinToBone(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  int arg3 ;
  MatTransform *arg4 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (MatTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform const & type is null", 0);
    return ;
  } 
  (arg1)->SetShapeTransformSkinToBone(arg2,arg3,(MatTransform const &)*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeBoneTransform__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::string *arg3 = 0 ;
  MatTransform *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (MatTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetShapeBoneTransform(arg2,(std::string const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeBoneTransform__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  int arg3 ;
  MatTransform *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (MatTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetShapeBoneTransform(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_SetShapeBoneTransform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  int arg3 ;
  MatTransform *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (MatTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MatTransform & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetShapeBoneTransform(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_SetShapeBoneBounds(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  BoundingSphere *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (BoundingSphere *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BoundingSphere & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetShapeBoneBounds((std::string const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeBoneBounds(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  int arg3 ;
  BoundingSphere *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (BoundingSphere *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BoundingSphere & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetShapeBoneBounds(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_UpdateShapeBoneID(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->UpdateShapeBoneID((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapeBoneWeights(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::unordered_map< uint16_t,float > *arg4 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (std::unordered_map< uint16_t,float > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< uint16_t,float > & type is null", 0);
    return ;
  } 
  (arg1)->SetShapeBoneWeights((std::string const &)*arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapeVertWeights(void * jarg1, char * jarg2, int jarg3, void * jarg4, void * jarg5) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::vector< uint8_t > *arg4 = 0 ;
  std::vector< float > *arg5 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (std::vector< uint8_t > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > & type is null", 0);
    return ;
  } 
  arg5 = (std::vector< float > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  ((nifly::NifFile const *)arg1)->SetShapeVertWeights((std::string const &)*arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_ClearShapeVertWeights(void * jarg1, char * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  ((nifly::NifFile const *)arg1)->ClearShapeVertWeights((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetShapeSegments(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  nifly::NifSegmentationInfo *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (nifly::NifSegmentationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifSegmentationInfo & type is null", 0);
    return 0;
  } 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return 0;
  } 
  result = (bool)nifly::NifFile::GetShapeSegments(arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapeSegments(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  nifly::NifSegmentationInfo *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (nifly::NifSegmentationInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifSegmentationInfo const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  nifly::NifFile::SetShapeSegments(arg1,(nifly::NifSegmentationInfo const &)*arg2,(std::vector< int > const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetShapePartitions(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > & type is null", 0);
    return 0;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::NifFile const *)arg1)->GetShapePartitions(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapePartitions__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > const & type is null", 0);
    return ;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  (arg1)->SetShapePartitions(arg2,(std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > const &)*arg3,(std::vector< int > const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapePartitions__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > const & type is null", 0);
    return ;
  } 
  arg4 = (std::vector< int > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->SetShapePartitions(arg2,(std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > const &)*arg3,(std::vector< int > const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetDefaultPartition(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->SetDefaultPartition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_DeletePartitions(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->DeletePartitions(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetRawVertsForShape(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetRawVertsForShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_ReorderTriangles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  std::vector< uint32_t > *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32_t > const & type is null", 0);
    return 0;
  } 
  result = (bool)nifly::NifFile::ReorderTriangles(arg1,(std::vector< unsigned int > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetNormalsForShape__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  bool arg3 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetNormalsForShape(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetNormalsForShape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetNormalsForShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetUvsForShape__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector2 > *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (std::vector< nifly::Vector2 > *)(arg1)->GetUvsForShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetColorsForShape(void * jarg1, char * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< nifly::Color4 > *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (std::vector< nifly::Color4 > *)(arg1)->GetColorsForShape((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetTangentsForShape__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  bool arg3 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetTangentsForShape(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetTangentsForShape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetTangentsForShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetBitangentsForShape__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  bool arg3 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetBitangentsForShape(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetBitangentsForShape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (std::vector< nifly::Vector3 > *)(arg1)->GetBitangentsForShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetEyeDataForShape(void * jarg1) {
  void * jresult ;
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  result = (std::vector< float > *)nifly::NifFile::GetEyeDataForShape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetUvsForShape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector2 > *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector2 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector2 > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetUvsForShape(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_GetVertsForShape(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetVertsForShape(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetVertsForShape(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetVertsForShape(arg2,(std::vector< nifly::Vector3 > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetUvsForShape(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector2 > *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector2 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector2 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetUvsForShape(arg2,(std::vector< nifly::Vector2 > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetColorsForShape(void * jarg1, char * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< nifly::Color4 > *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::vector< nifly::Color4 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Color4 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetColorsForShape((std::string const &)*arg2,(std::vector< nifly::Color4 > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetTangentsForShape(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetTangentsForShape(arg2,(std::vector< nifly::Vector3 > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetBitangentsForShape(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetBitangentsForShape(arg2,(std::vector< nifly::Vector3 > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetEyeDataForShape(void * jarg1, void * jarg2) {
  nifly::NiShape *arg1 = (nifly::NiShape *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (nifly::NiShape *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  nifly::NifFile::SetEyeDataForShape(arg1,(std::vector< float > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_InvertUVsForShape(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->InvertUVsForShape(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_MirrorShape(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->MirrorShape(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetNormalsForShape(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetNormalsForShape(arg2,(std::vector< nifly::Vector3 > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CalcNormalsForShape__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, float jarg5) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  bool arg3 ;
  bool arg4 ;
  float arg5 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  (arg1)->CalcNormalsForShape(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CalcNormalsForShape__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->CalcNormalsForShape(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CalcNormalsForShape__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  bool arg3 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->CalcNormalsForShape(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CalcNormalsForShape__SWIG_3(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->CalcNormalsForShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CalcTangentsForShape(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->CalcTangentsForShape(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_ApplyNormalsFromFile(void * jarg1, void * jarg2, char * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NifFile *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NifFile *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NifFile & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)(arg1)->ApplyNormalsFromFile(*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_GetRootTranslation(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  ((nifly::NifFile const *)arg1)->GetRootTranslation(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_MoveVertex(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  Vector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  (arg1)->MoveVertex(arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_OffsetShape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  Vector3 *arg3 = 0 ;
  std::unordered_map< uint16_t,float > *arg4 = (std::unordered_map< uint16_t,float > *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (std::unordered_map< uint16_t,float > *)jarg4; 
  (arg1)->OffsetShape(arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_OffsetShape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->OffsetShape(arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_ScaleShape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  Vector3 *arg3 = 0 ;
  std::unordered_map< uint16_t,float > *arg4 = (std::unordered_map< uint16_t,float > *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (std::unordered_map< uint16_t,float > *)jarg4; 
  (arg1)->ScaleShape(arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_ScaleShape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->ScaleShape(arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_RotateShape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  Vector3 *arg3 = 0 ;
  std::unordered_map< uint16_t,float > *arg4 = (std::unordered_map< uint16_t,float > *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (std::unordered_map< uint16_t,float > *)jarg4; 
  (arg1)->RotateShape(arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_RotateShape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->RotateShape(arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_GetAlphaProperty(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  NiAlphaProperty *result = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  result = (NiAlphaProperty *)((nifly::NifFile const *)arg1)->GetAlphaProperty(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_AssignAlphaProperty(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  NiAlphaProperty *arg3 = (NiAlphaProperty *) 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (NiAlphaProperty *)jarg3; 
  result = (int)(arg1)->AssignAlphaProperty(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_RemoveAlphaProperty(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->RemoveAlphaProperty(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_DeleteShape(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->DeleteShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_DeleteShader(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->DeleteShader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_DeleteSkinning(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->DeleteSkinning(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_RemoveEmptyPartitions(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->RemoveEmptyPartitions(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NifFile_DeleteVertsForShape(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< uint16_t > *arg3 = 0 ;
  bool result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< uint16_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->DeleteVertsForShape(arg2,(std::vector< uint16_t > const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_CalcShapeDiff__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::unordered_map< uint16_t,Vector3 > *arg4 = 0 ;
  float arg5 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::unordered_map< uint16_t,Vector3 > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< uint16_t,Vector3 > & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = (int)(arg1)->CalcShapeDiff(arg2,(std::vector< nifly::Vector3 > const *)arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_CalcShapeDiff__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector3 > *arg3 = (std::vector< nifly::Vector3 > *) 0 ;
  std::unordered_map< uint16_t,Vector3 > *arg4 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector3 > *)jarg3; 
  arg4 = (std::unordered_map< uint16_t,Vector3 > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< uint16_t,Vector3 > & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->CalcShapeDiff(arg2,(std::vector< nifly::Vector3 > const *)arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_CalcUVDiff__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector2 > *arg3 = (std::vector< nifly::Vector2 > *) 0 ;
  std::unordered_map< uint16_t,Vector3 > *arg4 = 0 ;
  float arg5 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector2 > *)jarg3; 
  arg4 = (std::unordered_map< uint16_t,Vector3 > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< uint16_t,Vector3 > & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = (int)(arg1)->CalcUVDiff(arg2,(std::vector< nifly::Vector2 > const *)arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NifFile_CalcUVDiff__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  std::vector< nifly::Vector2 > *arg3 = (std::vector< nifly::Vector2 > *) 0 ;
  std::unordered_map< uint16_t,Vector3 > *arg4 = 0 ;
  int result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  arg3 = (std::vector< nifly::Vector2 > *)jarg3; 
  arg4 = (std::unordered_map< uint16_t,Vector3 > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< uint16_t,Vector3 > & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->CalcUVDiff(arg2,(std::vector< nifly::Vector2 > const *)arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CreateSkinning(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->CreateSkinning(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_SetShapeDynamic(void * jarg1, char * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetShapeDynamic((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_UpdateSkinPartitions(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->UpdateSkinPartitions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_UpdatePartitionFlags(void * jarg1, void * jarg2) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiShape *arg2 = (nifly::NiShape *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiShape *)jarg2; 
  (arg1)->UpdatePartitionFlags(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_StringExtraDataChildren__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiNode *arg2 = (nifly::NiNode *) 0 ;
  bool arg3 ;
  SwigValueWrapper< std::vector< nifly::NiStringExtraData * > > result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiNode *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = ((nifly::NifFile const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetChildren< nifly::NiStringExtraData >(arg2,arg3);
  jresult = new std::vector< nifly::NiStringExtraData * >((const std::vector< nifly::NiStringExtraData * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_StringExtraDataChildren__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiNode *arg2 = (nifly::NiNode *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiStringExtraData * > > result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiNode *)jarg2; 
  result = ((nifly::NifFile const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetChildren< nifly::NiStringExtraData >(arg2);
  jresult = new std::vector< nifly::NiStringExtraData * >((const std::vector< nifly::NiStringExtraData * > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NifFile_StringExtraDataChildren__SWIG_2(void * jarg1) {
  void * jresult ;
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiStringExtraData * > > result;
  
  arg1 = (nifly::NifFile *)jarg1; 
  result = ((nifly::NifFile const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR GetChildren< nifly::NiStringExtraData >();
  jresult = new std::vector< nifly::NiStringExtraData * >((const std::vector< nifly::NiStringExtraData * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NifFile_CreateNamedBSFadeNode(void * jarg1, void * jarg2, char * jarg3) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  nifly::NiVersion *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  arg2 = (nifly::NiVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR CreateNamed< nifly::BSFadeNode >((nifly::NiVersion const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NifFile(void * jarg1) {
  nifly::NifFile *arg1 = (nifly::NifFile *) 0 ;
  
  arg1 = (nifly::NifFile *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_CalcMaxTriangleIndex(void * jarg1) {
  unsigned short jresult ;
  std::vector< nifly::Triangle > *arg1 = 0 ;
  uint16_t result;
  
  arg1 = (std::vector< nifly::Triangle > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > const & type is null", 0);
    return 0;
  } 
  result = (uint16_t)nifly::CalcMaxTriangleIndex((std::vector< nifly::Triangle > const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_nifly_EPSILON_get() {
  double jresult ;
  double result;
  
  result = (double)(double)nifly::EPSILON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_PI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)nifly::PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_DEG2RAD_get() {
  float jresult ;
  float result;
  
  result = (float)(float)nifly::DEG2RAD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_FloatsAreNearlyEqual(float jarg1, float jarg2) {
  unsigned int jresult ;
  float arg1 ;
  float arg2 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)nifly::FloatsAreNearlyEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_CalcMedianOfFloats(void * jarg1) {
  float jresult ;
  std::vector< float > *arg1 = 0 ;
  float result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return 0;
  } 
  result = (float)nifly::CalcMedianOfFloats(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector2_u_set(void * jarg1, float jarg2) {
  nifly::Vector2 *arg1 = (nifly::Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->u = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector2_u_get(void * jarg1) {
  float jresult ;
  nifly::Vector2 *arg1 = (nifly::Vector2 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector2 *)jarg1; 
  result = (float) ((arg1)->u);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector2_v_set(void * jarg1, float jarg2) {
  nifly::Vector2 *arg1 = (nifly::Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector2_v_get(void * jarg1) {
  float jresult ;
  nifly::Vector2 *arg1 = (nifly::Vector2 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector2 *)jarg1; 
  result = (float) ((arg1)->v);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Vector2__SWIG_0() {
  void * jresult ;
  nifly::Vector2 *result = 0 ;
  
  result = (nifly::Vector2 *)new nifly::Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Vector2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  nifly::Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (nifly::Vector2 *)new nifly::Vector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Vector2(void * jarg1) {
  nifly::Vector2 *arg1 = (nifly::Vector2 *) 0 ;
  
  arg1 = (nifly::Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector3_x_set(void * jarg1, float jarg2) {
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_x_get(void * jarg1) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector3_y_set(void * jarg1, float jarg2) {
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_y_get(void * jarg1) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector3_z_set(void * jarg1, float jarg2) {
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_z_get(void * jarg1) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Vector3__SWIG_0() {
  void * jresult ;
  nifly::Vector3 *result = 0 ;
  
  result = (nifly::Vector3 *)new nifly::Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Vector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (nifly::Vector3 *)new nifly::Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector3_Zero(void * jarg1) {
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  (arg1)->Zero();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Vector3_IsZero__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->IsZero(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Vector3_IsZero__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  bool result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  result = (bool)(arg1)->IsZero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector3_Normalize(void * jarg1) {
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  (arg1)->Normalize();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Vector3_hash(void * jarg1) {
  unsigned int jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  result = (uint32_t)(arg1)->hash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Vector3_cross(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  nifly::Vector3 result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((nifly::Vector3 const *)arg1)->cross((nifly::Vector3 const &)*arg2);
  jresult = new nifly::Vector3((const nifly::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_dot(void * jarg1, void * jarg2) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((nifly::Vector3 const *)arg1)->dot((nifly::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_DistanceTo(void * jarg1, void * jarg2) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)(arg1)->DistanceTo((nifly::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_DistanceSquaredTo(void * jarg1, void * jarg2) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)(arg1)->DistanceSquaredTo((nifly::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_angle(void * jarg1, void * jarg2) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((nifly::Vector3 const *)arg1)->angle((nifly::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector3_clampEpsilon(void * jarg1) {
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  (arg1)->clampEpsilon();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Vector3_IsNearlyEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::Vector3 const *)arg1)->IsNearlyEqualTo((nifly::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_length2(void * jarg1) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  result = (float)((nifly::Vector3 const *)arg1)->length2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_length(void * jarg1) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  result = (float)((nifly::Vector3 const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector3_DistanceToSegment(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  nifly::Vector3 *arg3 = 0 ;
  float result;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((nifly::Vector3 const *)arg1)->DistanceToSegment((nifly::Vector3 const &)*arg2,(nifly::Vector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Vector3(void * jarg1) {
  nifly::Vector3 *arg1 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_CalcMedianOfVector3(void * jarg1) {
  void * jresult ;
  std::vector< nifly::Vector3 > *arg1 = 0 ;
  nifly::Vector3 result;
  
  arg1 = (std::vector< nifly::Vector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return 0;
  } 
  result = nifly::CalcMedianOfVector3((std::vector< nifly::Vector3 > const &)*arg1);
  jresult = new nifly::Vector3((const nifly::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector4_x_set(void * jarg1, float jarg2) {
  nifly::Vector4 *arg1 = (nifly::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector4_x_get(void * jarg1) {
  float jresult ;
  nifly::Vector4 *arg1 = (nifly::Vector4 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector4_y_set(void * jarg1, float jarg2) {
  nifly::Vector4 *arg1 = (nifly::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector4_y_get(void * jarg1) {
  float jresult ;
  nifly::Vector4 *arg1 = (nifly::Vector4 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector4_z_set(void * jarg1, float jarg2) {
  nifly::Vector4 *arg1 = (nifly::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector4_z_get(void * jarg1) {
  float jresult ;
  nifly::Vector4 *arg1 = (nifly::Vector4 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Vector4_w_set(void * jarg1, float jarg2) {
  nifly::Vector4 *arg1 = (nifly::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Vector4_w_get(void * jarg1) {
  float jresult ;
  nifly::Vector4 *arg1 = (nifly::Vector4 *) 0 ;
  float result;
  
  arg1 = (nifly::Vector4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Vector4__SWIG_0() {
  void * jresult ;
  nifly::Vector4 *result = 0 ;
  
  result = (nifly::Vector4 *)new nifly::Vector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Vector4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  nifly::Vector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (nifly::Vector4 *)new nifly::Vector4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Vector4(void * jarg1) {
  nifly::Vector4 *arg1 = (nifly::Vector4 *) 0 ;
  
  arg1 = (nifly::Vector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Color3_r_set(void * jarg1, float jarg2) {
  nifly::Color3 *arg1 = (nifly::Color3 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Color3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Color3_r_get(void * jarg1) {
  float jresult ;
  nifly::Color3 *arg1 = (nifly::Color3 *) 0 ;
  float result;
  
  arg1 = (nifly::Color3 *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Color3_g_set(void * jarg1, float jarg2) {
  nifly::Color3 *arg1 = (nifly::Color3 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Color3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Color3_g_get(void * jarg1) {
  float jresult ;
  nifly::Color3 *arg1 = (nifly::Color3 *) 0 ;
  float result;
  
  arg1 = (nifly::Color3 *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Color3_b_set(void * jarg1, float jarg2) {
  nifly::Color3 *arg1 = (nifly::Color3 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Color3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Color3_b_get(void * jarg1) {
  float jresult ;
  nifly::Color3 *arg1 = (nifly::Color3 *) 0 ;
  float result;
  
  arg1 = (nifly::Color3 *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Color3__SWIG_0() {
  void * jresult ;
  nifly::Color3 *result = 0 ;
  
  result = (nifly::Color3 *)new nifly::Color3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Color3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  nifly::Color3 *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  result = (nifly::Color3 *)new nifly::Color3((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Color3(void * jarg1) {
  nifly::Color3 *arg1 = (nifly::Color3 *) 0 ;
  
  arg1 = (nifly::Color3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Color4_r_set(void * jarg1, float jarg2) {
  nifly::Color4 *arg1 = (nifly::Color4 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Color4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Color4_r_get(void * jarg1) {
  float jresult ;
  nifly::Color4 *arg1 = (nifly::Color4 *) 0 ;
  float result;
  
  arg1 = (nifly::Color4 *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Color4_g_set(void * jarg1, float jarg2) {
  nifly::Color4 *arg1 = (nifly::Color4 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Color4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Color4_g_get(void * jarg1) {
  float jresult ;
  nifly::Color4 *arg1 = (nifly::Color4 *) 0 ;
  float result;
  
  arg1 = (nifly::Color4 *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Color4_b_set(void * jarg1, float jarg2) {
  nifly::Color4 *arg1 = (nifly::Color4 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Color4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Color4_b_get(void * jarg1) {
  float jresult ;
  nifly::Color4 *arg1 = (nifly::Color4 *) 0 ;
  float result;
  
  arg1 = (nifly::Color4 *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Color4_a_set(void * jarg1, float jarg2) {
  nifly::Color4 *arg1 = (nifly::Color4 *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Color4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Color4_a_get(void * jarg1) {
  float jresult ;
  nifly::Color4 *arg1 = (nifly::Color4 *) 0 ;
  float result;
  
  arg1 = (nifly::Color4 *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Color4__SWIG_0() {
  void * jresult ;
  nifly::Color4 *result = 0 ;
  
  result = (nifly::Color4 *)new nifly::Color4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Color4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float temp4 ;
  nifly::Color4 *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  temp4 = (float)jarg4; 
  arg4 = &temp4; 
  result = (nifly::Color4 *)new nifly::Color4((float const &)*arg1,(float const &)*arg2,(float const &)*arg3,(float const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Color4(void * jarg1) {
  nifly::Color4 *arg1 = (nifly::Color4 *) 0 ;
  
  arg1 = (nifly::Color4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ByteColor3_r_set(void * jarg1, unsigned char jarg2) {
  nifly::ByteColor3 *arg1 = (nifly::ByteColor3 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::ByteColor3 *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_ByteColor3_r_get(void * jarg1) {
  unsigned char jresult ;
  nifly::ByteColor3 *arg1 = (nifly::ByteColor3 *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::ByteColor3 *)jarg1; 
  result = (uint8_t) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ByteColor3_g_set(void * jarg1, unsigned char jarg2) {
  nifly::ByteColor3 *arg1 = (nifly::ByteColor3 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::ByteColor3 *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_ByteColor3_g_get(void * jarg1) {
  unsigned char jresult ;
  nifly::ByteColor3 *arg1 = (nifly::ByteColor3 *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::ByteColor3 *)jarg1; 
  result = (uint8_t) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ByteColor3_b_set(void * jarg1, unsigned char jarg2) {
  nifly::ByteColor3 *arg1 = (nifly::ByteColor3 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::ByteColor3 *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_ByteColor3_b_get(void * jarg1) {
  unsigned char jresult ;
  nifly::ByteColor3 *arg1 = (nifly::ByteColor3 *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::ByteColor3 *)jarg1; 
  result = (uint8_t) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_ByteColor3() {
  void * jresult ;
  nifly::ByteColor3 *result = 0 ;
  
  result = (nifly::ByteColor3 *)new nifly::ByteColor3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_ByteColor3(void * jarg1) {
  nifly::ByteColor3 *arg1 = (nifly::ByteColor3 *) 0 ;
  
  arg1 = (nifly::ByteColor3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ByteColor4_r_set(void * jarg1, unsigned char jarg2) {
  nifly::ByteColor4 *arg1 = (nifly::ByteColor4 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::ByteColor4 *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_ByteColor4_r_get(void * jarg1) {
  unsigned char jresult ;
  nifly::ByteColor4 *arg1 = (nifly::ByteColor4 *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::ByteColor4 *)jarg1; 
  result = (uint8_t) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ByteColor4_g_set(void * jarg1, unsigned char jarg2) {
  nifly::ByteColor4 *arg1 = (nifly::ByteColor4 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::ByteColor4 *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_ByteColor4_g_get(void * jarg1) {
  unsigned char jresult ;
  nifly::ByteColor4 *arg1 = (nifly::ByteColor4 *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::ByteColor4 *)jarg1; 
  result = (uint8_t) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ByteColor4_b_set(void * jarg1, unsigned char jarg2) {
  nifly::ByteColor4 *arg1 = (nifly::ByteColor4 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::ByteColor4 *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_ByteColor4_b_get(void * jarg1) {
  unsigned char jresult ;
  nifly::ByteColor4 *arg1 = (nifly::ByteColor4 *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::ByteColor4 *)jarg1; 
  result = (uint8_t) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ByteColor4_a_set(void * jarg1, unsigned char jarg2) {
  nifly::ByteColor4 *arg1 = (nifly::ByteColor4 *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::ByteColor4 *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_ByteColor4_a_get(void * jarg1) {
  unsigned char jresult ;
  nifly::ByteColor4 *arg1 = (nifly::ByteColor4 *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::ByteColor4 *)jarg1; 
  result = (uint8_t) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_ByteColor4() {
  void * jresult ;
  nifly::ByteColor4 *result = 0 ;
  
  result = (nifly::ByteColor4 *)new nifly::ByteColor4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_ByteColor4(void * jarg1) {
  nifly::ByteColor4 *arg1 = (nifly::ByteColor4 *) 0 ;
  
  arg1 = (nifly::ByteColor4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Matrix3_IsIdentity(void * jarg1) {
  unsigned int jresult ;
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  bool result;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  result = (bool)(arg1)->IsIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix3_Identity(void * jarg1) {
  void * jresult ;
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  nifly::Matrix3 *result = 0 ;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  result = (nifly::Matrix3 *) &(arg1)->Identity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix3_Transpose(void * jarg1) {
  void * jresult ;
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  nifly::Matrix3 result;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  result = ((nifly::Matrix3 const *)arg1)->Transpose();
  jresult = new nifly::Matrix3((const nifly::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Matrix3_Determinant(void * jarg1) {
  float jresult ;
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  float result;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  result = (float)((nifly::Matrix3 const *)arg1)->Determinant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Matrix3_Invert(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  nifly::Matrix3 *arg2 = (nifly::Matrix3 *) 0 ;
  bool result;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  arg2 = (nifly::Matrix3 *)jarg2; 
  result = (bool)((nifly::Matrix3 const *)arg1)->Invert(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix3_Inverse(void * jarg1) {
  void * jresult ;
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  nifly::Matrix3 result;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  result = ((nifly::Matrix3 const *)arg1)->Inverse();
  jresult = new nifly::Matrix3((const nifly::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix3_MakeRotation(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  nifly::Matrix3 result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = nifly::Matrix3::MakeRotation(arg1,arg2,arg3);
  jresult = new nifly::Matrix3((const nifly::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Matrix3_ToEulerAngles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::Matrix3 const *)arg1)->ToEulerAngles(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Matrix3_ToEulerDegrees(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::Matrix3 const *)arg1)->ToEulerDegrees(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Matrix3_IsNearlyEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  nifly::Matrix3 *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  arg2 = (nifly::Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Matrix3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::Matrix3 const *)arg1)->IsNearlyEqualTo((nifly::Matrix3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Matrix3() {
  void * jresult ;
  nifly::Matrix3 *result = 0 ;
  
  result = (nifly::Matrix3 *)new nifly::Matrix3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Matrix3(void * jarg1) {
  nifly::Matrix3 *arg1 = (nifly::Matrix3 *) 0 ;
  
  arg1 = (nifly::Matrix3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RotVecToMat(void * jarg1) {
  void * jresult ;
  nifly::Vector3 *arg1 = 0 ;
  nifly::Matrix3 result;
  
  arg1 = (nifly::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = nifly::RotVecToMat((nifly::Vector3 const &)*arg1);
  jresult = new nifly::Matrix3((const nifly::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_RotMatToVec(void * jarg1) {
  void * jresult ;
  nifly::Matrix3 *arg1 = 0 ;
  nifly::Vector3 result;
  
  arg1 = (nifly::Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Matrix3 const & type is null", 0);
    return 0;
  } 
  result = nifly::RotMatToVec((nifly::Matrix3 const &)*arg1);
  jresult = new nifly::Vector3((const nifly::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_CalcAverageRotation(void * jarg1) {
  void * jresult ;
  std::vector< nifly::Matrix3 > *arg1 = 0 ;
  nifly::Matrix3 result;
  
  arg1 = (std::vector< nifly::Matrix3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Matrix3 > const & type is null", 0);
    return 0;
  } 
  result = nifly::CalcAverageRotation((std::vector< nifly::Matrix3 > const &)*arg1);
  jresult = new nifly::Matrix3((const nifly::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_CalcMedianRotation(void * jarg1) {
  void * jresult ;
  std::vector< nifly::Matrix3 > *arg1 = 0 ;
  nifly::Matrix3 result;
  
  arg1 = (std::vector< nifly::Matrix3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Matrix3 > const & type is null", 0);
    return 0;
  } 
  result = nifly::CalcMedianRotation((std::vector< nifly::Matrix3 > const &)*arg1);
  jresult = new nifly::Matrix3((const nifly::Matrix3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Matrix4__SWIG_0() {
  void * jresult ;
  nifly::Matrix4 *result = 0 ;
  
  result = (nifly::Matrix4 *)new nifly::Matrix4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Matrix4__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< nifly::Vector3 > *arg1 = 0 ;
  nifly::Matrix4 *result = 0 ;
  
  arg1 = (std::vector< nifly::Vector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return 0;
  } 
  result = (nifly::Matrix4 *)new nifly::Matrix4((std::vector< nifly::Vector3 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_Set__SWIG_0(void * jarg1, void * jarg2) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  nifly::Vector3 *arg2 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  (arg1)->Set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_Set__SWIG_1(void * jarg1, void * jarg2) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return ;
  } 
  (arg1)->Set((std::vector< nifly::Vector3 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_SetRow(void * jarg1, int jarg2, void * jarg3) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  int arg2 ;
  nifly::Vector3 *arg3 = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow(arg2,(nifly::Vector3 const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Matrix4_IsIdentity(void * jarg1) {
  unsigned int jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  bool result;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  result = (bool)(arg1)->IsIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Identity(void * jarg1) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  nifly::Matrix4 *result = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  result = (nifly::Matrix4 *) &(arg1)->Identity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_GetRow(void * jarg1, int jarg2, void * jarg3) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  int arg2 ;
  nifly::Vector3 *arg3 = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->GetRow(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_Get33__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Get33(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_Get33__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Get33(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_Get33__SWIG_2(void * jarg1, void * jarg2) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->Get33(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Inverse(void * jarg1) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  nifly::Matrix4 result;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  result = (arg1)->Inverse();
  jresult = new nifly::Matrix4((const nifly::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Cofactor(void * jarg1) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  nifly::Matrix4 result;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  result = (arg1)->Cofactor();
  jresult = new nifly::Matrix4((const nifly::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Adjoint(void * jarg1) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  nifly::Matrix4 result;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  result = (arg1)->Adjoint();
  jresult = new nifly::Matrix4((const nifly::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Matrix4_Det(void * jarg1) {
  float jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float result;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  result = (float)(arg1)->Det();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Matrix4_Det33(void * jarg1, void * jarg2) {
  float jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float *arg2 = (float *) 0 ;
  float result;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (float)(arg1)->Det33(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_PushTranslate(void * jarg1, void * jarg2) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->PushTranslate((nifly::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Translate__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  nifly::Matrix4 *result = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (nifly::Matrix4 *) &(arg1)->Translate((nifly::Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Translate__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  nifly::Matrix4 *result = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (nifly::Matrix4 *) &(arg1)->Translate(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_PushScale(void * jarg1, float jarg2, float jarg3, float jarg4) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->PushScale(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Scale(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  nifly::Matrix4 *result = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (nifly::Matrix4 *) &(arg1)->Scale(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Matrix4_PushRotate(void * jarg1, float jarg2, void * jarg3) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float arg2 ;
  nifly::Vector3 *arg3 = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->PushRotate(arg2,(nifly::Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Rotate__SWIG_0(void * jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float arg2 ;
  nifly::Vector3 *arg3 = 0 ;
  nifly::Matrix4 *result = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (nifly::Matrix4 *) &(arg1)->Rotate(arg2,(nifly::Vector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Rotate__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  nifly::Matrix4 *result = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (nifly::Matrix4 *) &(arg1)->Rotate(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Matrix4_Align(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  nifly::Vector3 *arg3 = 0 ;
  nifly::Matrix4 *result = 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (nifly::Matrix4 *) &(arg1)->Align((nifly::Vector3 const &)*arg2,(nifly::Vector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Matrix4(void * jarg1) {
  nifly::Matrix4 *arg1 = (nifly::Matrix4 *) 0 ;
  
  arg1 = (nifly::Matrix4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoundingSphere_center_set(void * jarg1, void * jarg2) {
  nifly::BoundingSphere *arg1 = (nifly::BoundingSphere *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BoundingSphere *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BoundingSphere_center_get(void * jarg1) {
  void * jresult ;
  nifly::BoundingSphere *arg1 = (nifly::BoundingSphere *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BoundingSphere *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->center);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoundingSphere_radius_set(void * jarg1, float jarg2) {
  nifly::BoundingSphere *arg1 = (nifly::BoundingSphere *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BoundingSphere *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BoundingSphere_radius_get(void * jarg1) {
  float jresult ;
  nifly::BoundingSphere *arg1 = (nifly::BoundingSphere *) 0 ;
  float result;
  
  arg1 = (nifly::BoundingSphere *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoundingSphere__SWIG_0() {
  void * jresult ;
  nifly::BoundingSphere *result = 0 ;
  
  result = (nifly::BoundingSphere *)new nifly::BoundingSphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoundingSphere__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  nifly::Vector3 *arg1 = 0 ;
  float arg2 ;
  nifly::BoundingSphere *result = 0 ;
  
  arg1 = (nifly::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (nifly::BoundingSphere *)new nifly::BoundingSphere((nifly::Vector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoundingSphere__SWIG_2(void * jarg1) {
  void * jresult ;
  std::vector< nifly::Vector3 > *arg1 = 0 ;
  nifly::BoundingSphere *result = 0 ;
  
  arg1 = (std::vector< nifly::Vector3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return 0;
  } 
  result = (nifly::BoundingSphere *)new nifly::BoundingSphere((std::vector< nifly::Vector3 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BoundingSphere(void * jarg1) {
  nifly::BoundingSphere *arg1 = (nifly::BoundingSphere *) 0 ;
  
  arg1 = (nifly::BoundingSphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Quaternion_w_set(void * jarg1, float jarg2) {
  nifly::Quaternion *arg1 = (nifly::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Quaternion_w_get(void * jarg1) {
  float jresult ;
  nifly::Quaternion *arg1 = (nifly::Quaternion *) 0 ;
  float result;
  
  arg1 = (nifly::Quaternion *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Quaternion_x_set(void * jarg1, float jarg2) {
  nifly::Quaternion *arg1 = (nifly::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Quaternion_x_get(void * jarg1) {
  float jresult ;
  nifly::Quaternion *arg1 = (nifly::Quaternion *) 0 ;
  float result;
  
  arg1 = (nifly::Quaternion *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Quaternion_y_set(void * jarg1, float jarg2) {
  nifly::Quaternion *arg1 = (nifly::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Quaternion_y_get(void * jarg1) {
  float jresult ;
  nifly::Quaternion *arg1 = (nifly::Quaternion *) 0 ;
  float result;
  
  arg1 = (nifly::Quaternion *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Quaternion_z_set(void * jarg1, float jarg2) {
  nifly::Quaternion *arg1 = (nifly::Quaternion *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Quaternion *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Quaternion_z_get(void * jarg1) {
  float jresult ;
  nifly::Quaternion *arg1 = (nifly::Quaternion *) 0 ;
  float result;
  
  arg1 = (nifly::Quaternion *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Quaternion__SWIG_0() {
  void * jresult ;
  nifly::Quaternion *result = 0 ;
  
  result = (nifly::Quaternion *)new nifly::Quaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Quaternion__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  nifly::Quaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (nifly::Quaternion *)new nifly::Quaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Quaternion(void * jarg1) {
  nifly::Quaternion *arg1 = (nifly::Quaternion *) 0 ;
  
  arg1 = (nifly::Quaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_QuaternionXYZW_x_set(void * jarg1, float jarg2) {
  nifly::QuaternionXYZW *arg1 = (nifly::QuaternionXYZW *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::QuaternionXYZW *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_QuaternionXYZW_x_get(void * jarg1) {
  float jresult ;
  nifly::QuaternionXYZW *arg1 = (nifly::QuaternionXYZW *) 0 ;
  float result;
  
  arg1 = (nifly::QuaternionXYZW *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_QuaternionXYZW_y_set(void * jarg1, float jarg2) {
  nifly::QuaternionXYZW *arg1 = (nifly::QuaternionXYZW *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::QuaternionXYZW *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_QuaternionXYZW_y_get(void * jarg1) {
  float jresult ;
  nifly::QuaternionXYZW *arg1 = (nifly::QuaternionXYZW *) 0 ;
  float result;
  
  arg1 = (nifly::QuaternionXYZW *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_QuaternionXYZW_z_set(void * jarg1, float jarg2) {
  nifly::QuaternionXYZW *arg1 = (nifly::QuaternionXYZW *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::QuaternionXYZW *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_QuaternionXYZW_z_get(void * jarg1) {
  float jresult ;
  nifly::QuaternionXYZW *arg1 = (nifly::QuaternionXYZW *) 0 ;
  float result;
  
  arg1 = (nifly::QuaternionXYZW *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_QuaternionXYZW_w_set(void * jarg1, float jarg2) {
  nifly::QuaternionXYZW *arg1 = (nifly::QuaternionXYZW *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::QuaternionXYZW *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_QuaternionXYZW_w_get(void * jarg1) {
  float jresult ;
  nifly::QuaternionXYZW *arg1 = (nifly::QuaternionXYZW *) 0 ;
  float result;
  
  arg1 = (nifly::QuaternionXYZW *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_QuaternionXYZW__SWIG_0() {
  void * jresult ;
  nifly::QuaternionXYZW *result = 0 ;
  
  result = (nifly::QuaternionXYZW *)new nifly::QuaternionXYZW();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_QuaternionXYZW__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  nifly::QuaternionXYZW *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (nifly::QuaternionXYZW *)new nifly::QuaternionXYZW(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_QuaternionXYZW(void * jarg1) {
  nifly::QuaternionXYZW *arg1 = (nifly::QuaternionXYZW *) 0 ;
  
  arg1 = (nifly::QuaternionXYZW *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_QuatTransform_translation_set(void * jarg1, void * jarg2) {
  nifly::QuatTransform *arg1 = (nifly::QuatTransform *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::QuatTransform *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->translation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_QuatTransform_translation_get(void * jarg1) {
  void * jresult ;
  nifly::QuatTransform *arg1 = (nifly::QuatTransform *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::QuatTransform *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->translation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_QuatTransform_rotation_set(void * jarg1, void * jarg2) {
  nifly::QuatTransform *arg1 = (nifly::QuatTransform *) 0 ;
  nifly::Quaternion *arg2 = (nifly::Quaternion *) 0 ;
  
  arg1 = (nifly::QuatTransform *)jarg1; 
  arg2 = (nifly::Quaternion *)jarg2; 
  if (arg1) (arg1)->rotation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_QuatTransform_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::QuatTransform *arg1 = (nifly::QuatTransform *) 0 ;
  nifly::Quaternion *result = 0 ;
  
  arg1 = (nifly::QuatTransform *)jarg1; 
  result = (nifly::Quaternion *)& ((arg1)->rotation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_QuatTransform_scale_set(void * jarg1, float jarg2) {
  nifly::QuatTransform *arg1 = (nifly::QuatTransform *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::QuatTransform *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_QuatTransform_scale_get(void * jarg1) {
  float jresult ;
  nifly::QuatTransform *arg1 = (nifly::QuatTransform *) 0 ;
  float result;
  
  arg1 = (nifly::QuatTransform *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_QuatTransform() {
  void * jresult ;
  nifly::QuatTransform *result = 0 ;
  
  result = (nifly::QuatTransform *)new nifly::QuatTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_QuatTransform(void * jarg1) {
  nifly::QuatTransform *arg1 = (nifly::QuatTransform *) 0 ;
  
  arg1 = (nifly::QuatTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MatTransform_translation_set(void * jarg1, void * jarg2) {
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->translation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MatTransform_translation_get(void * jarg1) {
  void * jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->translation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MatTransform_rotation_set(void * jarg1, void * jarg2) {
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::Matrix3 *arg2 = (nifly::Matrix3 *) 0 ;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  arg2 = (nifly::Matrix3 *)jarg2; 
  if (arg1) (arg1)->rotation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MatTransform_rotation_get(void * jarg1) {
  void * jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::Matrix3 *result = 0 ;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  result = (nifly::Matrix3 *)& ((arg1)->rotation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MatTransform_scale_set(void * jarg1, float jarg2) {
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_MatTransform_scale_get(void * jarg1) {
  float jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  float result;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_MatTransform_Clear(void * jarg1) {
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_MatTransform_ToEulerDegrees(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::MatTransform const *)arg1)->ToEulerDegrees(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MatTransform_ToMatrix(void * jarg1) {
  void * jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::Matrix4 result;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  result = ((nifly::MatTransform const *)arg1)->ToMatrix();
  jresult = new nifly::Matrix4((const nifly::Matrix4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MatTransform_GetVector(void * jarg1) {
  void * jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::Vector3 result;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  result = ((nifly::MatTransform const *)arg1)->GetVector();
  jresult = new nifly::Vector3((const nifly::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MatTransform_ApplyTransform(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  nifly::Vector3 result;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((nifly::MatTransform const *)arg1)->ApplyTransform((nifly::Vector3 const &)*arg2);
  jresult = new nifly::Vector3((const nifly::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MatTransform_InverseTransform(void * jarg1) {
  void * jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::MatTransform result;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  result = ((nifly::MatTransform const *)arg1)->InverseTransform();
  jresult = new nifly::MatTransform((const nifly::MatTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_MatTransform_ComposeTransforms(void * jarg1, void * jarg2) {
  void * jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::MatTransform *arg2 = 0 ;
  nifly::MatTransform result;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  arg2 = (nifly::MatTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::MatTransform const & type is null", 0);
    return 0;
  } 
  result = ((nifly::MatTransform const *)arg1)->ComposeTransforms((nifly::MatTransform const &)*arg2);
  jresult = new nifly::MatTransform((const nifly::MatTransform &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_MatTransform_IsNearlyEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  nifly::MatTransform *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  arg2 = (nifly::MatTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::MatTransform const & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::MatTransform const *)arg1)->IsNearlyEqualTo((nifly::MatTransform const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_MatTransform() {
  void * jresult ;
  nifly::MatTransform *result = 0 ;
  
  result = (nifly::MatTransform *)new nifly::MatTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_MatTransform(void * jarg1) {
  nifly::MatTransform *arg1 = (nifly::MatTransform *) 0 ;
  
  arg1 = (nifly::MatTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_CalcAverageMatTransform(void * jarg1) {
  void * jresult ;
  std::vector< nifly::MatTransform > *arg1 = 0 ;
  nifly::MatTransform result;
  
  arg1 = (std::vector< nifly::MatTransform > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::MatTransform > const & type is null", 0);
    return 0;
  } 
  result = nifly::CalcAverageMatTransform((std::vector< nifly::MatTransform > const &)*arg1);
  jresult = new nifly::MatTransform((const nifly::MatTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_CalcMedianMatTransform(void * jarg1) {
  void * jresult ;
  std::vector< nifly::MatTransform > *arg1 = 0 ;
  nifly::MatTransform result;
  
  arg1 = (std::vector< nifly::MatTransform > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::MatTransform > const & type is null", 0);
    return 0;
  } 
  result = nifly::CalcMedianMatTransform((std::vector< nifly::MatTransform > const &)*arg1);
  jresult = new nifly::MatTransform((const nifly::MatTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Edge_p1_set(void * jarg1, unsigned short jarg2) {
  nifly::Edge *arg1 = (nifly::Edge *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Edge *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->p1 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Edge_p1_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Edge *arg1 = (nifly::Edge *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Edge *)jarg1; 
  result = (uint16_t) ((arg1)->p1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Edge_p2_set(void * jarg1, unsigned short jarg2) {
  nifly::Edge *arg1 = (nifly::Edge *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Edge *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->p2 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Edge_p2_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Edge *arg1 = (nifly::Edge *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Edge *)jarg1; 
  result = (uint16_t) ((arg1)->p2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Edge__SWIG_0() {
  void * jresult ;
  nifly::Edge *result = 0 ;
  
  result = (nifly::Edge *)new nifly::Edge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Edge__SWIG_1(unsigned short jarg1, unsigned short jarg2) {
  void * jresult ;
  uint16_t arg1 ;
  uint16_t arg2 ;
  nifly::Edge *result = 0 ;
  
  arg1 = (uint16_t)jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (nifly::Edge *)new nifly::Edge(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Edge_CompareIndices(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::Edge *arg1 = (nifly::Edge *) 0 ;
  nifly::Edge *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::Edge *)jarg1; 
  arg2 = (nifly::Edge *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Edge const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CompareIndices((nifly::Edge const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Edge(void * jarg1) {
  nifly::Edge *arg1 = (nifly::Edge *) 0 ;
  
  arg1 = (nifly::Edge *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Triangle_p1_set(void * jarg1, unsigned short jarg2) {
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->p1 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Triangle_p1_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  result = (uint16_t) ((arg1)->p1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Triangle_p2_set(void * jarg1, unsigned short jarg2) {
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->p2 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Triangle_p2_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  result = (uint16_t) ((arg1)->p2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Triangle_p3_set(void * jarg1, unsigned short jarg2) {
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->p3 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Triangle_p3_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  result = (uint16_t) ((arg1)->p3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Triangle__SWIG_0() {
  void * jresult ;
  nifly::Triangle *result = 0 ;
  
  result = (nifly::Triangle *)new nifly::Triangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Triangle__SWIG_1(unsigned short jarg1, unsigned short jarg2, unsigned short jarg3) {
  void * jresult ;
  uint16_t arg1 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  nifly::Triangle *result = 0 ;
  
  arg1 = (uint16_t)jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (nifly::Triangle *)new nifly::Triangle(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Triangle_set(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4) {
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Triangle_trinormal__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg3 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3; 
  ((nifly::Triangle const *)arg1)->trinormal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Triangle_trinormal__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  std::vector< nifly::Vector3 > *arg2 = 0 ;
  nifly::Vector3 *arg3 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (std::vector< nifly::Vector3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector3 > const & type is null", 0);
    return ;
  } 
  arg3 = (nifly::Vector3 *)jarg3; 
  ((nifly::Triangle const *)arg1)->trinormal((std::vector< nifly::Vector3 > const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Triangle_midpoint(void * jarg1, void * jarg2, void * jarg3) {
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg3 = 0 ;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return ;
  } 
  (arg1)->midpoint(arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Triangle_AxisMidPointY(void * jarg1, void * jarg2) {
  float jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  float result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  result = (float)(arg1)->AxisMidPointY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Triangle_AxisMidPointX(void * jarg1, void * jarg2) {
  float jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  float result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  result = (float)(arg1)->AxisMidPointX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Triangle_AxisMidPointZ(void * jarg1, void * jarg2) {
  float jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  float result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  result = (float)(arg1)->AxisMidPointZ(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Triangle_HasOrientedEdge(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Edge *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Edge *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Edge const & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::Triangle const *)arg1)->HasOrientedEdge((nifly::Edge const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Triangle_ClosestEdge(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg3 = 0 ;
  nifly::Edge result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((nifly::Triangle const *)arg1)->ClosestEdge(arg2,(nifly::Vector3 const &)*arg3);
  jresult = new nifly::Edge((const nifly::Edge &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Triangle_IntersectRay__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg3 = 0 ;
  nifly::Vector3 *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  nifly::Vector3 *arg6 = (nifly::Vector3 *) 0 ;
  bool result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return 0;
  } 
  arg4 = (nifly::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return 0;
  } 
  arg5 = (float *)jarg5; 
  arg6 = (nifly::Vector3 *)jarg6; 
  result = (bool)(arg1)->IntersectRay(arg2,*arg3,*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Triangle_IntersectRay__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg3 = 0 ;
  nifly::Vector3 *arg4 = 0 ;
  float *arg5 = (float *) 0 ;
  bool result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return 0;
  } 
  arg4 = (nifly::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return 0;
  } 
  arg5 = (float *)jarg5; 
  result = (bool)(arg1)->IntersectRay(arg2,*arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Triangle_IntersectRay__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg3 = 0 ;
  nifly::Vector3 *arg4 = 0 ;
  bool result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return 0;
  } 
  arg4 = (nifly::Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->IntersectRay(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Triangle_IntersectSphere__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg3 = 0 ;
  float arg4 ;
  float *arg5 = (float *) 0 ;
  bool result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float *)jarg5; 
  result = (bool)(arg1)->IntersectSphere(arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Triangle_IntersectSphere__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  nifly::Vector3 *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  arg3 = (nifly::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->IntersectSphere(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Triangle_CompareIndices(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  nifly::Triangle *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::Triangle *)jarg1; 
  arg2 = (nifly::Triangle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Triangle const & type is null", 0);
    return 0;
  } 
  result = (bool)((nifly::Triangle const *)arg1)->CompareIndices((nifly::Triangle const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Triangle_rot(void * jarg1) {
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  
  arg1 = (nifly::Triangle *)jarg1; 
  (arg1)->rot();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Triangle(void * jarg1) {
  nifly::Triangle *arg1 = (nifly::Triangle *) 0 ;
  
  arg1 = (nifly::Triangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Face_nPoints_set(void * jarg1, unsigned char jarg2) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::Face *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->nPoints = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_Face_nPoints_get(void * jarg1) {
  unsigned char jresult ;
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::Face *)jarg1; 
  result = (uint8_t) ((arg1)->nPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Face_p1_set(void * jarg1, unsigned short jarg2) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Face *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->p1 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Face_p1_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Face *)jarg1; 
  result = (uint16_t) ((arg1)->p1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Face_uv1_set(void * jarg1, unsigned short jarg2) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Face *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->uv1 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Face_uv1_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Face *)jarg1; 
  result = (uint16_t) ((arg1)->uv1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Face_p2_set(void * jarg1, unsigned short jarg2) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Face *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->p2 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Face_p2_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Face *)jarg1; 
  result = (uint16_t) ((arg1)->p2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Face_uv2_set(void * jarg1, unsigned short jarg2) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Face *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->uv2 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Face_uv2_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Face *)jarg1; 
  result = (uint16_t) ((arg1)->uv2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Face_p3_set(void * jarg1, unsigned short jarg2) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Face *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->p3 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Face_p3_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Face *)jarg1; 
  result = (uint16_t) ((arg1)->p3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Face_uv3_set(void * jarg1, unsigned short jarg2) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Face *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->uv3 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Face_uv3_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Face *)jarg1; 
  result = (uint16_t) ((arg1)->uv3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Face_p4_set(void * jarg1, unsigned short jarg2) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Face *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->p4 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Face_p4_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Face *)jarg1; 
  result = (uint16_t) ((arg1)->p4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Face_uv4_set(void * jarg1, unsigned short jarg2) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::Face *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->uv4 = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_Face_uv4_get(void * jarg1) {
  unsigned short jresult ;
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::Face *)jarg1; 
  result = (uint16_t) ((arg1)->uv4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Face__SWIG_0(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  nifly::Face *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (nifly::Face *)new nifly::Face(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Face__SWIG_1(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  nifly::Face *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int *)jarg2; 
  result = (nifly::Face *)new nifly::Face(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Face__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  nifly::Face *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (nifly::Face *)new nifly::Face(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Face__SWIG_3() {
  void * jresult ;
  nifly::Face *result = 0 ;
  
  result = (nifly::Face *)new nifly::Face();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Face(void * jarg1) {
  nifly::Face *arg1 = (nifly::Face *) 0 ;
  
  arg1 = (nifly::Face *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_x1_set(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_x1_get(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float) ((arg1)->x1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_y1_set(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_y1_get(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float) ((arg1)->y1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_x2_set(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_x2_get(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float) ((arg1)->x2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_y2_set(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_y2_get(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float) ((arg1)->y2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Rect__SWIG_0() {
  void * jresult ;
  nifly::Rect *result = 0 ;
  
  result = (nifly::Rect *)new nifly::Rect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Rect__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  nifly::Rect *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (nifly::Rect *)new nifly::Rect(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_GetLeft(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float)(arg1)->GetLeft();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_GetTop(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float)(arg1)->GetTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_GetRight(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float)(arg1)->GetRight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_GetBottom(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float)(arg1)->GetBottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Rect_GetTopLeft(void * jarg1) {
  void * jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (arg1)->GetTopLeft();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Rect_GetBottomRight(void * jarg1) {
  void * jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (arg1)->GetBottomRight();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Rect_GetTopRight(void * jarg1) {
  void * jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (arg1)->GetTopRight();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Rect_GetBottomLeft(void * jarg1) {
  void * jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (arg1)->GetBottomLeft();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Rect_GetCenter(void * jarg1) {
  void * jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (arg1)->GetCenter();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_GetWidth(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float)(arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_Rect_GetHeight(void * jarg1) {
  float jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (float)(arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Rect_GetSize(void * jarg1) {
  void * jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (arg1)->GetSize();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetLeft(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLeft(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetTop(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetRight(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetBottom(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetBottom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetTopLeft(void * jarg1, void * jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 *arg2 = 0 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetTopLeft((nifly::Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetBottomRight(void * jarg1, void * jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 *arg2 = 0 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetBottomRight((nifly::Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetTopRight(void * jarg1, void * jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 *arg2 = 0 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetTopRight((nifly::Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetBottomLeft(void * jarg1, void * jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 *arg2 = 0 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetBottomLeft((nifly::Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetWidth(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_Rect_SetHeight(void * jarg1, float jarg2) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHeight(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_Rect_Normalized(void * jarg1) {
  void * jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Rect result;
  
  arg1 = (nifly::Rect *)jarg1; 
  result = (arg1)->Normalized();
  jresult = new nifly::Rect((const nifly::Rect &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_Rect_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  nifly::Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (nifly::Rect *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Contains((nifly::Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Rect(void * jarg1) {
  nifly::Rect *arg1 = (nifly::Rect *) 0 ;
  
  arg1 = (nifly::Rect *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticles_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiParticles::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticles_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiParticles *arg1 = (nifly::NiParticles *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiParticles *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiParticles() {
  void * jresult ;
  nifly::NiParticles *result = 0 ;
  
  result = (nifly::NiParticles *)new nifly::NiParticles();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiParticles(void * jarg1) {
  nifly::NiParticles *arg1 = (nifly::NiParticles *) 0 ;
  
  arg1 = (nifly::NiParticles *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAutoNormalParticles_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiAutoNormalParticles::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAutoNormalParticles_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiAutoNormalParticles *arg1 = (nifly::NiAutoNormalParticles *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiAutoNormalParticles *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiAutoNormalParticles() {
  void * jresult ;
  nifly::NiAutoNormalParticles *result = 0 ;
  
  result = (nifly::NiAutoNormalParticles *)new nifly::NiAutoNormalParticles();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiAutoNormalParticles(void * jarg1) {
  nifly::NiAutoNormalParticles *arg1 = (nifly::NiAutoNormalParticles *) 0 ;
  
  arg1 = (nifly::NiAutoNormalParticles *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticleMeshes_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiParticleMeshes::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticleMeshes_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiParticleMeshes *arg1 = (nifly::NiParticleMeshes *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiParticleMeshes *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiParticleMeshes() {
  void * jresult ;
  nifly::NiParticleMeshes *result = 0 ;
  
  result = (nifly::NiParticleMeshes *)new nifly::NiParticleMeshes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiParticleMeshes(void * jarg1) {
  nifly::NiParticleMeshes *arg1 = (nifly::NiParticleMeshes *) 0 ;
  
  arg1 = (nifly::NiParticleMeshes *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiRotatingParticles_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiRotatingParticles::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiRotatingParticles_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiRotatingParticles *arg1 = (nifly::NiRotatingParticles *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiRotatingParticles *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiRotatingParticles() {
  void * jresult ;
  nifly::NiRotatingParticles *result = 0 ;
  
  result = (nifly::NiRotatingParticles *)new nifly::NiRotatingParticles();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiRotatingParticles(void * jarg1) {
  nifly::NiRotatingParticles *arg1 = (nifly::NiRotatingParticles *) 0 ;
  
  arg1 = (nifly::NiRotatingParticles *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_hasRadii_set(void * jarg1, unsigned int jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasRadii = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiParticlesData_hasRadii_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (bool) ((arg1)->hasRadii);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_numActive_set(void * jarg1, unsigned short jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numActive = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiParticlesData_numActive_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (uint16_t) ((arg1)->numActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_hasSizes_set(void * jarg1, unsigned int jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasSizes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiParticlesData_hasSizes_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (bool) ((arg1)->hasSizes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_hasRotations_set(void * jarg1, unsigned int jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasRotations = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiParticlesData_hasRotations_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (bool) ((arg1)->hasRotations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_hasRotationAngles_set(void * jarg1, unsigned int jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasRotationAngles = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiParticlesData_hasRotationAngles_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (bool) ((arg1)->hasRotationAngles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_hasRotationAxes_set(void * jarg1, unsigned int jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasRotationAxes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiParticlesData_hasRotationAxes_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (bool) ((arg1)->hasRotationAxes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_hasTextureIndices_set(void * jarg1, unsigned int jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasTextureIndices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiParticlesData_hasTextureIndices_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (bool) ((arg1)->hasTextureIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_aspectRatio_set(void * jarg1, float jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiParticlesData_aspectRatio_get(void * jarg1) {
  float jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  float result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (float) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_aspectFlags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->aspectFlags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiParticlesData_aspectFlags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (uint16_t) ((arg1)->aspectFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_speedToAspectAspect2_set(void * jarg1, float jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->speedToAspectAspect2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiParticlesData_speedToAspectAspect2_get(void * jarg1) {
  float jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  float result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (float) ((arg1)->speedToAspectAspect2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_speedToAspectSpeed1_set(void * jarg1, float jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->speedToAspectSpeed1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiParticlesData_speedToAspectSpeed1_get(void * jarg1) {
  float jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  float result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (float) ((arg1)->speedToAspectSpeed1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_speedToAspectSpeed2_set(void * jarg1, float jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->speedToAspectSpeed2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiParticlesData_speedToAspectSpeed2_get(void * jarg1) {
  float jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  float result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (float) ((arg1)->speedToAspectSpeed2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiParticlesData() {
  void * jresult ;
  nifly::NiParticlesData *result = 0 ;
  
  result = (nifly::NiParticlesData *)new nifly::NiParticlesData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticlesData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiParticlesData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticlesData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_Sync(void * jarg1, void * jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticlesData_GetSubtexOffsets(void * jarg1) {
  void * jresult ;
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  SwigValueWrapper< std::vector< nifly::Vector4 > > result;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  result = ((nifly::NiParticlesData const *)arg1)->GetSubtexOffsets();
  jresult = new std::vector< nifly::Vector4 >((const std::vector< nifly::Vector4 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticlesData_SetSubtexOffsets(void * jarg1, void * jarg2) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  std::vector< nifly::Vector4 > *arg2 = 0 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  arg2 = (std::vector< nifly::Vector4 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Vector4 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetSubtexOffsets((std::vector< nifly::Vector4 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiParticlesData(void * jarg1) {
  nifly::NiParticlesData *arg1 = (nifly::NiParticlesData *) 0 ;
  
  arg1 = (nifly::NiParticlesData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAutoNormalParticlesData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiAutoNormalParticlesData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAutoNormalParticlesData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiAutoNormalParticlesData *arg1 = (nifly::NiAutoNormalParticlesData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiAutoNormalParticlesData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiAutoNormalParticlesData() {
  void * jresult ;
  nifly::NiAutoNormalParticlesData *result = 0 ;
  
  result = (nifly::NiAutoNormalParticlesData *)new nifly::NiAutoNormalParticlesData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiAutoNormalParticlesData(void * jarg1) {
  nifly::NiAutoNormalParticlesData *arg1 = (nifly::NiAutoNormalParticlesData *) 0 ;
  
  arg1 = (nifly::NiAutoNormalParticlesData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiRotatingParticlesData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiRotatingParticlesData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiRotatingParticlesData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiRotatingParticlesData *arg1 = (nifly::NiRotatingParticlesData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiRotatingParticlesData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiRotatingParticlesData() {
  void * jresult ;
  nifly::NiRotatingParticlesData *result = 0 ;
  
  result = (nifly::NiRotatingParticlesData *)new nifly::NiRotatingParticlesData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiRotatingParticlesData(void * jarg1) {
  nifly::NiRotatingParticlesData *arg1 = (nifly::NiRotatingParticlesData *) 0 ;
  
  arg1 = (nifly::NiRotatingParticlesData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleMeshesData_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiParticleMeshesData *arg1 = (nifly::NiParticleMeshesData *) 0 ;
  nifly::NiBlockRef< nifly::NiAVObject > *arg2 = (nifly::NiBlockRef< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiParticleMeshesData *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleMeshesData_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiParticleMeshesData *arg1 = (nifly::NiParticleMeshesData *) 0 ;
  nifly::NiBlockRef< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiParticleMeshesData *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiAVObject > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticleMeshesData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiParticleMeshesData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticleMeshesData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiParticleMeshesData *arg1 = (nifly::NiParticleMeshesData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiParticleMeshesData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleMeshesData_Sync(void * jarg1, void * jarg2) {
  nifly::NiParticleMeshesData *arg1 = (nifly::NiParticleMeshesData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiParticleMeshesData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleMeshesData_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiParticleMeshesData *arg1 = (nifly::NiParticleMeshesData *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiParticleMeshesData *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleMeshesData_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiParticleMeshesData *arg1 = (nifly::NiParticleMeshesData *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiParticleMeshesData *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiParticleMeshesData() {
  void * jresult ;
  nifly::NiParticleMeshesData *result = 0 ;
  
  result = (nifly::NiParticleMeshesData *)new nifly::NiParticleMeshesData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiParticleMeshesData(void * jarg1) {
  nifly::NiParticleMeshesData *arg1 = (nifly::NiParticleMeshesData *) 0 ;
  
  arg1 = (nifly::NiParticleMeshesData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysData_unknownVector_set(void * jarg1, void * jarg2) {
  nifly::NiPSysData *arg1 = (nifly::NiPSysData *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysData *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->unknownVector = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysData_unknownVector_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysData *arg1 = (nifly::NiPSysData *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysData *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->unknownVector);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysData_hasRotationSpeeds_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysData *arg1 = (nifly::NiPSysData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasRotationSpeeds = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysData_hasRotationSpeeds_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysData *arg1 = (nifly::NiPSysData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysData *)jarg1; 
  result = (bool) ((arg1)->hasRotationSpeeds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysData *arg1 = (nifly::NiPSysData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysData_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysData *arg1 = (nifly::NiPSysData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysData() {
  void * jresult ;
  nifly::NiPSysData *result = 0 ;
  
  result = (nifly::NiPSysData *)new nifly::NiPSysData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysData(void * jarg1) {
  nifly::NiPSysData *arg1 = (nifly::NiPSysData *) 0 ;
  
  arg1 = (nifly::NiPSysData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMeshPSysData_defaultPoolSize_set(void * jarg1, unsigned int jarg2) {
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->defaultPoolSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiMeshPSysData_defaultPoolSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  result = (uint32_t) ((arg1)->defaultPoolSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMeshPSysData_fillPoolsOnLoad_set(void * jarg1, unsigned int jarg2) {
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fillPoolsOnLoad = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiMeshPSysData_fillPoolsOnLoad_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  bool result;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  result = (bool) ((arg1)->fillPoolsOnLoad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMeshPSysData_generationPoolSize_set(void * jarg1, void * jarg2) {
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  nifly::NiVector< uint32_t > *arg2 = (nifly::NiVector< uint32_t > *) 0 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  arg2 = (nifly::NiVector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->generationPoolSize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiMeshPSysData_generationPoolSize_get(void * jarg1) {
  void * jresult ;
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  nifly::NiVector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  result = (nifly::NiVector< uint32_t > *)& ((arg1)->generationPoolSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMeshPSysData_nodeRef_set(void * jarg1, void * jarg2) {
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  nifly::NiBlockRef< nifly::NiNode > *arg2 = (nifly::NiBlockRef< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->nodeRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiMeshPSysData_nodeRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  nifly::NiBlockRef< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiNode > *)& ((arg1)->nodeRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMeshPSysData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiMeshPSysData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMeshPSysData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMeshPSysData_Sync(void * jarg1, void * jarg2) {
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMeshPSysData_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMeshPSysData_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiMeshPSysData() {
  void * jresult ;
  nifly::NiMeshPSysData *result = 0 ;
  
  result = (nifly::NiMeshPSysData *)new nifly::NiMeshPSysData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiMeshPSysData(void * jarg1) {
  nifly::NiMeshPSysData *arg1 = (nifly::NiMeshPSysData *) 0 ;
  
  arg1 = (nifly::NiMeshPSysData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSStripPSysData_maxPointCount_set(void * jarg1, unsigned short jarg2) {
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->maxPointCount = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSStripPSysData_maxPointCount_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  result = (uint16_t) ((arg1)->maxPointCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSStripPSysData_startCapSize_set(void * jarg1, unsigned int jarg2) {
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->startCapSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSStripPSysData_startCapSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  result = (uint32_t) ((arg1)->startCapSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSStripPSysData_endCapSize_set(void * jarg1, unsigned int jarg2) {
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->endCapSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSStripPSysData_endCapSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  result = (uint32_t) ((arg1)->endCapSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSStripPSysData_doZPrepass_set(void * jarg1, unsigned int jarg2) {
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->doZPrepass = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSStripPSysData_doZPrepass_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  bool result;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  result = (bool) ((arg1)->doZPrepass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSStripPSysData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSStripPSysData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSStripPSysData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSStripPSysData_Sync(void * jarg1, void * jarg2) {
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSStripPSysData() {
  void * jresult ;
  nifly::BSStripPSysData *result = 0 ;
  
  result = (nifly::BSStripPSysData *)new nifly::BSStripPSysData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSStripPSysData(void * jarg1) {
  nifly::BSStripPSysData *arg1 = (nifly::BSStripPSysData *) 0 ;
  
  arg1 = (nifly::BSStripPSysData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlrData_floatKeys_set(void * jarg1, void * jarg2) {
  nifly::NiPSysEmitterCtlrData *arg1 = (nifly::NiPSysEmitterCtlrData *) 0 ;
  nifly::KeyGroup< float > *arg2 = (nifly::KeyGroup< float > *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlrData *)jarg1; 
  arg2 = (nifly::KeyGroup< float > *)jarg2; 
  if (arg1) (arg1)->floatKeys = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlrData_floatKeys_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysEmitterCtlrData *arg1 = (nifly::NiPSysEmitterCtlrData *) 0 ;
  nifly::KeyGroup< float > *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlrData *)jarg1; 
  result = (nifly::KeyGroup< float > *)& ((arg1)->floatKeys);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlrData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysEmitterCtlrData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlrData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysEmitterCtlrData *arg1 = (nifly::NiPSysEmitterCtlrData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlrData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlrData_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysEmitterCtlrData *arg1 = (nifly::NiPSysEmitterCtlrData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlrData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlrData_GetVisibilityKeys(void * jarg1) {
  void * jresult ;
  nifly::NiPSysEmitterCtlrData *arg1 = (nifly::NiPSysEmitterCtlrData *) 0 ;
  SwigValueWrapper< std::vector< nifly::Key< unsigned char > > > result;
  
  arg1 = (nifly::NiPSysEmitterCtlrData *)jarg1; 
  result = ((nifly::NiPSysEmitterCtlrData const *)arg1)->GetVisibilityKeys();
  jresult = new std::vector< nifly::Key< uint8_t > >((const std::vector< nifly::Key< uint8_t > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitterCtlrData_SetVisibilityKeys(void * jarg1, void * jarg2) {
  nifly::NiPSysEmitterCtlrData *arg1 = (nifly::NiPSysEmitterCtlrData *) 0 ;
  std::vector< nifly::Key< uint8_t > > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlrData *)jarg1; 
  arg2 = (std::vector< nifly::Key< uint8_t > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Key< uint8_t > > const & type is null", 0);
    return ;
  } 
  (arg1)->SetVisibilityKeys((std::vector< nifly::Key< uint8_t > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitterCtlrData() {
  void * jresult ;
  nifly::NiPSysEmitterCtlrData *result = 0 ;
  
  result = (nifly::NiPSysEmitterCtlrData *)new nifly::NiPSysEmitterCtlrData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitterCtlrData(void * jarg1) {
  nifly::NiPSysEmitterCtlrData *arg1 = (nifly::NiPSysEmitterCtlrData *) 0 ;
  
  arg1 = (nifly::NiPSysEmitterCtlrData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifier_name_set(void * jarg1, void * jarg2) {
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysModifier_name_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->name);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifier_order_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->order = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysModifier_order_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  result = (uint32_t) ((arg1)->order);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifier_targetRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiParticleSystem > *arg2 = (nifly::NiBlockPtr< nifly::NiParticleSystem > *) 0 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiParticleSystem > *)jarg2; 
  if (arg1) (arg1)->targetRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysModifier_targetRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiParticleSystem > *result = 0 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiParticleSystem > *)& ((arg1)->targetRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifier_isActive_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysModifier_isActive_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  result = (bool) ((arg1)->isActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifier_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysModifier_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysModifier() {
  void * jresult ;
  nifly::NiPSysModifier *result = 0 ;
  
  result = (nifly::NiPSysModifier *)new nifly::NiPSysModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysModifier(void * jarg1) {
  nifly::NiPSysModifier *arg1 = (nifly::NiPSysModifier *) 0 ;
  
  arg1 = (nifly::NiPSysModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysStripUpdateModifier_updateDeltaTime_set(void * jarg1, float jarg2) {
  nifly::BSPSysStripUpdateModifier *arg1 = (nifly::BSPSysStripUpdateModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysStripUpdateModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->updateDeltaTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysStripUpdateModifier_updateDeltaTime_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysStripUpdateModifier *arg1 = (nifly::BSPSysStripUpdateModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysStripUpdateModifier *)jarg1; 
  result = (float) ((arg1)->updateDeltaTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysStripUpdateModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysStripUpdateModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysStripUpdateModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysStripUpdateModifier *arg1 = (nifly::BSPSysStripUpdateModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysStripUpdateModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysStripUpdateModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSPSysStripUpdateModifier *arg1 = (nifly::BSPSysStripUpdateModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysStripUpdateModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysStripUpdateModifier() {
  void * jresult ;
  nifly::BSPSysStripUpdateModifier *result = 0 ;
  
  result = (nifly::BSPSysStripUpdateModifier *)new nifly::BSPSysStripUpdateModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysStripUpdateModifier(void * jarg1) {
  nifly::BSPSysStripUpdateModifier *arg1 = (nifly::BSPSysStripUpdateModifier *) 0 ;
  
  arg1 = (nifly::BSPSysStripUpdateModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_numSpawnGenerations_set(void * jarg1, unsigned short jarg2) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numSpawnGenerations = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_numSpawnGenerations_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  result = (uint16_t) ((arg1)->numSpawnGenerations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_percentSpawned_set(void * jarg1, float jarg2) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->percentSpawned = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_percentSpawned_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  result = (float) ((arg1)->percentSpawned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_minSpawned_set(void * jarg1, unsigned short jarg2) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->minSpawned = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_minSpawned_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  result = (uint16_t) ((arg1)->minSpawned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_maxSpawned_set(void * jarg1, unsigned short jarg2) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->maxSpawned = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_maxSpawned_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  result = (uint16_t) ((arg1)->maxSpawned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_spawnSpeedVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->spawnSpeedVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_spawnSpeedVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  result = (float) ((arg1)->spawnSpeedVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_spawnDirVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->spawnDirVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_spawnDirVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  result = (float) ((arg1)->spawnDirVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_lifeSpan_set(void * jarg1, float jarg2) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lifeSpan = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_lifeSpan_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  result = (float) ((arg1)->lifeSpan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_lifeSpanVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lifeSpanVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_lifeSpanVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  result = (float) ((arg1)->lifeSpanVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysSpawnModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSpawnModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysSpawnModifier() {
  void * jresult ;
  nifly::NiPSysSpawnModifier *result = 0 ;
  
  result = (nifly::NiPSysSpawnModifier *)new nifly::NiPSysSpawnModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysSpawnModifier(void * jarg1) {
  nifly::NiPSysSpawnModifier *arg1 = (nifly::NiPSysSpawnModifier *) 0 ;
  
  arg1 = (nifly::NiPSysSpawnModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAgeDeathModifier_spawnOnDeath_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysAgeDeathModifier *arg1 = (nifly::NiPSysAgeDeathModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysAgeDeathModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->spawnOnDeath = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysAgeDeathModifier_spawnOnDeath_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysAgeDeathModifier *arg1 = (nifly::NiPSysAgeDeathModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysAgeDeathModifier *)jarg1; 
  result = (bool) ((arg1)->spawnOnDeath);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAgeDeathModifier_spawnModifierRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysAgeDeathModifier *arg1 = (nifly::NiPSysAgeDeathModifier *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *arg2 = (nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *) 0 ;
  
  arg1 = (nifly::NiPSysAgeDeathModifier *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *)jarg2; 
  if (arg1) (arg1)->spawnModifierRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysAgeDeathModifier_spawnModifierRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysAgeDeathModifier *arg1 = (nifly::NiPSysAgeDeathModifier *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *result = 0 ;
  
  arg1 = (nifly::NiPSysAgeDeathModifier *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *)& ((arg1)->spawnModifierRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAgeDeathModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysAgeDeathModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAgeDeathModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysAgeDeathModifier *arg1 = (nifly::NiPSysAgeDeathModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysAgeDeathModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAgeDeathModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysAgeDeathModifier *arg1 = (nifly::NiPSysAgeDeathModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysAgeDeathModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAgeDeathModifier_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPSysAgeDeathModifier *arg1 = (nifly::NiPSysAgeDeathModifier *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysAgeDeathModifier *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAgeDeathModifier_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPSysAgeDeathModifier *arg1 = (nifly::NiPSysAgeDeathModifier *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysAgeDeathModifier *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysAgeDeathModifier() {
  void * jresult ;
  nifly::NiPSysAgeDeathModifier *result = 0 ;
  
  result = (nifly::NiPSysAgeDeathModifier *)new nifly::NiPSysAgeDeathModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysAgeDeathModifier(void * jarg1) {
  nifly::NiPSysAgeDeathModifier *arg1 = (nifly::NiPSysAgeDeathModifier *) 0 ;
  
  arg1 = (nifly::NiPSysAgeDeathModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_lodBeginDistance_set(void * jarg1, float jarg2) {
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lodBeginDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_lodBeginDistance_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  result = (float) ((arg1)->lodBeginDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_lodEndDistance_set(void * jarg1, float jarg2) {
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lodEndDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_lodEndDistance_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  result = (float) ((arg1)->lodEndDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_endEmitScale_set(void * jarg1, float jarg2) {
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->endEmitScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_endEmitScale_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  result = (float) ((arg1)->endEmitScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_endSize_set(void * jarg1, float jarg2) {
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->endSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_endSize_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  result = (float) ((arg1)->endSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysLODModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysLODModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysLODModifier() {
  void * jresult ;
  nifly::BSPSysLODModifier *result = 0 ;
  
  result = (nifly::BSPSysLODModifier *)new nifly::BSPSysLODModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysLODModifier(void * jarg1) {
  nifly::BSPSysLODModifier *arg1 = (nifly::BSPSysLODModifier *) 0 ;
  
  arg1 = (nifly::BSPSysLODModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_fadeInPercent_set(void * jarg1, float jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fadeInPercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_fadeInPercent_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (float) ((arg1)->fadeInPercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_fadeOutPercent_set(void * jarg1, float jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fadeOutPercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_fadeOutPercent_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (float) ((arg1)->fadeOutPercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color1EndPercent_set(void * jarg1, float jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->color1EndPercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color1EndPercent_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (float) ((arg1)->color1EndPercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color2StartPercent_set(void * jarg1, float jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->color2StartPercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color2StartPercent_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (float) ((arg1)->color2StartPercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color2EndPercent_set(void * jarg1, float jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->color2EndPercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color2EndPercent_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (float) ((arg1)->color2EndPercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color3StartPercent_set(void * jarg1, float jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->color3StartPercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color3StartPercent_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (float) ((arg1)->color3StartPercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color1_set(void * jarg1, void * jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  nifly::Color4 *arg2 = (nifly::Color4 *) 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2; 
  if (arg1) (arg1)->color1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color1_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  nifly::Color4 *result = 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (nifly::Color4 *)& ((arg1)->color1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color2_set(void * jarg1, void * jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  nifly::Color4 *arg2 = (nifly::Color4 *) 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2; 
  if (arg1) (arg1)->color2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color2_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  nifly::Color4 *result = 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (nifly::Color4 *)& ((arg1)->color2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color3_set(void * jarg1, void * jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  nifly::Color4 *arg2 = (nifly::Color4 *) 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2; 
  if (arg1) (arg1)->color3 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_color3_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  nifly::Color4 *result = 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (nifly::Color4 *)& ((arg1)->color3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_unknownShorts_set(void * jarg1, void * jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  uint16_t *arg2 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (uint16_t *)jarg2; 
  {
    size_t ii;
    uint16_t *b = (uint16_t *) arg1->unknownShorts;
    for (ii = 0; ii < (size_t)26; ii++) b[ii] = *((uint16_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_unknownShorts_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  uint16_t *result = 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (uint16_t *)(uint16_t *) ((arg1)->unknownShorts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysSimpleColorModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSimpleColorModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysSimpleColorModifier() {
  void * jresult ;
  nifly::BSPSysSimpleColorModifier *result = 0 ;
  
  result = (nifly::BSPSysSimpleColorModifier *)new nifly::BSPSysSimpleColorModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysSimpleColorModifier(void * jarg1) {
  nifly::BSPSysSimpleColorModifier *arg1 = (nifly::BSPSysSimpleColorModifier *) 0 ;
  
  arg1 = (nifly::BSPSysSimpleColorModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialSpeed_set(void * jarg1, float jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->initialSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialSpeed_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (float) ((arg1)->initialSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialSpeedVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->initialSpeedVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialSpeedVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (float) ((arg1)->initialSpeedVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_unknownVector_set(void * jarg1, void * jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  nifly::Vector4 *arg2 = (nifly::Vector4 *) 0 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = (nifly::Vector4 *)jarg2; 
  if (arg1) (arg1)->unknownVector = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_unknownVector_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  nifly::Vector4 *result = 0 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (nifly::Vector4 *)& ((arg1)->unknownVector);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_unknownByte_set(void * jarg1, unsigned char jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->unknownByte = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_unknownByte_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (uint8_t) ((arg1)->unknownByte);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialAngle_set(void * jarg1, float jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->initialAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialAngle_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (float) ((arg1)->initialAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialAngleVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->initialAngleVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialAngleVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (float) ((arg1)->initialAngleVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_randomSpeedSign_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->randomSpeedSign = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_randomSpeedSign_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (bool) ((arg1)->randomSpeedSign);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_randomInitialAxis_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->randomInitialAxis = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_randomInitialAxis_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (bool) ((arg1)->randomInitialAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialAxis_set(void * jarg1, void * jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->initialAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_initialAxis_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->initialAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysRotationModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRotationModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysRotationModifier() {
  void * jresult ;
  nifly::NiPSysRotationModifier *result = 0 ;
  
  result = (nifly::NiPSysRotationModifier *)new nifly::NiPSysRotationModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysRotationModifier(void * jarg1) {
  nifly::NiPSysRotationModifier *arg1 = (nifly::NiPSysRotationModifier *) 0 ;
  
  arg1 = (nifly::NiPSysRotationModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysScaleModifier_floats_set(void * jarg1, void * jarg2) {
  nifly::BSPSysScaleModifier *arg1 = (nifly::BSPSysScaleModifier *) 0 ;
  nifly::NiVector< float > *arg2 = (nifly::NiVector< float > *) 0 ;
  
  arg1 = (nifly::BSPSysScaleModifier *)jarg1; 
  arg2 = (nifly::NiVector< float > *)jarg2; 
  if (arg1) (arg1)->floats = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysScaleModifier_floats_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysScaleModifier *arg1 = (nifly::BSPSysScaleModifier *) 0 ;
  nifly::NiVector< float > *result = 0 ;
  
  arg1 = (nifly::BSPSysScaleModifier *)jarg1; 
  result = (nifly::NiVector< float > *)& ((arg1)->floats);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysScaleModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysScaleModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysScaleModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysScaleModifier *arg1 = (nifly::BSPSysScaleModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysScaleModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysScaleModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSPSysScaleModifier *arg1 = (nifly::BSPSysScaleModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysScaleModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysScaleModifier() {
  void * jresult ;
  nifly::BSPSysScaleModifier *result = 0 ;
  
  result = (nifly::BSPSysScaleModifier *)new nifly::BSPSysScaleModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysScaleModifier(void * jarg1) {
  nifly::BSPSysScaleModifier *arg1 = (nifly::BSPSysScaleModifier *) 0 ;
  
  arg1 = (nifly::BSPSysScaleModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_gravityObjRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *arg2 = (nifly::NiBlockPtr< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->gravityObjRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_gravityObjRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiNode > *)& ((arg1)->gravityObjRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_gravityAxis_set(void * jarg1, void * jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->gravityAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_gravityAxis_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->gravityAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_decay_set(void * jarg1, float jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->decay = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_decay_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  result = (float) ((arg1)->decay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_strength_set(void * jarg1, float jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_strength_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  result = (float) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_forceType_set(void * jarg1, int jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  nifly::ForceType arg2 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = (nifly::ForceType)jarg2; 
  if (arg1) (arg1)->forceType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_forceType_get(void * jarg1) {
  int jresult ;
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  nifly::ForceType result;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  result = (nifly::ForceType) ((arg1)->forceType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_turbulence_set(void * jarg1, float jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->turbulence = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_turbulence_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  result = (float) ((arg1)->turbulence);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_turbulenceScale_set(void * jarg1, float jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->turbulenceScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_turbulenceScale_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  result = (float) ((arg1)->turbulenceScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_worldAligned_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->worldAligned = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_worldAligned_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  result = (bool) ((arg1)->worldAligned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysGravityModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityModifier_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysGravityModifier() {
  void * jresult ;
  nifly::NiPSysGravityModifier *result = 0 ;
  
  result = (nifly::NiPSysGravityModifier *)new nifly::NiPSysGravityModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysGravityModifier(void * jarg1) {
  nifly::NiPSysGravityModifier *arg1 = (nifly::NiPSysGravityModifier *) 0 ;
  
  arg1 = (nifly::NiPSysGravityModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysPositionModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysPositionModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysPositionModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysPositionModifier *arg1 = (nifly::NiPSysPositionModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysPositionModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysPositionModifier() {
  void * jresult ;
  nifly::NiPSysPositionModifier *result = 0 ;
  
  result = (nifly::NiPSysPositionModifier *)new nifly::NiPSysPositionModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysPositionModifier(void * jarg1) {
  nifly::NiPSysPositionModifier *arg1 = (nifly::NiPSysPositionModifier *) 0 ;
  
  arg1 = (nifly::NiPSysPositionModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBoundUpdateModifier_updateSkip_set(void * jarg1, unsigned short jarg2) {
  nifly::NiPSysBoundUpdateModifier *arg1 = (nifly::NiPSysBoundUpdateModifier *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiPSysBoundUpdateModifier *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->updateSkip = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiPSysBoundUpdateModifier_updateSkip_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiPSysBoundUpdateModifier *arg1 = (nifly::NiPSysBoundUpdateModifier *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiPSysBoundUpdateModifier *)jarg1; 
  result = (uint16_t) ((arg1)->updateSkip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysBoundUpdateModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysBoundUpdateModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysBoundUpdateModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysBoundUpdateModifier *arg1 = (nifly::NiPSysBoundUpdateModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysBoundUpdateModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBoundUpdateModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysBoundUpdateModifier *arg1 = (nifly::NiPSysBoundUpdateModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysBoundUpdateModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysBoundUpdateModifier() {
  void * jresult ;
  nifly::NiPSysBoundUpdateModifier *result = 0 ;
  
  result = (nifly::NiPSysBoundUpdateModifier *)new nifly::NiPSysBoundUpdateModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysBoundUpdateModifier(void * jarg1) {
  nifly::NiPSysBoundUpdateModifier *arg1 = (nifly::NiPSysBoundUpdateModifier *) 0 ;
  
  arg1 = (nifly::NiPSysBoundUpdateModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_parentRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiObject > *arg2 = (nifly::NiBlockPtr< nifly::NiObject > *) 0 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiObject > *)jarg2; 
  if (arg1) (arg1)->parentRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_parentRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiObject > *result = 0 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiObject > *)& ((arg1)->parentRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_dragAxis_set(void * jarg1, void * jarg2) {
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->dragAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_dragAxis_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->dragAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_percentage_set(void * jarg1, float jarg2) {
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->percentage = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_percentage_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  result = (float) ((arg1)->percentage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_range_set(void * jarg1, float jarg2) {
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->range = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_range_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  result = (float) ((arg1)->range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_rangeFalloff_set(void * jarg1, float jarg2) {
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rangeFalloff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_rangeFalloff_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  result = (float) ((arg1)->rangeFalloff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysDragModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragModifier_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysDragModifier() {
  void * jresult ;
  nifly::NiPSysDragModifier *result = 0 ;
  
  result = (nifly::NiPSysDragModifier *)new nifly::NiPSysDragModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysDragModifier(void * jarg1) {
  nifly::NiPSysDragModifier *arg1 = (nifly::NiPSysDragModifier *) 0 ;
  
  arg1 = (nifly::NiPSysDragModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_targetNodeRef_set(void * jarg1, void * jarg2) {
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *arg2 = (nifly::NiBlockPtr< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->targetNodeRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_targetNodeRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiNode > *)& ((arg1)->targetNodeRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_changeToInherit_set(void * jarg1, float jarg2) {
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->changeToInherit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_changeToInherit_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  result = (float) ((arg1)->changeToInherit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_velocityMult_set(void * jarg1, float jarg2) {
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->velocityMult = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_velocityMult_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  result = (float) ((arg1)->velocityMult);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_velocityVar_set(void * jarg1, float jarg2) {
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->velocityVar = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_velocityVar_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  result = (float) ((arg1)->velocityVar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysInheritVelocityModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysInheritVelocityModifier_GetPtrs(void * jarg1, void * jarg2) {
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysInheritVelocityModifier() {
  void * jresult ;
  nifly::BSPSysInheritVelocityModifier *result = 0 ;
  
  result = (nifly::BSPSysInheritVelocityModifier *)new nifly::BSPSysInheritVelocityModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysInheritVelocityModifier(void * jarg1) {
  nifly::BSPSysInheritVelocityModifier *arg1 = (nifly::BSPSysInheritVelocityModifier *) 0 ;
  
  arg1 = (nifly::BSPSysInheritVelocityModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_startFrame_set(void * jarg1, float jarg2) {
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->startFrame = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_startFrame_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  result = (float) ((arg1)->startFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_startFrameVariation_set(void * jarg1, float jarg2) {
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->startFrameVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_startFrameVariation_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  result = (float) ((arg1)->startFrameVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_endFrame_set(void * jarg1, float jarg2) {
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->endFrame = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_endFrame_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  result = (float) ((arg1)->endFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_loopStartFrame_set(void * jarg1, float jarg2) {
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->loopStartFrame = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_loopStartFrame_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  result = (float) ((arg1)->loopStartFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_loopStartFrameVariation_set(void * jarg1, float jarg2) {
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->loopStartFrameVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_loopStartFrameVariation_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  result = (float) ((arg1)->loopStartFrameVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_frameCount_set(void * jarg1, float jarg2) {
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frameCount = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_frameCount_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  result = (float) ((arg1)->frameCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_frameCountVariation_set(void * jarg1, float jarg2) {
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frameCountVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_frameCountVariation_get(void * jarg1) {
  float jresult ;
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  result = (float) ((arg1)->frameCountVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysSubTexModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysSubTexModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysSubTexModifier() {
  void * jresult ;
  nifly::BSPSysSubTexModifier *result = 0 ;
  
  result = (nifly::BSPSysSubTexModifier *)new nifly::BSPSysSubTexModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysSubTexModifier(void * jarg1) {
  nifly::BSPSysSubTexModifier *arg1 = (nifly::BSPSysSubTexModifier *) 0 ;
  
  arg1 = (nifly::BSPSysSubTexModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_bombNodeRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *arg2 = (nifly::NiBlockPtr< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->bombNodeRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_bombNodeRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiNode > *)& ((arg1)->bombNodeRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_bombAxis_set(void * jarg1, void * jarg2) {
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->bombAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_bombAxis_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->bombAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_decay_set(void * jarg1, float jarg2) {
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->decay = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_decay_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  result = (float) ((arg1)->decay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_deltaV_set(void * jarg1, float jarg2) {
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->deltaV = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_deltaV_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  result = (float) ((arg1)->deltaV);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_decayType_set(void * jarg1, int jarg2) {
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  nifly::DecayType arg2 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  arg2 = (nifly::DecayType)jarg2; 
  if (arg1) (arg1)->decayType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_decayType_get(void * jarg1) {
  int jresult ;
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  nifly::DecayType result;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  result = (nifly::DecayType) ((arg1)->decayType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_symmetryType_set(void * jarg1, int jarg2) {
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  nifly::SymmetryType arg2 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  arg2 = (nifly::SymmetryType)jarg2; 
  if (arg1) (arg1)->symmetryType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_symmetryType_get(void * jarg1) {
  int jresult ;
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  nifly::SymmetryType result;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  result = (nifly::SymmetryType) ((arg1)->symmetryType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysBombModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBombModifier_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysBombModifier() {
  void * jresult ;
  nifly::NiPSysBombModifier *result = 0 ;
  
  result = (nifly::NiPSysBombModifier *)new nifly::NiPSysBombModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysBombModifier(void * jarg1) {
  nifly::NiPSysBombModifier *arg1 = (nifly::NiPSysBombModifier *) 0 ;
  
  arg1 = (nifly::NiPSysBombModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiColorData_data_set(void * jarg1, void * jarg2) {
  nifly::NiColorData *arg1 = (nifly::NiColorData *) 0 ;
  nifly::KeyGroup< nifly::Color4 > *arg2 = (nifly::KeyGroup< nifly::Color4 > *) 0 ;
  
  arg1 = (nifly::NiColorData *)jarg1; 
  arg2 = (nifly::KeyGroup< nifly::Color4 > *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiColorData_data_get(void * jarg1) {
  void * jresult ;
  nifly::NiColorData *arg1 = (nifly::NiColorData *) 0 ;
  nifly::KeyGroup< nifly::Color4 > *result = 0 ;
  
  arg1 = (nifly::NiColorData *)jarg1; 
  result = (nifly::KeyGroup< nifly::Color4 > *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiColorData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiColorData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiColorData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiColorData *arg1 = (nifly::NiColorData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiColorData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiColorData_Sync(void * jarg1, void * jarg2) {
  nifly::NiColorData *arg1 = (nifly::NiColorData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiColorData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiColorData() {
  void * jresult ;
  nifly::NiColorData *result = 0 ;
  
  result = (nifly::NiColorData *)new nifly::NiColorData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiColorData(void * jarg1) {
  nifly::NiColorData *arg1 = (nifly::NiColorData *) 0 ;
  
  arg1 = (nifly::NiColorData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysColorModifier_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysColorModifier *arg1 = (nifly::NiPSysColorModifier *) 0 ;
  nifly::NiBlockRef< nifly::NiColorData > *arg2 = (nifly::NiBlockRef< nifly::NiColorData > *) 0 ;
  
  arg1 = (nifly::NiPSysColorModifier *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiColorData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysColorModifier_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysColorModifier *arg1 = (nifly::NiPSysColorModifier *) 0 ;
  nifly::NiBlockRef< nifly::NiColorData > *result = 0 ;
  
  arg1 = (nifly::NiPSysColorModifier *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiColorData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysColorModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysColorModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysColorModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysColorModifier *arg1 = (nifly::NiPSysColorModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysColorModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysColorModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysColorModifier *arg1 = (nifly::NiPSysColorModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysColorModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysColorModifier_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPSysColorModifier *arg1 = (nifly::NiPSysColorModifier *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysColorModifier *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysColorModifier_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPSysColorModifier *arg1 = (nifly::NiPSysColorModifier *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysColorModifier *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysColorModifier() {
  void * jresult ;
  nifly::NiPSysColorModifier *result = 0 ;
  
  result = (nifly::NiPSysColorModifier *)new nifly::NiPSysColorModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysColorModifier(void * jarg1) {
  nifly::NiPSysColorModifier *arg1 = (nifly::NiPSysColorModifier *) 0 ;
  
  arg1 = (nifly::NiPSysColorModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_growTime_set(void * jarg1, float jarg2) {
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->growTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_growTime_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  result = (float) ((arg1)->growTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_growGeneration_set(void * jarg1, unsigned short jarg2) {
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->growGeneration = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_growGeneration_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  result = (uint16_t) ((arg1)->growGeneration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_fadeTime_set(void * jarg1, float jarg2) {
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fadeTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_fadeTime_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  result = (float) ((arg1)->fadeTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_fadeGeneration_set(void * jarg1, unsigned short jarg2) {
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->fadeGeneration = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_fadeGeneration_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  result = (uint16_t) ((arg1)->fadeGeneration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_baseScale_set(void * jarg1, float jarg2) {
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->baseScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_baseScale_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  result = (float) ((arg1)->baseScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysGrowFadeModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGrowFadeModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysGrowFadeModifier() {
  void * jresult ;
  nifly::NiPSysGrowFadeModifier *result = 0 ;
  
  result = (nifly::NiPSysGrowFadeModifier *)new nifly::NiPSysGrowFadeModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysGrowFadeModifier(void * jarg1) {
  nifly::NiPSysGrowFadeModifier *arg1 = (nifly::NiPSysGrowFadeModifier *) 0 ;
  
  arg1 = (nifly::NiPSysGrowFadeModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshUpdateModifier_meshRefs_set(void * jarg1, void * jarg2) {
  nifly::NiPSysMeshUpdateModifier *arg1 = (nifly::NiPSysMeshUpdateModifier *) 0 ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg2 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiPSysMeshUpdateModifier *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->meshRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysMeshUpdateModifier_meshRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysMeshUpdateModifier *arg1 = (nifly::NiPSysMeshUpdateModifier *) 0 ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiPSysMeshUpdateModifier *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiAVObject > *)& ((arg1)->meshRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysMeshUpdateModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysMeshUpdateModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysMeshUpdateModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysMeshUpdateModifier *arg1 = (nifly::NiPSysMeshUpdateModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysMeshUpdateModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshUpdateModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysMeshUpdateModifier *arg1 = (nifly::NiPSysMeshUpdateModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysMeshUpdateModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshUpdateModifier_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPSysMeshUpdateModifier *arg1 = (nifly::NiPSysMeshUpdateModifier *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysMeshUpdateModifier *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshUpdateModifier_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPSysMeshUpdateModifier *arg1 = (nifly::NiPSysMeshUpdateModifier *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysMeshUpdateModifier *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysMeshUpdateModifier() {
  void * jresult ;
  nifly::NiPSysMeshUpdateModifier *result = 0 ;
  
  result = (nifly::NiPSysMeshUpdateModifier *)new nifly::NiPSysMeshUpdateModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysMeshUpdateModifier(void * jarg1) {
  nifly::NiPSysMeshUpdateModifier *arg1 = (nifly::NiPSysMeshUpdateModifier *) 0 ;
  
  arg1 = (nifly::NiPSysMeshUpdateModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_fieldObjectRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  nifly::NiBlockRef< nifly::NiAVObject > *arg2 = (nifly::NiBlockRef< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->fieldObjectRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_fieldObjectRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  nifly::NiBlockRef< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiAVObject > *)& ((arg1)->fieldObjectRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_magnitude_set(void * jarg1, float jarg2) {
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->magnitude = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_magnitude_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  result = (float) ((arg1)->magnitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_attenuation_set(void * jarg1, float jarg2) {
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->attenuation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_attenuation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  result = (float) ((arg1)->attenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_useMaxDistance_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useMaxDistance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_useMaxDistance_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  result = (bool) ((arg1)->useMaxDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_maxDistance_set(void * jarg1, float jarg2) {
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_maxDistance_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  result = (float) ((arg1)->maxDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysFieldModifier_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysFieldModifier() {
  void * jresult ;
  nifly::NiPSysFieldModifier *result = 0 ;
  
  result = (nifly::NiPSysFieldModifier *)new nifly::NiPSysFieldModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysFieldModifier(void * jarg1) {
  nifly::NiPSysFieldModifier *arg1 = (nifly::NiPSysFieldModifier *) 0 ;
  
  arg1 = (nifly::NiPSysFieldModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysVortexFieldModifier_direction_set(void * jarg1, void * jarg2) {
  nifly::NiPSysVortexFieldModifier *arg1 = (nifly::NiPSysVortexFieldModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysVortexFieldModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysVortexFieldModifier_direction_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysVortexFieldModifier *arg1 = (nifly::NiPSysVortexFieldModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysVortexFieldModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->direction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysVortexFieldModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysVortexFieldModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysVortexFieldModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysVortexFieldModifier *arg1 = (nifly::NiPSysVortexFieldModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysVortexFieldModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysVortexFieldModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysVortexFieldModifier *arg1 = (nifly::NiPSysVortexFieldModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysVortexFieldModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysVortexFieldModifier() {
  void * jresult ;
  nifly::NiPSysVortexFieldModifier *result = 0 ;
  
  result = (nifly::NiPSysVortexFieldModifier *)new nifly::NiPSysVortexFieldModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysVortexFieldModifier(void * jarg1) {
  nifly::NiPSysVortexFieldModifier *arg1 = (nifly::NiPSysVortexFieldModifier *) 0 ;
  
  arg1 = (nifly::NiPSysVortexFieldModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityFieldModifier_direction_set(void * jarg1, void * jarg2) {
  nifly::NiPSysGravityFieldModifier *arg1 = (nifly::NiPSysGravityFieldModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysGravityFieldModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysGravityFieldModifier_direction_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysGravityFieldModifier *arg1 = (nifly::NiPSysGravityFieldModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysGravityFieldModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->direction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysGravityFieldModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysGravityFieldModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysGravityFieldModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysGravityFieldModifier *arg1 = (nifly::NiPSysGravityFieldModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysGravityFieldModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysGravityFieldModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysGravityFieldModifier *arg1 = (nifly::NiPSysGravityFieldModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysGravityFieldModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysGravityFieldModifier() {
  void * jresult ;
  nifly::NiPSysGravityFieldModifier *result = 0 ;
  
  result = (nifly::NiPSysGravityFieldModifier *)new nifly::NiPSysGravityFieldModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysGravityFieldModifier(void * jarg1) {
  nifly::NiPSysGravityFieldModifier *arg1 = (nifly::NiPSysGravityFieldModifier *) 0 ;
  
  arg1 = (nifly::NiPSysGravityFieldModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragFieldModifier_useDirection_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysDragFieldModifier *arg1 = (nifly::NiPSysDragFieldModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysDragFieldModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useDirection = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysDragFieldModifier_useDirection_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysDragFieldModifier *arg1 = (nifly::NiPSysDragFieldModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysDragFieldModifier *)jarg1; 
  result = (bool) ((arg1)->useDirection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragFieldModifier_direction_set(void * jarg1, void * jarg2) {
  nifly::NiPSysDragFieldModifier *arg1 = (nifly::NiPSysDragFieldModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysDragFieldModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysDragFieldModifier_direction_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysDragFieldModifier *arg1 = (nifly::NiPSysDragFieldModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysDragFieldModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->direction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysDragFieldModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysDragFieldModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysDragFieldModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysDragFieldModifier *arg1 = (nifly::NiPSysDragFieldModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysDragFieldModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysDragFieldModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysDragFieldModifier *arg1 = (nifly::NiPSysDragFieldModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysDragFieldModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysDragFieldModifier() {
  void * jresult ;
  nifly::NiPSysDragFieldModifier *result = 0 ;
  
  result = (nifly::NiPSysDragFieldModifier *)new nifly::NiPSysDragFieldModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysDragFieldModifier(void * jarg1) {
  nifly::NiPSysDragFieldModifier *arg1 = (nifly::NiPSysDragFieldModifier *) 0 ;
  
  arg1 = (nifly::NiPSysDragFieldModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysTurbulenceFieldModifier_frequency_set(void * jarg1, float jarg2) {
  nifly::NiPSysTurbulenceFieldModifier *arg1 = (nifly::NiPSysTurbulenceFieldModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysTurbulenceFieldModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->frequency = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysTurbulenceFieldModifier_frequency_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysTurbulenceFieldModifier *arg1 = (nifly::NiPSysTurbulenceFieldModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysTurbulenceFieldModifier *)jarg1; 
  result = (float) ((arg1)->frequency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysTurbulenceFieldModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysTurbulenceFieldModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysTurbulenceFieldModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysTurbulenceFieldModifier *arg1 = (nifly::NiPSysTurbulenceFieldModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysTurbulenceFieldModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysTurbulenceFieldModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysTurbulenceFieldModifier *arg1 = (nifly::NiPSysTurbulenceFieldModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysTurbulenceFieldModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysTurbulenceFieldModifier() {
  void * jresult ;
  nifly::NiPSysTurbulenceFieldModifier *result = 0 ;
  
  result = (nifly::NiPSysTurbulenceFieldModifier *)new nifly::NiPSysTurbulenceFieldModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysTurbulenceFieldModifier(void * jarg1) {
  nifly::NiPSysTurbulenceFieldModifier *arg1 = (nifly::NiPSysTurbulenceFieldModifier *) 0 ;
  
  arg1 = (nifly::NiPSysTurbulenceFieldModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_direction_set(void * jarg1, void * jarg2) {
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_direction_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->direction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_airFriction_set(void * jarg1, float jarg2) {
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->airFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_airFriction_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  result = (float) ((arg1)->airFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_inheritVelocity_set(void * jarg1, float jarg2) {
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->inheritVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_inheritVelocity_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  result = (float) ((arg1)->inheritVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_inheritRotation_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->inheritRotation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_inheritRotation_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  result = (bool) ((arg1)->inheritRotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_componentOnly_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->componentOnly = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_componentOnly_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  result = (bool) ((arg1)->componentOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_enableSpread_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableSpread = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_enableSpread_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  result = (bool) ((arg1)->enableSpread);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_spread_set(void * jarg1, float jarg2) {
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->spread = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_spread_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  result = (float) ((arg1)->spread);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysAirFieldModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysAirFieldModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysAirFieldModifier() {
  void * jresult ;
  nifly::NiPSysAirFieldModifier *result = 0 ;
  
  result = (nifly::NiPSysAirFieldModifier *)new nifly::NiPSysAirFieldModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysAirFieldModifier(void * jarg1) {
  nifly::NiPSysAirFieldModifier *arg1 = (nifly::NiPSysAirFieldModifier *) 0 ;
  
  arg1 = (nifly::NiPSysAirFieldModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRadialFieldModifier_radialType_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysRadialFieldModifier *arg1 = (nifly::NiPSysRadialFieldModifier *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiPSysRadialFieldModifier *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->radialType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysRadialFieldModifier_radialType_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysRadialFieldModifier *arg1 = (nifly::NiPSysRadialFieldModifier *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiPSysRadialFieldModifier *)jarg1; 
  result = (uint32_t) ((arg1)->radialType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysRadialFieldModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysRadialFieldModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysRadialFieldModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysRadialFieldModifier *arg1 = (nifly::NiPSysRadialFieldModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysRadialFieldModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysRadialFieldModifier_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysRadialFieldModifier *arg1 = (nifly::NiPSysRadialFieldModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysRadialFieldModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysRadialFieldModifier() {
  void * jresult ;
  nifly::NiPSysRadialFieldModifier *result = 0 ;
  
  result = (nifly::NiPSysRadialFieldModifier *)new nifly::NiPSysRadialFieldModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysRadialFieldModifier(void * jarg1) {
  nifly::NiPSysRadialFieldModifier *arg1 = (nifly::NiPSysRadialFieldModifier *) 0 ;
  
  arg1 = (nifly::NiPSysRadialFieldModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSWindModifier_strength_set(void * jarg1, float jarg2) {
  nifly::BSWindModifier *arg1 = (nifly::BSWindModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSWindModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSWindModifier_strength_get(void * jarg1) {
  float jresult ;
  nifly::BSWindModifier *arg1 = (nifly::BSWindModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSWindModifier *)jarg1; 
  result = (float) ((arg1)->strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSWindModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSWindModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSWindModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSWindModifier *arg1 = (nifly::BSWindModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSWindModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSWindModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSWindModifier *arg1 = (nifly::BSWindModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSWindModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSWindModifier() {
  void * jresult ;
  nifly::BSWindModifier *result = 0 ;
  
  result = (nifly::BSWindModifier *)new nifly::BSWindModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSWindModifier(void * jarg1) {
  nifly::BSWindModifier *arg1 = (nifly::BSWindModifier *) 0 ;
  
  arg1 = (nifly::BSWindModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_boundOffset_set(void * jarg1, void * jarg2) {
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->boundOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_boundOffset_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->boundOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_boundExtent_set(void * jarg1, void * jarg2) {
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->boundExtent = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_boundExtent_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->boundExtent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_targetNodeRef_set(void * jarg1, void * jarg2) {
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *arg2 = (nifly::NiBlockPtr< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->targetNodeRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_targetNodeRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiNode > *)& ((arg1)->targetNodeRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysRecycleBoundModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysRecycleBoundModifier_GetPtrs(void * jarg1, void * jarg2) {
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysRecycleBoundModifier() {
  void * jresult ;
  nifly::BSPSysRecycleBoundModifier *result = 0 ;
  
  result = (nifly::BSPSysRecycleBoundModifier *)new nifly::BSPSysRecycleBoundModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysRecycleBoundModifier(void * jarg1) {
  nifly::BSPSysRecycleBoundModifier *arg1 = (nifly::BSPSysRecycleBoundModifier *) 0 ;
  
  arg1 = (nifly::BSPSysRecycleBoundModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysHavokUpdateModifier_nodeRefs_set(void * jarg1, void * jarg2) {
  nifly::BSPSysHavokUpdateModifier *arg1 = (nifly::BSPSysHavokUpdateModifier *) 0 ;
  nifly::NiBlockRefArray< nifly::NiNode > *arg2 = (nifly::NiBlockRefArray< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::BSPSysHavokUpdateModifier *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->nodeRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysHavokUpdateModifier_nodeRefs_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysHavokUpdateModifier *arg1 = (nifly::BSPSysHavokUpdateModifier *) 0 ;
  nifly::NiBlockRefArray< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::BSPSysHavokUpdateModifier *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiNode > *)& ((arg1)->nodeRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysHavokUpdateModifier_modifierRef_set(void * jarg1, void * jarg2) {
  nifly::BSPSysHavokUpdateModifier *arg1 = (nifly::BSPSysHavokUpdateModifier *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysModifier > *arg2 = (nifly::NiBlockRef< nifly::NiPSysModifier > *) 0 ;
  
  arg1 = (nifly::BSPSysHavokUpdateModifier *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPSysModifier > *)jarg2; 
  if (arg1) (arg1)->modifierRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSPSysHavokUpdateModifier_modifierRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSPSysHavokUpdateModifier *arg1 = (nifly::BSPSysHavokUpdateModifier *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysModifier > *result = 0 ;
  
  arg1 = (nifly::BSPSysHavokUpdateModifier *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPSysModifier > *)& ((arg1)->modifierRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysHavokUpdateModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysHavokUpdateModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysHavokUpdateModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysHavokUpdateModifier *arg1 = (nifly::BSPSysHavokUpdateModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysHavokUpdateModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysHavokUpdateModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSPSysHavokUpdateModifier *arg1 = (nifly::BSPSysHavokUpdateModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysHavokUpdateModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysHavokUpdateModifier_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSPSysHavokUpdateModifier *arg1 = (nifly::BSPSysHavokUpdateModifier *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysHavokUpdateModifier *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSPSysHavokUpdateModifier_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSPSysHavokUpdateModifier *arg1 = (nifly::BSPSysHavokUpdateModifier *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSPSysHavokUpdateModifier *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysHavokUpdateModifier() {
  void * jresult ;
  nifly::BSPSysHavokUpdateModifier *result = 0 ;
  
  result = (nifly::BSPSysHavokUpdateModifier *)new nifly::BSPSysHavokUpdateModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysHavokUpdateModifier(void * jarg1) {
  nifly::BSPSysHavokUpdateModifier *arg1 = (nifly::BSPSysHavokUpdateModifier *) 0 ;
  
  arg1 = (nifly::BSPSysHavokUpdateModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSParentVelocityModifier_damping_set(void * jarg1, float jarg2) {
  nifly::BSParentVelocityModifier *arg1 = (nifly::BSParentVelocityModifier *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSParentVelocityModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSParentVelocityModifier_damping_get(void * jarg1) {
  float jresult ;
  nifly::BSParentVelocityModifier *arg1 = (nifly::BSParentVelocityModifier *) 0 ;
  float result;
  
  arg1 = (nifly::BSParentVelocityModifier *)jarg1; 
  result = (float) ((arg1)->damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSParentVelocityModifier_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSParentVelocityModifier::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSParentVelocityModifier_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSParentVelocityModifier *arg1 = (nifly::BSParentVelocityModifier *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSParentVelocityModifier *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSParentVelocityModifier_Sync(void * jarg1, void * jarg2) {
  nifly::BSParentVelocityModifier *arg1 = (nifly::BSParentVelocityModifier *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSParentVelocityModifier *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSParentVelocityModifier() {
  void * jresult ;
  nifly::BSParentVelocityModifier *result = 0 ;
  
  result = (nifly::BSParentVelocityModifier *)new nifly::BSParentVelocityModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSParentVelocityModifier(void * jarg1) {
  nifly::BSParentVelocityModifier *arg1 = (nifly::BSParentVelocityModifier *) 0 ;
  
  arg1 = (nifly::BSParentVelocityModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMasterParticleSystem_maxEmitterObjs_set(void * jarg1, unsigned short jarg2) {
  nifly::BSMasterParticleSystem *arg1 = (nifly::BSMasterParticleSystem *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSMasterParticleSystem *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->maxEmitterObjs = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSMasterParticleSystem_maxEmitterObjs_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSMasterParticleSystem *arg1 = (nifly::BSMasterParticleSystem *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSMasterParticleSystem *)jarg1; 
  result = (uint16_t) ((arg1)->maxEmitterObjs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMasterParticleSystem_particleSysRefs_set(void * jarg1, void * jarg2) {
  nifly::BSMasterParticleSystem *arg1 = (nifly::BSMasterParticleSystem *) 0 ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg2 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::BSMasterParticleSystem *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->particleSysRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSMasterParticleSystem_particleSysRefs_get(void * jarg1) {
  void * jresult ;
  nifly::BSMasterParticleSystem *arg1 = (nifly::BSMasterParticleSystem *) 0 ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::BSMasterParticleSystem *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiAVObject > *)& ((arg1)->particleSysRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMasterParticleSystem_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSMasterParticleSystem::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSMasterParticleSystem_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSMasterParticleSystem *arg1 = (nifly::BSMasterParticleSystem *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSMasterParticleSystem *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMasterParticleSystem_Sync(void * jarg1, void * jarg2) {
  nifly::BSMasterParticleSystem *arg1 = (nifly::BSMasterParticleSystem *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSMasterParticleSystem *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMasterParticleSystem_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSMasterParticleSystem *arg1 = (nifly::BSMasterParticleSystem *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSMasterParticleSystem *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSMasterParticleSystem_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSMasterParticleSystem *arg1 = (nifly::BSMasterParticleSystem *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSMasterParticleSystem *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSMasterParticleSystem() {
  void * jresult ;
  nifly::BSMasterParticleSystem *result = 0 ;
  
  result = (nifly::BSMasterParticleSystem *)new nifly::BSMasterParticleSystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSMasterParticleSystem(void * jarg1) {
  nifly::BSMasterParticleSystem *arg1 = (nifly::BSMasterParticleSystem *) 0 ;
  
  arg1 = (nifly::BSMasterParticleSystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiGeometryData > *arg2 = (nifly::NiBlockRef< nifly::NiGeometryData > *) 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiGeometryData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleSystem_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiGeometryData > *result = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiGeometryData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_skinInstanceRef_set(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiObject > *arg2 = (nifly::NiBlockRef< nifly::NiObject > *) 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiObject > *)jarg2; 
  if (arg1) (arg1)->skinInstanceRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleSystem_skinInstanceRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiObject > *result = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiObject > *)& ((arg1)->skinInstanceRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_shaderPropertyRef_set(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiProperty > *arg2 = (nifly::NiBlockRef< nifly::NiProperty > *) 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiProperty > *)jarg2; 
  if (arg1) (arg1)->shaderPropertyRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleSystem_shaderPropertyRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiProperty > *result = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiProperty > *)& ((arg1)->shaderPropertyRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_alphaPropertyRef_set(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiProperty > *arg2 = (nifly::NiBlockRef< nifly::NiProperty > *) 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiProperty > *)jarg2; 
  if (arg1) (arg1)->alphaPropertyRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleSystem_alphaPropertyRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiProperty > *result = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiProperty > *)& ((arg1)->alphaPropertyRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_activeMaterial_set(void * jarg1, unsigned int jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->activeMaterial = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiParticleSystem_activeMaterial_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint32_t) ((arg1)->activeMaterial);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_defaultMatNeedsUpdate_set(void * jarg1, unsigned char jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->defaultMatNeedsUpdate = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiParticleSystem_defaultMatNeedsUpdate_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint8_t) ((arg1)->defaultMatNeedsUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags1_set(void * jarg1, unsigned char jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vertFlags1 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags1_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint8_t) ((arg1)->vertFlags1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags2_set(void * jarg1, unsigned char jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vertFlags2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags2_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint8_t) ((arg1)->vertFlags2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags3_set(void * jarg1, unsigned char jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vertFlags3 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags3_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint8_t) ((arg1)->vertFlags3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags4_set(void * jarg1, unsigned char jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vertFlags4 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags4_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint8_t) ((arg1)->vertFlags4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags5_set(void * jarg1, unsigned char jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vertFlags5 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags5_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint8_t) ((arg1)->vertFlags5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags6_set(void * jarg1, unsigned char jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vertFlags6 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags6_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint8_t) ((arg1)->vertFlags6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags7_set(void * jarg1, unsigned char jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vertFlags7 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags7_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint8_t) ((arg1)->vertFlags7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags8_set(void * jarg1, unsigned char jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->vertFlags8 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiParticleSystem_vertFlags8_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint8_t) ((arg1)->vertFlags8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_bounds_set(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::BoundingSphere *arg2 = (nifly::BoundingSphere *) 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (nifly::BoundingSphere *)jarg2; 
  if (arg1) (arg1)->bounds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleSystem_bounds_get(void * jarg1) {
  void * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::BoundingSphere *result = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (nifly::BoundingSphere *)& ((arg1)->bounds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_boundMinMax_set(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  float *arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->boundMinMax;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleSystem_boundMinMax_get(void * jarg1) {
  void * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  float *result = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (float *)(float *) ((arg1)->boundMinMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_farBegin_set(void * jarg1, unsigned short jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->farBegin = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiParticleSystem_farBegin_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint16_t) ((arg1)->farBegin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_farEnd_set(void * jarg1, unsigned short jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->farEnd = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiParticleSystem_farEnd_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint16_t) ((arg1)->farEnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_nearBegin_set(void * jarg1, unsigned short jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->nearBegin = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiParticleSystem_nearBegin_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint16_t) ((arg1)->nearBegin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_nearEnd_set(void * jarg1, unsigned short jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->nearEnd = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiParticleSystem_nearEnd_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (uint16_t) ((arg1)->nearEnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_psysDataRef_set(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysData > *arg2 = (nifly::NiBlockRef< nifly::NiPSysData > *) 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPSysData > *)jarg2; 
  if (arg1) (arg1)->psysDataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleSystem_psysDataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysData > *result = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPSysData > *)& ((arg1)->psysDataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_isWorldSpace_set(void * jarg1, unsigned int jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isWorldSpace = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiParticleSystem_isWorldSpace_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  bool result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (bool) ((arg1)->isWorldSpace);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_modifierRefs_set(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRefArray< nifly::NiPSysModifier > *arg2 = (nifly::NiBlockRefArray< nifly::NiPSysModifier > *) 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (nifly::NiBlockRefArray< nifly::NiPSysModifier > *)jarg2; 
  if (arg1) (arg1)->modifierRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleSystem_modifierRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiBlockRefArray< nifly::NiPSysModifier > *result = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (nifly::NiBlockRefArray< nifly::NiPSysModifier > *)& ((arg1)->modifierRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticleSystem_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiParticleSystem::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiParticleSystem_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_Sync(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiParticleSystem_GetMaterials(void * jarg1) {
  void * jresult ;
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  SwigValueWrapper< std::vector< nifly::MaterialInfo > > result;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  result = ((nifly::NiParticleSystem const *)arg1)->GetMaterials();
  jresult = new std::vector< nifly::MaterialInfo >((const std::vector< nifly::MaterialInfo > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiParticleSystem_SetMaterials(void * jarg1, void * jarg2) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  std::vector< nifly::MaterialInfo > *arg2 = 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  arg2 = (std::vector< nifly::MaterialInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::MaterialInfo > const & type is null", 0);
    return ;
  } 
  (arg1)->SetMaterials((std::vector< nifly::MaterialInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiParticleSystem() {
  void * jresult ;
  nifly::NiParticleSystem *result = 0 ;
  
  result = (nifly::NiParticleSystem *)new nifly::NiParticleSystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiParticleSystem(void * jarg1) {
  nifly::NiParticleSystem *arg1 = (nifly::NiParticleSystem *) 0 ;
  
  arg1 = (nifly::NiParticleSystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMeshParticleSystem_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiMeshParticleSystem::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMeshParticleSystem_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiMeshParticleSystem *arg1 = (nifly::NiMeshParticleSystem *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiMeshParticleSystem *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiMeshParticleSystem() {
  void * jresult ;
  nifly::NiMeshParticleSystem *result = 0 ;
  
  result = (nifly::NiMeshParticleSystem *)new nifly::NiMeshParticleSystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiMeshParticleSystem(void * jarg1) {
  nifly::NiMeshParticleSystem *arg1 = (nifly::NiMeshParticleSystem *) 0 ;
  
  arg1 = (nifly::NiMeshParticleSystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSStripParticleSystem_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSStripParticleSystem::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSStripParticleSystem_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSStripParticleSystem *arg1 = (nifly::BSStripParticleSystem *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSStripParticleSystem *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSStripParticleSystem() {
  void * jresult ;
  nifly::BSStripParticleSystem *result = 0 ;
  
  result = (nifly::BSStripParticleSystem *)new nifly::BSStripParticleSystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSStripParticleSystem(void * jarg1) {
  nifly::BSStripParticleSystem *arg1 = (nifly::BSStripParticleSystem *) 0 ;
  
  arg1 = (nifly::BSStripParticleSystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_bounce_set(void * jarg1, float jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bounce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysCollider_bounce_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  result = (float) ((arg1)->bounce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_spawnOnCollide_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->spawnOnCollide = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysCollider_spawnOnCollide_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  result = (bool) ((arg1)->spawnOnCollide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_dieOnCollide_set(void * jarg1, unsigned int jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dieOnCollide = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiPSysCollider_dieOnCollide_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  bool result;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  result = (bool) ((arg1)->dieOnCollide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_spawnModifierRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *arg2 = (nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *) 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *)jarg2; 
  if (arg1) (arg1)->spawnModifierRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysCollider_spawnModifierRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *result = 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPSysSpawnModifier > *)& ((arg1)->spawnModifierRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_managerRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  nifly::NiBlockPtr< nifly::NiPSysColliderManager > *arg2 = (nifly::NiBlockPtr< nifly::NiPSysColliderManager > *) 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiPSysColliderManager > *)jarg2; 
  if (arg1) (arg1)->managerRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysCollider_managerRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  nifly::NiBlockPtr< nifly::NiPSysColliderManager > *result = 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiPSysColliderManager > *)& ((arg1)->managerRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_nextColliderRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysCollider > *arg2 = (nifly::NiBlockRef< nifly::NiPSysCollider > *) 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPSysCollider > *)jarg2; 
  if (arg1) (arg1)->nextColliderRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysCollider_nextColliderRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysCollider > *result = 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPSysCollider > *)& ((arg1)->nextColliderRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_colliderNodeRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *arg2 = (nifly::NiBlockPtr< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->colliderNodeRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysCollider_colliderNodeRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiNode > *)& ((arg1)->colliderNodeRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCollider_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysCollider() {
  void * jresult ;
  nifly::NiPSysCollider *result = 0 ;
  
  result = (nifly::NiPSysCollider *)new nifly::NiPSysCollider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysCollider(void * jarg1) {
  nifly::NiPSysCollider *arg1 = (nifly::NiPSysCollider *) 0 ;
  
  arg1 = (nifly::NiPSysCollider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSphericalCollider_radius_set(void * jarg1, float jarg2) {
  nifly::NiPSysSphericalCollider *arg1 = (nifly::NiPSysSphericalCollider *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysSphericalCollider *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysSphericalCollider_radius_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysSphericalCollider *arg1 = (nifly::NiPSysSphericalCollider *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysSphericalCollider *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysSphericalCollider_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysSphericalCollider::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysSphericalCollider_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysSphericalCollider *arg1 = (nifly::NiPSysSphericalCollider *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysSphericalCollider *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSphericalCollider_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysSphericalCollider *arg1 = (nifly::NiPSysSphericalCollider *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysSphericalCollider *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysSphericalCollider() {
  void * jresult ;
  nifly::NiPSysSphericalCollider *result = 0 ;
  
  result = (nifly::NiPSysSphericalCollider *)new nifly::NiPSysSphericalCollider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysSphericalCollider(void * jarg1) {
  nifly::NiPSysSphericalCollider *arg1 = (nifly::NiPSysSphericalCollider *) 0 ;
  
  arg1 = (nifly::NiPSysSphericalCollider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_width_set(void * jarg1, float jarg2) {
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_width_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_height_set(void * jarg1, float jarg2) {
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_height_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_xAxis_set(void * jarg1, void * jarg2) {
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->xAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_xAxis_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->xAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_yAxis_set(void * jarg1, void * jarg2) {
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->yAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_yAxis_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->yAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysPlanarCollider::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysPlanarCollider_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysPlanarCollider() {
  void * jresult ;
  nifly::NiPSysPlanarCollider *result = 0 ;
  
  result = (nifly::NiPSysPlanarCollider *)new nifly::NiPSysPlanarCollider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysPlanarCollider(void * jarg1) {
  nifly::NiPSysPlanarCollider *arg1 = (nifly::NiPSysPlanarCollider *) 0 ;
  
  arg1 = (nifly::NiPSysPlanarCollider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysColliderManager_colliderRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysColliderManager *arg1 = (nifly::NiPSysColliderManager *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysCollider > *arg2 = (nifly::NiBlockRef< nifly::NiPSysCollider > *) 0 ;
  
  arg1 = (nifly::NiPSysColliderManager *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiPSysCollider > *)jarg2; 
  if (arg1) (arg1)->colliderRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysColliderManager_colliderRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysColliderManager *arg1 = (nifly::NiPSysColliderManager *) 0 ;
  nifly::NiBlockRef< nifly::NiPSysCollider > *result = 0 ;
  
  arg1 = (nifly::NiPSysColliderManager *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiPSysCollider > *)& ((arg1)->colliderRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysColliderManager_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysColliderManager::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysColliderManager_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysColliderManager *arg1 = (nifly::NiPSysColliderManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysColliderManager *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysColliderManager_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysColliderManager *arg1 = (nifly::NiPSysColliderManager *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysColliderManager *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysColliderManager_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiPSysColliderManager *arg1 = (nifly::NiPSysColliderManager *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysColliderManager *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysColliderManager_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiPSysColliderManager *arg1 = (nifly::NiPSysColliderManager *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysColliderManager *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysColliderManager() {
  void * jresult ;
  nifly::NiPSysColliderManager *result = 0 ;
  
  result = (nifly::NiPSysColliderManager *)new nifly::NiPSysColliderManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysColliderManager(void * jarg1) {
  nifly::NiPSysColliderManager *arg1 = (nifly::NiPSysColliderManager *) 0 ;
  
  arg1 = (nifly::NiPSysColliderManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_speed_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_speed_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->speed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_speedVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->speedVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_speedVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->speedVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_declination_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->declination = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_declination_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->declination);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_declinationVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->declinationVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_declinationVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->declinationVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_planarAngle_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->planarAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_planarAngle_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->planarAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_planarAngleVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->planarAngleVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_planarAngleVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->planarAngleVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_color_set(void * jarg1, void * jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  nifly::Color4 *arg2 = (nifly::Color4 *) 0 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysEmitter_color_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  nifly::Color4 *result = 0 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (nifly::Color4 *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_radius_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_radius_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_radiusVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radiusVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_radiusVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->radiusVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_lifeSpan_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lifeSpan = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_lifeSpan_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->lifeSpan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_lifeSpanVariation_set(void * jarg1, float jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lifeSpanVariation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysEmitter_lifeSpanVariation_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  result = (float) ((arg1)->lifeSpanVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysEmitter_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysEmitter() {
  void * jresult ;
  nifly::NiPSysEmitter *result = 0 ;
  
  result = (nifly::NiPSysEmitter *)new nifly::NiPSysEmitter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysEmitter(void * jarg1) {
  nifly::NiPSysEmitter *arg1 = (nifly::NiPSysEmitter *) 0 ;
  
  arg1 = (nifly::NiPSysEmitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysVolumeEmitter_emitterNodeRef_set(void * jarg1, void * jarg2) {
  nifly::NiPSysVolumeEmitter *arg1 = (nifly::NiPSysVolumeEmitter *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *arg2 = (nifly::NiBlockPtr< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiPSysVolumeEmitter *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->emitterNodeRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysVolumeEmitter_emitterNodeRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysVolumeEmitter *arg1 = (nifly::NiPSysVolumeEmitter *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::NiPSysVolumeEmitter *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiNode > *)& ((arg1)->emitterNodeRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysVolumeEmitter_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysVolumeEmitter *arg1 = (nifly::NiPSysVolumeEmitter *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysVolumeEmitter *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysVolumeEmitter_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiPSysVolumeEmitter *arg1 = (nifly::NiPSysVolumeEmitter *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysVolumeEmitter *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysVolumeEmitter() {
  void * jresult ;
  nifly::NiPSysVolumeEmitter *result = 0 ;
  
  result = (nifly::NiPSysVolumeEmitter *)new nifly::NiPSysVolumeEmitter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysVolumeEmitter(void * jarg1) {
  nifly::NiPSysVolumeEmitter *arg1 = (nifly::NiPSysVolumeEmitter *) 0 ;
  
  arg1 = (nifly::NiPSysVolumeEmitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSphereEmitter_radius_set(void * jarg1, float jarg2) {
  nifly::NiPSysSphereEmitter *arg1 = (nifly::NiPSysSphereEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysSphereEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysSphereEmitter_radius_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysSphereEmitter *arg1 = (nifly::NiPSysSphereEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysSphereEmitter *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysSphereEmitter_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysSphereEmitter::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysSphereEmitter_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysSphereEmitter *arg1 = (nifly::NiPSysSphereEmitter *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysSphereEmitter *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysSphereEmitter_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysSphereEmitter *arg1 = (nifly::NiPSysSphereEmitter *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysSphereEmitter *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysSphereEmitter() {
  void * jresult ;
  nifly::NiPSysSphereEmitter *result = 0 ;
  
  result = (nifly::NiPSysSphereEmitter *)new nifly::NiPSysSphereEmitter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysSphereEmitter(void * jarg1) {
  nifly::NiPSysSphereEmitter *arg1 = (nifly::NiPSysSphereEmitter *) 0 ;
  
  arg1 = (nifly::NiPSysSphereEmitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCylinderEmitter_radius_set(void * jarg1, float jarg2) {
  nifly::NiPSysCylinderEmitter *arg1 = (nifly::NiPSysCylinderEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysCylinderEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysCylinderEmitter_radius_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysCylinderEmitter *arg1 = (nifly::NiPSysCylinderEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysCylinderEmitter *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCylinderEmitter_height_set(void * jarg1, float jarg2) {
  nifly::NiPSysCylinderEmitter *arg1 = (nifly::NiPSysCylinderEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysCylinderEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysCylinderEmitter_height_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysCylinderEmitter *arg1 = (nifly::NiPSysCylinderEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysCylinderEmitter *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysCylinderEmitter_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysCylinderEmitter::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysCylinderEmitter_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysCylinderEmitter *arg1 = (nifly::NiPSysCylinderEmitter *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysCylinderEmitter *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysCylinderEmitter_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysCylinderEmitter *arg1 = (nifly::NiPSysCylinderEmitter *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysCylinderEmitter *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysCylinderEmitter() {
  void * jresult ;
  nifly::NiPSysCylinderEmitter *result = 0 ;
  
  result = (nifly::NiPSysCylinderEmitter *)new nifly::NiPSysCylinderEmitter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysCylinderEmitter(void * jarg1) {
  nifly::NiPSysCylinderEmitter *arg1 = (nifly::NiPSysCylinderEmitter *) 0 ;
  
  arg1 = (nifly::NiPSysCylinderEmitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBoxEmitter_width_set(void * jarg1, float jarg2) {
  nifly::NiPSysBoxEmitter *arg1 = (nifly::NiPSysBoxEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysBoxEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysBoxEmitter_width_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysBoxEmitter *arg1 = (nifly::NiPSysBoxEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysBoxEmitter *)jarg1; 
  result = (float) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBoxEmitter_height_set(void * jarg1, float jarg2) {
  nifly::NiPSysBoxEmitter *arg1 = (nifly::NiPSysBoxEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysBoxEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysBoxEmitter_height_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysBoxEmitter *arg1 = (nifly::NiPSysBoxEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysBoxEmitter *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBoxEmitter_depth_set(void * jarg1, float jarg2) {
  nifly::NiPSysBoxEmitter *arg1 = (nifly::NiPSysBoxEmitter *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiPSysBoxEmitter *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->depth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiPSysBoxEmitter_depth_get(void * jarg1) {
  float jresult ;
  nifly::NiPSysBoxEmitter *arg1 = (nifly::NiPSysBoxEmitter *) 0 ;
  float result;
  
  arg1 = (nifly::NiPSysBoxEmitter *)jarg1; 
  result = (float) ((arg1)->depth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysBoxEmitter_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysBoxEmitter::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysBoxEmitter_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysBoxEmitter *arg1 = (nifly::NiPSysBoxEmitter *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysBoxEmitter *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysBoxEmitter_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysBoxEmitter *arg1 = (nifly::NiPSysBoxEmitter *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysBoxEmitter *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysBoxEmitter() {
  void * jresult ;
  nifly::NiPSysBoxEmitter *result = 0 ;
  
  result = (nifly::NiPSysBoxEmitter *)new nifly::NiPSysBoxEmitter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysBoxEmitter(void * jarg1) {
  nifly::NiPSysBoxEmitter *arg1 = (nifly::NiPSysBoxEmitter *) 0 ;
  
  arg1 = (nifly::NiPSysBoxEmitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysArrayEmitter_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSPSysArrayEmitter::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSPSysArrayEmitter_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSPSysArrayEmitter *arg1 = (nifly::BSPSysArrayEmitter *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSPSysArrayEmitter *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSPSysArrayEmitter() {
  void * jresult ;
  nifly::BSPSysArrayEmitter *result = 0 ;
  
  result = (nifly::BSPSysArrayEmitter *)new nifly::BSPSysArrayEmitter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSPSysArrayEmitter(void * jarg1) {
  nifly::BSPSysArrayEmitter *arg1 = (nifly::BSPSysArrayEmitter *) 0 ;
  
  arg1 = (nifly::BSPSysArrayEmitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_meshRefs_set(void * jarg1, void * jarg2) {
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  nifly::NiBlockPtrArray< nifly::NiAVObject > *arg2 = (nifly::NiBlockPtrArray< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  arg2 = (nifly::NiBlockPtrArray< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->meshRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_meshRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  nifly::NiBlockPtrArray< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  result = (nifly::NiBlockPtrArray< nifly::NiAVObject > *)& ((arg1)->meshRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_velocityType_set(void * jarg1, int jarg2) {
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  nifly::VelocityType arg2 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  arg2 = (nifly::VelocityType)jarg2; 
  if (arg1) (arg1)->velocityType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_velocityType_get(void * jarg1) {
  int jresult ;
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  nifly::VelocityType result;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  result = (nifly::VelocityType) ((arg1)->velocityType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_emissionType_set(void * jarg1, int jarg2) {
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  nifly::EmitFrom arg2 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  arg2 = (nifly::EmitFrom)jarg2; 
  if (arg1) (arg1)->emissionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_emissionType_get(void * jarg1) {
  int jresult ;
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  nifly::EmitFrom result;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  result = (nifly::EmitFrom) ((arg1)->emissionType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_emissionAxis_set(void * jarg1, void * jarg2) {
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->emissionAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_emissionAxis_get(void * jarg1) {
  void * jresult ;
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->emissionAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiPSysMeshEmitter::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_Sync(void * jarg1, void * jarg2) {
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiPSysMeshEmitter_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  std::set< nifly::NiPtr * > *arg2 = 0 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  arg2 = (std::set< nifly::NiPtr * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiPtr * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiPSysMeshEmitter() {
  void * jresult ;
  nifly::NiPSysMeshEmitter *result = 0 ;
  
  result = (nifly::NiPSysMeshEmitter *)new nifly::NiPSysMeshEmitter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiPSysMeshEmitter(void * jarg1) {
  nifly::NiPSysMeshEmitter *arg1 = (nifly::NiPSysMeshEmitter *) 0 ;
  
  arg1 = (nifly::NiPSysMeshEmitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiProperty() {
  void * jresult ;
  nifly::NiProperty *result = 0 ;
  
  result = (nifly::NiProperty *)new nifly::NiProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiProperty(void * jarg1) {
  nifly::NiProperty *arg1 = (nifly::NiProperty *) 0 ;
  
  arg1 = (nifly::NiProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShadeProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiShadeProperty *arg1 = (nifly::NiShadeProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiShadeProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiShadeProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiShadeProperty *arg1 = (nifly::NiShadeProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiShadeProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiShadeProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiShadeProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiShadeProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiShadeProperty *arg1 = (nifly::NiShadeProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiShadeProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShadeProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiShadeProperty *arg1 = (nifly::NiShadeProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiShadeProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiShadeProperty() {
  void * jresult ;
  nifly::NiShadeProperty *result = 0 ;
  
  result = (nifly::NiShadeProperty *)new nifly::NiShadeProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiShadeProperty(void * jarg1) {
  nifly::NiShadeProperty *arg1 = (nifly::NiShadeProperty *) 0 ;
  
  arg1 = (nifly::NiShadeProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSpecularProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiSpecularProperty *arg1 = (nifly::NiSpecularProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiSpecularProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiSpecularProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiSpecularProperty *arg1 = (nifly::NiSpecularProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiSpecularProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSpecularProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSpecularProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSpecularProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSpecularProperty *arg1 = (nifly::NiSpecularProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSpecularProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSpecularProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiSpecularProperty *arg1 = (nifly::NiSpecularProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSpecularProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSpecularProperty() {
  void * jresult ;
  nifly::NiSpecularProperty *result = 0 ;
  
  result = (nifly::NiSpecularProperty *)new nifly::NiSpecularProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSpecularProperty(void * jarg1) {
  nifly::NiSpecularProperty *arg1 = (nifly::NiSpecularProperty *) 0 ;
  
  arg1 = (nifly::NiSpecularProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexTransform_translation_set(void * jarg1, void * jarg2) {
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  nifly::Vector2 *arg2 = (nifly::Vector2 *) 0 ;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2; 
  if (arg1) (arg1)->translation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TexTransform_translation_get(void * jarg1) {
  void * jresult ;
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  nifly::Vector2 *result = 0 ;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  result = (nifly::Vector2 *)& ((arg1)->translation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexTransform_tiling_set(void * jarg1, void * jarg2) {
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  nifly::Vector2 *arg2 = (nifly::Vector2 *) 0 ;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2; 
  if (arg1) (arg1)->tiling = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TexTransform_tiling_get(void * jarg1) {
  void * jresult ;
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  nifly::Vector2 *result = 0 ;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  result = (nifly::Vector2 *)& ((arg1)->tiling);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexTransform_wRotation_set(void * jarg1, float jarg2) {
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wRotation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_TexTransform_wRotation_get(void * jarg1) {
  float jresult ;
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  float result;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  result = (float) ((arg1)->wRotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexTransform_transformType_set(void * jarg1, unsigned int jarg2) {
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->transformType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_TexTransform_transformType_get(void * jarg1) {
  unsigned int jresult ;
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  result = (uint32_t) ((arg1)->transformType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexTransform_offset_set(void * jarg1, void * jarg2) {
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  nifly::Vector2 *arg2 = (nifly::Vector2 *) 0 ;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2; 
  if (arg1) (arg1)->offset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TexTransform_offset_get(void * jarg1) {
  void * jresult ;
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  nifly::Vector2 *result = 0 ;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  result = (nifly::Vector2 *)& ((arg1)->offset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_TexTransform() {
  void * jresult ;
  nifly::TexTransform *result = 0 ;
  
  result = (nifly::TexTransform *)new nifly::TexTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_TexTransform(void * jarg1) {
  nifly::TexTransform *arg1 = (nifly::TexTransform *) 0 ;
  
  arg1 = (nifly::TexTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexDesc_sourceRef_set(void * jarg1, void * jarg2) {
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  nifly::NiBlockRef< nifly::NiSourceTexture > *arg2 = (nifly::NiBlockRef< nifly::NiSourceTexture > *) 0 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiSourceTexture > *)jarg2; 
  if (arg1) (arg1)->sourceRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TexDesc_sourceRef_get(void * jarg1) {
  void * jresult ;
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  nifly::NiBlockRef< nifly::NiSourceTexture > *result = 0 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiSourceTexture > *)& ((arg1)->sourceRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexDesc_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_TexDesc_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexDesc_hasTexTransform_set(void * jarg1, unsigned int jarg2) {
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasTexTransform = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_TexDesc_hasTexTransform_get(void * jarg1) {
  unsigned int jresult ;
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  bool result;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  result = (bool) ((arg1)->hasTexTransform);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexDesc_transform_set(void * jarg1, void * jarg2) {
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  nifly::TexTransform *arg2 = (nifly::TexTransform *) 0 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  arg2 = (nifly::TexTransform *)jarg2; 
  if (arg1) (arg1)->transform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TexDesc_transform_get(void * jarg1) {
  void * jresult ;
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  nifly::TexTransform *result = 0 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  result = (nifly::TexTransform *)& ((arg1)->transform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexDesc_Sync(void * jarg1, void * jarg2) {
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexDesc_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TexDesc_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_TexDesc() {
  void * jresult ;
  nifly::TexDesc *result = 0 ;
  
  result = (nifly::TexDesc *)new nifly::TexDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_TexDesc(void * jarg1) {
  nifly::TexDesc *arg1 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::TexDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ShaderTexDesc_isUsed_set(void * jarg1, unsigned int jarg2) {
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isUsed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_ShaderTexDesc_isUsed_get(void * jarg1) {
  unsigned int jresult ;
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  bool result;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  result = (bool) ((arg1)->isUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ShaderTexDesc_data_set(void * jarg1, void * jarg2) {
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_ShaderTexDesc_data_get(void * jarg1) {
  void * jresult ;
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ShaderTexDesc_mapIndex_set(void * jarg1, unsigned int jarg2) {
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->mapIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_ShaderTexDesc_mapIndex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  result = (uint32_t) ((arg1)->mapIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ShaderTexDesc_Sync(void * jarg1, void * jarg2) {
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ShaderTexDesc_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_ShaderTexDesc_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_ShaderTexDesc() {
  void * jresult ;
  nifly::ShaderTexDesc *result = 0 ;
  
  result = (nifly::ShaderTexDesc *)new nifly::ShaderTexDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_ShaderTexDesc(void * jarg1) {
  nifly::ShaderTexDesc *arg1 = (nifly::ShaderTexDesc *) 0 ;
  
  arg1 = (nifly::ShaderTexDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiTexturingProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_textureCount_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->textureCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_textureCount_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (uint32_t) ((arg1)->textureCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasBaseTex_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasBaseTex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasBaseTex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasBaseTex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_baseTex_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->baseTex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_baseTex_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->baseTex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDarkTex_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasDarkTex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDarkTex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasDarkTex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_darkTex_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->darkTex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_darkTex_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->darkTex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDetailTex_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasDetailTex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDetailTex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasDetailTex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_detailTex_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->detailTex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_detailTex_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->detailTex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasGlossTex_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasGlossTex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasGlossTex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasGlossTex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_glossTex_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->glossTex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_glossTex_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->glossTex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasGlowTex_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasGlowTex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasGlowTex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasGlowTex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_glowTex_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->glowTex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_glowTex_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->glowTex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasBumpTex_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasBumpTex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasBumpTex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasBumpTex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_bumpTex_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->bumpTex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_bumpTex_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->bumpTex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_lumaScale_set(void * jarg1, float jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lumaScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiTexturingProperty_lumaScale_get(void * jarg1) {
  float jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (float) ((arg1)->lumaScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_lumaOffset_set(void * jarg1, float jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lumaOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiTexturingProperty_lumaOffset_get(void * jarg1) {
  float jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (float) ((arg1)->lumaOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_bumpMatrix_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::Vector4 *arg2 = (nifly::Vector4 *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::Vector4 *)jarg2; 
  if (arg1) (arg1)->bumpMatrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_bumpMatrix_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::Vector4 *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::Vector4 *)& ((arg1)->bumpMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasNormalTex_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasNormalTex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasNormalTex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasNormalTex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_normalTex_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->normalTex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_normalTex_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->normalTex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasParallaxTex_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasParallaxTex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasParallaxTex_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasParallaxTex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_parallaxTex_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->parallaxTex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_parallaxTex_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->parallaxTex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_parallaxFloat_set(void * jarg1, float jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->parallaxFloat = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiTexturingProperty_parallaxFloat_get(void * jarg1) {
  float jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (float) ((arg1)->parallaxFloat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDecalTex0_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasDecalTex0 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDecalTex0_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasDecalTex0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_decalTex0_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->decalTex0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_decalTex0_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->decalTex0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDecalTex1_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasDecalTex1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDecalTex1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasDecalTex1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_decalTex1_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->decalTex1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_decalTex1_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->decalTex1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDecalTex2_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasDecalTex2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDecalTex2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasDecalTex2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_decalTex2_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->decalTex2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_decalTex2_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->decalTex2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDecalTex3_set(void * jarg1, unsigned int jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasDecalTex3 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiTexturingProperty_hasDecalTex3_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (bool) ((arg1)->hasDecalTex3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_decalTex3_set(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *arg2 = (nifly::TexDesc *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::TexDesc *)jarg2; 
  if (arg1) (arg1)->decalTex3 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_decalTex3_get(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::TexDesc *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (nifly::TexDesc *)& ((arg1)->decalTex3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiTexturingProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiTexturingProperty_GetShaderTex(void * jarg1) {
  void * jresult ;
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  SwigValueWrapper< std::vector< nifly::ShaderTexDesc > > result;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  result = ((nifly::NiTexturingProperty const *)arg1)->GetShaderTex();
  jresult = new std::vector< nifly::ShaderTexDesc >((const std::vector< nifly::ShaderTexDesc > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiTexturingProperty_SetShaderTex(void * jarg1, void * jarg2) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  std::vector< nifly::ShaderTexDesc > *arg2 = 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  arg2 = (std::vector< nifly::ShaderTexDesc > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::ShaderTexDesc > const & type is null", 0);
    return ;
  } 
  (arg1)->SetShaderTex((std::vector< nifly::ShaderTexDesc > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiTexturingProperty() {
  void * jresult ;
  nifly::NiTexturingProperty *result = 0 ;
  
  result = (nifly::NiTexturingProperty *)new nifly::NiTexturingProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiTexturingProperty(void * jarg1) {
  nifly::NiTexturingProperty *arg1 = (nifly::NiTexturingProperty *) 0 ;
  
  arg1 = (nifly::NiTexturingProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVertexColorProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiVertexColorProperty *arg1 = (nifly::NiVertexColorProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiVertexColorProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiVertexColorProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiVertexColorProperty *arg1 = (nifly::NiVertexColorProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiVertexColorProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVertexColorProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiVertexColorProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiVertexColorProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiVertexColorProperty *arg1 = (nifly::NiVertexColorProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiVertexColorProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiVertexColorProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiVertexColorProperty *arg1 = (nifly::NiVertexColorProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiVertexColorProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiVertexColorProperty() {
  void * jresult ;
  nifly::NiVertexColorProperty *result = 0 ;
  
  result = (nifly::NiVertexColorProperty *)new nifly::NiVertexColorProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiVertexColorProperty(void * jarg1) {
  nifly::NiVertexColorProperty *arg1 = (nifly::NiVertexColorProperty *) 0 ;
  
  arg1 = (nifly::NiVertexColorProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDitherProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiDitherProperty *arg1 = (nifly::NiDitherProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiDitherProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiDitherProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiDitherProperty *arg1 = (nifly::NiDitherProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiDitherProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiDitherProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiDitherProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiDitherProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiDitherProperty *arg1 = (nifly::NiDitherProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiDitherProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiDitherProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiDitherProperty *arg1 = (nifly::NiDitherProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiDitherProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiDitherProperty() {
  void * jresult ;
  nifly::NiDitherProperty *result = 0 ;
  
  result = (nifly::NiDitherProperty *)new nifly::NiDitherProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiDitherProperty(void * jarg1) {
  nifly::NiDitherProperty *arg1 = (nifly::NiDitherProperty *) 0 ;
  
  arg1 = (nifly::NiDitherProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFogProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiFogProperty *arg1 = (nifly::NiFogProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiFogProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiFogProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiFogProperty *arg1 = (nifly::NiFogProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiFogProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFogProperty_fogDepth_set(void * jarg1, float jarg2) {
  nifly::NiFogProperty *arg1 = (nifly::NiFogProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiFogProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fogDepth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiFogProperty_fogDepth_get(void * jarg1) {
  float jresult ;
  nifly::NiFogProperty *arg1 = (nifly::NiFogProperty *) 0 ;
  float result;
  
  arg1 = (nifly::NiFogProperty *)jarg1; 
  result = (float) ((arg1)->fogDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFogProperty_fogColor_set(void * jarg1, void * jarg2) {
  nifly::NiFogProperty *arg1 = (nifly::NiFogProperty *) 0 ;
  nifly::Color3 *arg2 = (nifly::Color3 *) 0 ;
  
  arg1 = (nifly::NiFogProperty *)jarg1; 
  arg2 = (nifly::Color3 *)jarg2; 
  if (arg1) (arg1)->fogColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiFogProperty_fogColor_get(void * jarg1) {
  void * jresult ;
  nifly::NiFogProperty *arg1 = (nifly::NiFogProperty *) 0 ;
  nifly::Color3 *result = 0 ;
  
  arg1 = (nifly::NiFogProperty *)jarg1; 
  result = (nifly::Color3 *)& ((arg1)->fogColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFogProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiFogProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiFogProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiFogProperty *arg1 = (nifly::NiFogProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiFogProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiFogProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiFogProperty *arg1 = (nifly::NiFogProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiFogProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiFogProperty() {
  void * jresult ;
  nifly::NiFogProperty *result = 0 ;
  
  result = (nifly::NiFogProperty *)new nifly::NiFogProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiFogProperty(void * jarg1) {
  nifly::NiFogProperty *arg1 = (nifly::NiFogProperty *) 0 ;
  
  arg1 = (nifly::NiFogProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiWireframeProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiWireframeProperty *arg1 = (nifly::NiWireframeProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiWireframeProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiWireframeProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiWireframeProperty *arg1 = (nifly::NiWireframeProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiWireframeProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiWireframeProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiWireframeProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiWireframeProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiWireframeProperty *arg1 = (nifly::NiWireframeProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiWireframeProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiWireframeProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiWireframeProperty *arg1 = (nifly::NiWireframeProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiWireframeProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiWireframeProperty() {
  void * jresult ;
  nifly::NiWireframeProperty *result = 0 ;
  
  result = (nifly::NiWireframeProperty *)new nifly::NiWireframeProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiWireframeProperty(void * jarg1) {
  nifly::NiWireframeProperty *arg1 = (nifly::NiWireframeProperty *) 0 ;
  
  arg1 = (nifly::NiWireframeProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiZBufferProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiZBufferProperty *arg1 = (nifly::NiZBufferProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiZBufferProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiZBufferProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiZBufferProperty *arg1 = (nifly::NiZBufferProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiZBufferProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiZBufferProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiZBufferProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiZBufferProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiZBufferProperty *arg1 = (nifly::NiZBufferProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiZBufferProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiZBufferProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiZBufferProperty *arg1 = (nifly::NiZBufferProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiZBufferProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiZBufferProperty() {
  void * jresult ;
  nifly::NiZBufferProperty *result = 0 ;
  
  result = (nifly::NiZBufferProperty *)new nifly::NiZBufferProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiZBufferProperty(void * jarg1) {
  nifly::NiZBufferProperty *arg1 = (nifly::NiZBufferProperty *) 0 ;
  
  arg1 = (nifly::NiZBufferProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderTextureSet_textures_set(void * jarg1, void * jarg2) {
  nifly::BSShaderTextureSet *arg1 = (nifly::BSShaderTextureSet *) 0 ;
  nifly::NiStringVector< > *arg2 = (nifly::NiStringVector< > *) 0 ;
  
  arg1 = (nifly::BSShaderTextureSet *)jarg1; 
  arg2 = (nifly::NiStringVector< > *)jarg2; 
  if (arg1) (arg1)->textures = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderTextureSet_textures_get(void * jarg1) {
  void * jresult ;
  nifly::BSShaderTextureSet *arg1 = (nifly::BSShaderTextureSet *) 0 ;
  nifly::NiStringVector< > *result = 0 ;
  
  arg1 = (nifly::BSShaderTextureSet *)jarg1; 
  result = (nifly::NiStringVector< > *)& ((arg1)->textures);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSShaderTextureSet__SWIG_0() {
  void * jresult ;
  nifly::BSShaderTextureSet *result = 0 ;
  
  result = (nifly::BSShaderTextureSet *)new nifly::BSShaderTextureSet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSShaderTextureSet__SWIG_1(void * jarg1) {
  void * jresult ;
  nifly::NiVersion *arg1 = 0 ;
  nifly::BSShaderTextureSet *result = 0 ;
  
  arg1 = (nifly::NiVersion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return 0;
  } 
  result = (nifly::BSShaderTextureSet *)new nifly::BSShaderTextureSet(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSShaderTextureSet_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSShaderTextureSet::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSShaderTextureSet_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSShaderTextureSet *arg1 = (nifly::BSShaderTextureSet *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSShaderTextureSet *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderTextureSet_Sync(void * jarg1, void * jarg2) {
  nifly::BSShaderTextureSet *arg1 = (nifly::BSShaderTextureSet *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSShaderTextureSet *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSShaderTextureSet(void * jarg1) {
  nifly::BSShaderTextureSet *arg1 = (nifly::BSShaderTextureSet *) 0 ;
  
  arg1 = (nifly::BSShaderTextureSet *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasTextureSet(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasTextureSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShader_TextureSetRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  nifly::NiBlockRef< nifly::BSShaderTextureSet > *result = 0 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSShaderTextureSet > *)(arg1)->TextureSetRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_IsSkinTinted(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->IsSkinTinted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_IsFaceTinted(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->IsFaceTinted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_IsSkinned(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->IsSkinned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetSkinned(void * jarg1, unsigned int jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSkinned(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_IsDoubleSided(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->IsDoubleSided();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_IsModelSpace(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->IsModelSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_IsEmissive(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->IsEmissive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasSpecular(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasSpecular();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasVertexColors(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetVertexColors(void * jarg1, unsigned int jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertexColors(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasVertexAlpha(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasVertexAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetVertexAlpha(void * jarg1, unsigned int jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertexAlpha(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasBacklight(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasBacklight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasRimlight(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasRimlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasSoftlight(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasSoftlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasGlowmap(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasGlowmap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasGreyscaleColor(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasGreyscaleColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_HasEnvironmentMapping(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  bool result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (bool)((nifly::NiShader const *)arg1)->HasEnvironmentMapping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiShader_GetShaderType(void * jarg1) {
  unsigned int jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (uint32_t)((nifly::NiShader const *)arg1)->GetShaderType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetShaderType(void * jarg1, unsigned int jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetShaderType(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShader_GetUVOffset(void * jarg1) {
  void * jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = ((nifly::NiShader const *)arg1)->GetUVOffset();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShader_GetUVScale(void * jarg1) {
  void * jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = ((nifly::NiShader const *)arg1)->GetUVScale();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShader_GetSpecularColor(void * jarg1) {
  void * jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  nifly::Vector3 result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = ((nifly::NiShader const *)arg1)->GetSpecularColor();
  jresult = new nifly::Vector3((const nifly::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetSpecularColor(void * jarg1, void * jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetSpecularColor((nifly::Vector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetSpecularStrength(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetSpecularStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetSpecularStrength(void * jarg1, float jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSpecularStrength(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetGlossiness(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetGlossiness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetGlossiness(void * jarg1, float jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetGlossiness(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetEnvironmentMapScale(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetEnvironmentMapScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiShader_GetEmissiveColor(void * jarg1) {
  void * jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  nifly::Color4 result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = ((nifly::NiShader const *)arg1)->GetEmissiveColor();
  jresult = new nifly::Color4((const nifly::Color4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetEmissiveColor(void * jarg1, void * jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  nifly::Color4 *arg2 = 0 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Color4 const & type is null", 0);
    return ;
  } 
  (arg1)->SetEmissiveColor((nifly::Color4 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetEmissiveMultiple(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetEmissiveMultiple();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetEmissiveMultiple(void * jarg1, float jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetEmissiveMultiple(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetAlpha(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetBacklightPower(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetBacklightPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetRimlightPower(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetRimlightPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetSoftlight(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetSoftlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetSubsurfaceRolloff(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetSubsurfaceRolloff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetGrayscaleToPaletteScale(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetGrayscaleToPaletteScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiShader_GetFresnelPower(void * jarg1) {
  float jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  float result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = (float)((nifly::NiShader const *)arg1)->GetFresnelPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiShader_GetWetMaterialName(void * jarg1) {
  char * jresult ;
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  std::string result;
  
  arg1 = (nifly::NiShader *)jarg1; 
  result = ((nifly::NiShader const *)arg1)->GetWetMaterialName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiShader_SetWetMaterialName(void * jarg1, char * jarg2) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetWetMaterialName((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiShader() {
  void * jresult ;
  nifly::NiShader *result = 0 ;
  
  result = (nifly::NiShader *)new nifly::NiShader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiShader(void * jarg1) {
  nifly::NiShader *arg1 = (nifly::NiShader *) 0 ;
  
  arg1 = (nifly::NiShader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_shaderFlags_set(void * jarg1, unsigned short jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->shaderFlags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSShaderProperty_shaderFlags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (uint16_t) ((arg1)->shaderFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_shaderType_set(void * jarg1, int jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  nifly::BSShaderType arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (nifly::BSShaderType)jarg2; 
  if (arg1) (arg1)->shaderType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BSShaderProperty_shaderType_get(void * jarg1) {
  int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  nifly::BSShaderType result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (nifly::BSShaderType) ((arg1)->shaderType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_shaderFlags1_set(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->shaderFlags1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_shaderFlags1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (uint32_t) ((arg1)->shaderFlags1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_shaderFlags2_set(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->shaderFlags2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_shaderFlags2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (uint32_t) ((arg1)->shaderFlags2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_environmentMapScale_set(void * jarg1, float jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->environmentMapScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSShaderProperty_environmentMapScale_get(void * jarg1) {
  float jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (float) ((arg1)->environmentMapScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_numSF1_set(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numSF1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_numSF1_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (uint32_t) ((arg1)->numSF1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_numSF2_set(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numSF2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_numSF2_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (uint32_t) ((arg1)->numSF2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_SF1_set(void * jarg1, void * jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  std::vector< uint32_t > *arg2 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->SF1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderProperty_SF1_get(void * jarg1) {
  void * jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (std::vector< uint32_t > *)& ((arg1)->SF1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_SF2_set(void * jarg1, void * jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  std::vector< uint32_t > *arg2 = (std::vector< uint32_t > *) 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (std::vector< uint32_t > *)jarg2; 
  if (arg1) (arg1)->SF2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderProperty_SF2_get(void * jarg1) {
  void * jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (std::vector< uint32_t > *)& ((arg1)->SF2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_uvOffset_set(void * jarg1, void * jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  nifly::Vector2 *arg2 = (nifly::Vector2 *) 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2; 
  if (arg1) (arg1)->uvOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderProperty_uvOffset_get(void * jarg1) {
  void * jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  nifly::Vector2 *result = 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (nifly::Vector2 *)& ((arg1)->uvOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_uvScale_set(void * jarg1, void * jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  nifly::Vector2 *arg2 = (nifly::Vector2 *) 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2; 
  if (arg1) (arg1)->uvScale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderProperty_uvScale_get(void * jarg1) {
  void * jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  nifly::Vector2 *result = 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (nifly::Vector2 *)& ((arg1)->uvScale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_Sync(void * jarg1, void * jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_GetShaderType(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (uint32_t)((nifly::BSShaderProperty const *)arg1)->GetShaderType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_SetShaderType(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetShaderType(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_IsSkinTinted(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->IsSkinTinted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_IsFaceTinted(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->IsFaceTinted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_IsSkinned(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->IsSkinned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_SetSkinned(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSkinned(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_IsDoubleSided(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->IsDoubleSided();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_IsModelSpace(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->IsModelSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_IsEmissive(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->IsEmissive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_HasSpecular(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->HasSpecular();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_HasVertexColors(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->HasVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_SetVertexColors(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertexColors(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_HasVertexAlpha(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->HasVertexAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderProperty_SetVertexAlpha(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVertexAlpha(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_HasBacklight(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->HasBacklight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_HasRimlight(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->HasRimlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_HasSoftlight(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->HasSoftlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_HasGlowmap(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->HasGlowmap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_HasGreyscaleColor(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->HasGreyscaleColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderProperty_HasEnvironmentMapping(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (bool)((nifly::BSShaderProperty const *)arg1)->HasEnvironmentMapping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSShaderProperty_GetEnvironmentMapScale(void * jarg1) {
  float jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = (float)((nifly::BSShaderProperty const *)arg1)->GetEnvironmentMapScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderProperty_GetUVOffset(void * jarg1) {
  void * jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = ((nifly::BSShaderProperty const *)arg1)->GetUVOffset();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderProperty_GetUVScale(void * jarg1) {
  void * jresult ;
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  nifly::Vector2 result;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  result = ((nifly::BSShaderProperty const *)arg1)->GetUVScale();
  jresult = new nifly::Vector2((const nifly::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSShaderProperty() {
  void * jresult ;
  nifly::BSShaderProperty *result = 0 ;
  
  result = (nifly::BSShaderProperty *)new nifly::BSShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSShaderProperty(void * jarg1) {
  nifly::BSShaderProperty *arg1 = (nifly::BSShaderProperty *) 0 ;
  
  arg1 = (nifly::BSShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_WaterShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::WaterShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_WaterShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::WaterShaderProperty *arg1 = (nifly::WaterShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::WaterShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_WaterShaderProperty() {
  void * jresult ;
  nifly::WaterShaderProperty *result = 0 ;
  
  result = (nifly::WaterShaderProperty *)new nifly::WaterShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_WaterShaderProperty(void * jarg1) {
  nifly::WaterShaderProperty *arg1 = (nifly::WaterShaderProperty *) 0 ;
  
  arg1 = (nifly::WaterShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_HairShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::HairShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_HairShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::HairShaderProperty *arg1 = (nifly::HairShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::HairShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_HairShaderProperty() {
  void * jresult ;
  nifly::HairShaderProperty *result = 0 ;
  
  result = (nifly::HairShaderProperty *)new nifly::HairShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_HairShaderProperty(void * jarg1) {
  nifly::HairShaderProperty *arg1 = (nifly::HairShaderProperty *) 0 ;
  
  arg1 = (nifly::HairShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_DistantLODShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::DistantLODShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_DistantLODShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::DistantLODShaderProperty *arg1 = (nifly::DistantLODShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::DistantLODShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_DistantLODShaderProperty() {
  void * jresult ;
  nifly::DistantLODShaderProperty *result = 0 ;
  
  result = (nifly::DistantLODShaderProperty *)new nifly::DistantLODShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_DistantLODShaderProperty(void * jarg1) {
  nifly::DistantLODShaderProperty *arg1 = (nifly::DistantLODShaderProperty *) 0 ;
  
  arg1 = (nifly::DistantLODShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDistantTreeShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSDistantTreeShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDistantTreeShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSDistantTreeShaderProperty *arg1 = (nifly::BSDistantTreeShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSDistantTreeShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSDistantTreeShaderProperty() {
  void * jresult ;
  nifly::BSDistantTreeShaderProperty *result = 0 ;
  
  result = (nifly::BSDistantTreeShaderProperty *)new nifly::BSDistantTreeShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSDistantTreeShaderProperty(void * jarg1) {
  nifly::BSDistantTreeShaderProperty *arg1 = (nifly::BSDistantTreeShaderProperty *) 0 ;
  
  arg1 = (nifly::BSDistantTreeShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TallGrassShaderProperty_fileName_set(void * jarg1, void * jarg2) {
  nifly::TallGrassShaderProperty *arg1 = (nifly::TallGrassShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::TallGrassShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->fileName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TallGrassShaderProperty_fileName_get(void * jarg1) {
  void * jresult ;
  nifly::TallGrassShaderProperty *arg1 = (nifly::TallGrassShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::TallGrassShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->fileName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_TallGrassShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::TallGrassShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_TallGrassShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::TallGrassShaderProperty *arg1 = (nifly::TallGrassShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::TallGrassShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TallGrassShaderProperty_Sync(void * jarg1, void * jarg2) {
  nifly::TallGrassShaderProperty *arg1 = (nifly::TallGrassShaderProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::TallGrassShaderProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_TallGrassShaderProperty() {
  void * jresult ;
  nifly::TallGrassShaderProperty *result = 0 ;
  
  result = (nifly::TallGrassShaderProperty *)new nifly::TallGrassShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_TallGrassShaderProperty(void * jarg1) {
  nifly::TallGrassShaderProperty *arg1 = (nifly::TallGrassShaderProperty *) 0 ;
  
  arg1 = (nifly::TallGrassShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_VolumetricFogShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::VolumetricFogShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_VolumetricFogShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::VolumetricFogShaderProperty *arg1 = (nifly::VolumetricFogShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::VolumetricFogShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_VolumetricFogShaderProperty() {
  void * jresult ;
  nifly::VolumetricFogShaderProperty *result = 0 ;
  
  result = (nifly::VolumetricFogShaderProperty *)new nifly::VolumetricFogShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_VolumetricFogShaderProperty(void * jarg1) {
  nifly::VolumetricFogShaderProperty *arg1 = (nifly::VolumetricFogShaderProperty *) 0 ;
  
  arg1 = (nifly::VolumetricFogShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTextureArray_textureArray_set(void * jarg1, void * jarg2) {
  nifly::BSTextureArray *arg1 = (nifly::BSTextureArray *) 0 ;
  nifly::NiStringVector< > *arg2 = (nifly::NiStringVector< > *) 0 ;
  
  arg1 = (nifly::BSTextureArray *)jarg1; 
  arg2 = (nifly::NiStringVector< > *)jarg2; 
  if (arg1) (arg1)->textureArray = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSTextureArray_textureArray_get(void * jarg1) {
  void * jresult ;
  nifly::BSTextureArray *arg1 = (nifly::BSTextureArray *) 0 ;
  nifly::NiStringVector< > *result = 0 ;
  
  arg1 = (nifly::BSTextureArray *)jarg1; 
  result = (nifly::NiStringVector< > *)& ((arg1)->textureArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSTextureArray_Sync(void * jarg1, void * jarg2) {
  nifly::BSTextureArray *arg1 = (nifly::BSTextureArray *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSTextureArray *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSTextureArray() {
  void * jresult ;
  nifly::BSTextureArray *result = 0 ;
  
  result = (nifly::BSTextureArray *)new nifly::BSTextureArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSTextureArray(void * jarg1) {
  nifly::BSTextureArray *arg1 = (nifly::BSTextureArray *) 0 ;
  
  arg1 = (nifly::BSTextureArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_textureSetRef_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::NiBlockRef< nifly::BSShaderTextureSet > *arg2 = (nifly::NiBlockRef< nifly::BSShaderTextureSet > *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::BSShaderTextureSet > *)jarg2; 
  if (arg1) (arg1)->textureSetRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_textureSetRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::NiBlockRef< nifly::BSShaderTextureSet > *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSShaderTextureSet > *)& ((arg1)->textureSetRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_emissiveColor_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->emissiveColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_emissiveColor_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->emissiveColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_emissiveMultiple_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->emissiveMultiple = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_emissiveMultiple_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->emissiveMultiple);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_rootMaterialName_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::NiStringRef *arg2 = (nifly::NiStringRef *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::NiStringRef *)jarg2; 
  if (arg1) (arg1)->rootMaterialName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_rootMaterialName_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::NiStringRef *)& ((arg1)->rootMaterialName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_textureClampMode_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->textureClampMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_textureClampMode_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (uint32_t) ((arg1)->textureClampMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_alpha_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->alpha = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_alpha_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->alpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_refractionStrength_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->refractionStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_refractionStrength_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->refractionStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_glossiness_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->glossiness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_glossiness_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->glossiness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_specularColor_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->specularColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_specularColor_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->specularColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_specularStrength_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->specularStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_specularStrength_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->specularStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_softlighting_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->softlighting = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_softlighting_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->softlighting);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_rimlightPower_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rimlightPower = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_rimlightPower_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->rimlightPower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_subsurfaceRolloff_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->subsurfaceRolloff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_subsurfaceRolloff_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->subsurfaceRolloff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_rimlightPower2_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rimlightPower2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_rimlightPower2_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->rimlightPower2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_backlightPower_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->backlightPower = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_backlightPower_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->backlightPower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_grayscaleToPaletteScale_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->grayscaleToPaletteScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_grayscaleToPaletteScale_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->grayscaleToPaletteScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_fresnelPower_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fresnelPower = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_fresnelPower_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->fresnelPower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessSpecScale_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wetnessSpecScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessSpecScale_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->wetnessSpecScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessSpecPower_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wetnessSpecPower = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessSpecPower_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->wetnessSpecPower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessMinVar_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wetnessMinVar = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessMinVar_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->wetnessMinVar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessEnvmapScale_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wetnessEnvmapScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessEnvmapScale_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->wetnessEnvmapScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessFresnelPower_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wetnessFresnelPower = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessFresnelPower_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->wetnessFresnelPower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessMetalness_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wetnessMetalness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessMetalness_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->wetnessMetalness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessUnknown1_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wetnessUnknown1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessUnknown1_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->wetnessUnknown1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessUnknown2_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->wetnessUnknown2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessUnknown2_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->wetnessUnknown2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_lumEmittance_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lumEmittance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_lumEmittance_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->lumEmittance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_exposureOffset_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->exposureOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_exposureOffset_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->exposureOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_finalExposureMin_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->finalExposureMin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_finalExposureMin_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->finalExposureMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_finalExposureMax_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->finalExposureMax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_finalExposureMax_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->finalExposureMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_doTranslucency_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->doTranslucency = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_doTranslucency_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool) ((arg1)->doTranslucency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_subsurfaceColor_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Color3 *arg2 = (nifly::Color3 *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Color3 *)jarg2; 
  if (arg1) (arg1)->subsurfaceColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_subsurfaceColor_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Color3 *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::Color3 *)& ((arg1)->subsurfaceColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_transmissiveScale_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->transmissiveScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_transmissiveScale_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->transmissiveScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_turbulence_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->turbulence = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_turbulence_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->turbulence);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_thickObject_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->thickObject = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_thickObject_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool) ((arg1)->thickObject);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_mixAlbedo_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mixAlbedo = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_mixAlbedo_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool) ((arg1)->mixAlbedo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_hasTextureArrays_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasTextureArrays = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_hasTextureArrays_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool) ((arg1)->hasTextureArrays);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_numTextureArrays_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numTextureArrays = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_numTextureArrays_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (uint32_t) ((arg1)->numTextureArrays);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_textureArrays_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  std::vector< nifly::BSTextureArray > *arg2 = (std::vector< nifly::BSTextureArray > *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (std::vector< nifly::BSTextureArray > *)jarg2; 
  if (arg1) (arg1)->textureArrays = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_textureArrays_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  std::vector< nifly::BSTextureArray > *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (std::vector< nifly::BSTextureArray > *)& ((arg1)->textureArrays);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_useSSR_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useSSR = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_useSSR_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool) ((arg1)->useSSR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessUseSSR_set(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->wetnessUseSSR = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_wetnessUseSSR_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool) ((arg1)->wetnessUseSSR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_skinTintColor_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->skinTintColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_skinTintColor_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->skinTintColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_skinTintAlpha_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->skinTintAlpha = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_skinTintAlpha_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->skinTintAlpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_hairTintColor_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->hairTintColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_hairTintColor_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->hairTintColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_maxPasses_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxPasses = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_maxPasses_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->maxPasses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_scale_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_scale_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_parallaxInnerLayerThickness_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->parallaxInnerLayerThickness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_parallaxInnerLayerThickness_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->parallaxInnerLayerThickness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_parallaxRefractionScale_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->parallaxRefractionScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_parallaxRefractionScale_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->parallaxRefractionScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_parallaxInnerLayerTextureScale_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector2 *arg2 = (nifly::Vector2 *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2; 
  if (arg1) (arg1)->parallaxInnerLayerTextureScale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_parallaxInnerLayerTextureScale_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector2 *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::Vector2 *)& ((arg1)->parallaxInnerLayerTextureScale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_parallaxEnvmapStrength_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->parallaxEnvmapStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_parallaxEnvmapStrength_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->parallaxEnvmapStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_sparkleParameters_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Color4 *arg2 = (nifly::Color4 *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2; 
  if (arg1) (arg1)->sparkleParameters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_sparkleParameters_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Color4 *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::Color4 *)& ((arg1)->sparkleParameters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_eyeCubemapScale_set(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->eyeCubemapScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_eyeCubemapScale_get(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float) ((arg1)->eyeCubemapScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_eyeLeftReflectionCenter_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->eyeLeftReflectionCenter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_eyeLeftReflectionCenter_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->eyeLeftReflectionCenter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_eyeRightReflectionCenter_set(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->eyeRightReflectionCenter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_eyeRightReflectionCenter_get(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->eyeRightReflectionCenter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSLightingShaderProperty__SWIG_0() {
  void * jresult ;
  nifly::BSLightingShaderProperty *result = 0 ;
  
  result = (nifly::BSLightingShaderProperty *)new nifly::BSLightingShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSLightingShaderProperty__SWIG_1(void * jarg1) {
  void * jresult ;
  nifly::NiVersion *arg1 = 0 ;
  nifly::BSLightingShaderProperty *result = 0 ;
  
  arg1 = (nifly::NiVersion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiVersion & type is null", 0);
    return 0;
  } 
  result = (nifly::BSLightingShaderProperty *)new nifly::BSLightingShaderProperty(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSLightingShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_Sync(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetStringRefs(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetStringRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_HasTextureSet(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool)((nifly::BSLightingShaderProperty const *)arg1)->HasTextureSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_TextureSetRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::NiBlockRef< nifly::BSShaderTextureSet > *result = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSShaderTextureSet > *)(arg1)->TextureSetRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_IsSkinTinted(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool)((nifly::BSLightingShaderProperty const *)arg1)->IsSkinTinted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_IsFaceTinted(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool)((nifly::BSLightingShaderProperty const *)arg1)->IsFaceTinted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_HasGlowmap(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool)((nifly::BSLightingShaderProperty const *)arg1)->HasGlowmap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_HasEnvironmentMapping(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (bool)((nifly::BSLightingShaderProperty const *)arg1)->HasEnvironmentMapping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetShaderType(void * jarg1) {
  unsigned int jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (uint32_t)((nifly::BSLightingShaderProperty const *)arg1)->GetShaderType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_SetShaderType(void * jarg1, unsigned int jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetShaderType(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetSpecularColor(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = ((nifly::BSLightingShaderProperty const *)arg1)->GetSpecularColor();
  jresult = new nifly::Vector3((const nifly::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_SetSpecularColor(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetSpecularColor((nifly::Vector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetSpecularStrength(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetSpecularStrength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_SetSpecularStrength(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSpecularStrength(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetGlossiness(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetGlossiness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_SetGlossiness(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetGlossiness(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetEmissiveColor(void * jarg1) {
  void * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Color4 result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = ((nifly::BSLightingShaderProperty const *)arg1)->GetEmissiveColor();
  jresult = new nifly::Color4((const nifly::Color4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_SetEmissiveColor(void * jarg1, void * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  nifly::Color4 *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Color4 const & type is null", 0);
    return ;
  } 
  (arg1)->SetEmissiveColor((nifly::Color4 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetEmissiveMultiple(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetEmissiveMultiple();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_SetEmissiveMultiple(void * jarg1, float jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetEmissiveMultiple(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetAlpha(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetBacklightPower(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetBacklightPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetRimlightPower(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetRimlightPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetSoftlight(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetSoftlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetSubsurfaceRolloff(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetSubsurfaceRolloff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetGrayscaleToPaletteScale(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetGrayscaleToPaletteScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetFresnelPower(void * jarg1) {
  float jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = (float)((nifly::BSLightingShaderProperty const *)arg1)->GetFresnelPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_GetWetMaterialName(void * jarg1) {
  char * jresult ;
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  std::string result;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  result = ((nifly::BSLightingShaderProperty const *)arg1)->GetWetMaterialName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSLightingShaderProperty_SetWetMaterialName(void * jarg1, char * jarg2) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetWetMaterialName((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSLightingShaderProperty(void * jarg1) {
  nifly::BSLightingShaderProperty *arg1 = (nifly::BSLightingShaderProperty *) 0 ;
  
  arg1 = (nifly::BSLightingShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_sourceTexture_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->sourceTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_sourceTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->sourceTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_textureClampMode_set(void * jarg1, unsigned int jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->textureClampMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_textureClampMode_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (uint32_t) ((arg1)->textureClampMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_falloffStartAngle_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->falloffStartAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_falloffStartAngle_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->falloffStartAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_falloffStopAngle_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->falloffStopAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_falloffStopAngle_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->falloffStopAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_falloffStartOpacity_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->falloffStartOpacity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_falloffStartOpacity_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->falloffStartOpacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_falloffStopOpacity_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->falloffStopOpacity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_falloffStopOpacity_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->falloffStopOpacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_refractionPower_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->refractionPower = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_refractionPower_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->refractionPower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_baseColor_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::Color4 *arg2 = (nifly::Color4 *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2; 
  if (arg1) (arg1)->baseColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_baseColor_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::Color4 *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::Color4 *)& ((arg1)->baseColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_baseColorScale_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->baseColorScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_baseColorScale_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->baseColorScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_softFalloffDepth_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->softFalloffDepth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_softFalloffDepth_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->softFalloffDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_greyscaleTexture_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->greyscaleTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_greyscaleTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->greyscaleTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_envMapTexture_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->envMapTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_envMapTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->envMapTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_normalTexture_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->normalTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_normalTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->normalTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_envMaskTexture_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->envMaskTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_envMaskTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->envMaskTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_envMapScale_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->envMapScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_envMapScale_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->envMapScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_reflectanceTexture_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->reflectanceTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_reflectanceTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->reflectanceTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_lightingTexture_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->lightingTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_lightingTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->lightingTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_emittanceColor_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::Color3 *arg2 = (nifly::Color3 *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::Color3 *)jarg2; 
  if (arg1) (arg1)->emittanceColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_emittanceColor_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::Color3 *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::Color3 *)& ((arg1)->emittanceColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_emitGradientTexture_set(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->emitGradientTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_emitGradientTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->emitGradientTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_lumEmittance_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->lumEmittance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_lumEmittance_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->lumEmittance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_exposureOffset_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->exposureOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_exposureOffset_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->exposureOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_finalExposureMin_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->finalExposureMin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_finalExposureMin_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->finalExposureMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_finalExposureMax_set(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->finalExposureMax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_finalExposureMax_get(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float) ((arg1)->finalExposureMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSEffectShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_Sync(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_GetEnvironmentMapScale(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float)((nifly::BSEffectShaderProperty const *)arg1)->GetEnvironmentMapScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_GetEmissiveColor(void * jarg1) {
  void * jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::Color4 result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = ((nifly::BSEffectShaderProperty const *)arg1)->GetEmissiveColor();
  jresult = new nifly::Color4((const nifly::Color4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_SetEmissiveColor(void * jarg1, void * jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  nifly::Color4 *arg2 = 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Color4 const & type is null", 0);
    return ;
  } 
  (arg1)->SetEmissiveColor((nifly::Color4 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_GetEmissiveMultiple(void * jarg1) {
  float jresult ;
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  result = (float)((nifly::BSEffectShaderProperty const *)arg1)->GetEmissiveMultiple();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSEffectShaderProperty_SetEmissiveMultiple(void * jarg1, float jarg2) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetEmissiveMultiple(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSEffectShaderProperty() {
  void * jresult ;
  nifly::BSEffectShaderProperty *result = 0 ;
  
  result = (nifly::BSEffectShaderProperty *)new nifly::BSEffectShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSEffectShaderProperty(void * jarg1) {
  nifly::BSEffectShaderProperty *arg1 = (nifly::BSEffectShaderProperty *) 0 ;
  
  arg1 = (nifly::BSEffectShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSWaterShaderProperty_waterFlags_set(void * jarg1, unsigned int jarg2) {
  nifly::BSWaterShaderProperty *arg1 = (nifly::BSWaterShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSWaterShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->waterFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSWaterShaderProperty_waterFlags_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSWaterShaderProperty *arg1 = (nifly::BSWaterShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSWaterShaderProperty *)jarg1; 
  result = (uint32_t) ((arg1)->waterFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSWaterShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSWaterShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSWaterShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSWaterShaderProperty *arg1 = (nifly::BSWaterShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSWaterShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSWaterShaderProperty_Sync(void * jarg1, void * jarg2) {
  nifly::BSWaterShaderProperty *arg1 = (nifly::BSWaterShaderProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSWaterShaderProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSWaterShaderProperty() {
  void * jresult ;
  nifly::BSWaterShaderProperty *result = 0 ;
  
  result = (nifly::BSWaterShaderProperty *)new nifly::BSWaterShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSWaterShaderProperty(void * jarg1) {
  nifly::BSWaterShaderProperty *arg1 = (nifly::BSWaterShaderProperty *) 0 ;
  
  arg1 = (nifly::BSWaterShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkyShaderProperty_baseTexture_set(void * jarg1, void * jarg2) {
  nifly::BSSkyShaderProperty *arg1 = (nifly::BSSkyShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSSkyShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->baseTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSkyShaderProperty_baseTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSSkyShaderProperty *arg1 = (nifly::BSSkyShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSSkyShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->baseTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkyShaderProperty_skyFlags_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSkyShaderProperty *arg1 = (nifly::BSSkyShaderProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSkyShaderProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->skyFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSkyShaderProperty_skyFlags_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSkyShaderProperty *arg1 = (nifly::BSSkyShaderProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSkyShaderProperty *)jarg1; 
  result = (uint32_t) ((arg1)->skyFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSkyShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSSkyShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSkyShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSSkyShaderProperty *arg1 = (nifly::BSSkyShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSSkyShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkyShaderProperty_Sync(void * jarg1, void * jarg2) {
  nifly::BSSkyShaderProperty *arg1 = (nifly::BSSkyShaderProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSSkyShaderProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSkyShaderProperty() {
  void * jresult ;
  nifly::BSSkyShaderProperty *result = 0 ;
  
  result = (nifly::BSSkyShaderProperty *)new nifly::BSSkyShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSkyShaderProperty(void * jarg1) {
  nifly::BSSkyShaderProperty *arg1 = (nifly::BSSkyShaderProperty *) 0 ;
  
  arg1 = (nifly::BSSkyShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderLightingProperty_textureClampMode_set(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderLightingProperty *arg1 = (nifly::BSShaderLightingProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSShaderLightingProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->textureClampMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderLightingProperty_textureClampMode_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderLightingProperty *arg1 = (nifly::BSShaderLightingProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSShaderLightingProperty *)jarg1; 
  result = (uint32_t) ((arg1)->textureClampMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderLightingProperty_Sync(void * jarg1, void * jarg2) {
  nifly::BSShaderLightingProperty *arg1 = (nifly::BSShaderLightingProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSShaderLightingProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSShaderLightingProperty() {
  void * jresult ;
  nifly::BSShaderLightingProperty *result = 0 ;
  
  result = (nifly::BSShaderLightingProperty *)new nifly::BSShaderLightingProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSShaderLightingProperty(void * jarg1) {
  nifly::BSShaderLightingProperty *arg1 = (nifly::BSShaderLightingProperty *) 0 ;
  
  arg1 = (nifly::BSShaderLightingProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_SkyShaderProperty_fileName_set(void * jarg1, void * jarg2) {
  nifly::SkyShaderProperty *arg1 = (nifly::SkyShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::SkyShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->fileName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_SkyShaderProperty_fileName_get(void * jarg1) {
  void * jresult ;
  nifly::SkyShaderProperty *arg1 = (nifly::SkyShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::SkyShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->fileName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_SkyShaderProperty_skyObjectType_set(void * jarg1, int jarg2) {
  nifly::SkyShaderProperty *arg1 = (nifly::SkyShaderProperty *) 0 ;
  nifly::SkyObjectType arg2 ;
  
  arg1 = (nifly::SkyShaderProperty *)jarg1; 
  arg2 = (nifly::SkyObjectType)jarg2; 
  if (arg1) (arg1)->skyObjectType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_SkyShaderProperty_skyObjectType_get(void * jarg1) {
  int jresult ;
  nifly::SkyShaderProperty *arg1 = (nifly::SkyShaderProperty *) 0 ;
  nifly::SkyObjectType result;
  
  arg1 = (nifly::SkyShaderProperty *)jarg1; 
  result = (nifly::SkyObjectType) ((arg1)->skyObjectType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_SkyShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::SkyShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_SkyShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::SkyShaderProperty *arg1 = (nifly::SkyShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::SkyShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_SkyShaderProperty_Sync(void * jarg1, void * jarg2) {
  nifly::SkyShaderProperty *arg1 = (nifly::SkyShaderProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::SkyShaderProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_SkyShaderProperty() {
  void * jresult ;
  nifly::SkyShaderProperty *result = 0 ;
  
  result = (nifly::SkyShaderProperty *)new nifly::SkyShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_SkyShaderProperty(void * jarg1) {
  nifly::SkyShaderProperty *arg1 = (nifly::SkyShaderProperty *) 0 ;
  
  arg1 = (nifly::SkyShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TileShaderProperty_fileName_set(void * jarg1, void * jarg2) {
  nifly::TileShaderProperty *arg1 = (nifly::TileShaderProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::TileShaderProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->fileName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_TileShaderProperty_fileName_get(void * jarg1) {
  void * jresult ;
  nifly::TileShaderProperty *arg1 = (nifly::TileShaderProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::TileShaderProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->fileName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_TileShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::TileShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_TileShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::TileShaderProperty *arg1 = (nifly::TileShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::TileShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_TileShaderProperty_Sync(void * jarg1, void * jarg2) {
  nifly::TileShaderProperty *arg1 = (nifly::TileShaderProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::TileShaderProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_TileShaderProperty() {
  void * jresult ;
  nifly::TileShaderProperty *result = 0 ;
  
  result = (nifly::TileShaderProperty *)new nifly::TileShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_TileShaderProperty(void * jarg1) {
  nifly::TileShaderProperty *arg1 = (nifly::TileShaderProperty *) 0 ;
  
  arg1 = (nifly::TileShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_baseTexture_set(void * jarg1, void * jarg2) {
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  nifly::NiString *arg2 = (nifly::NiString *) 0 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  arg2 = (nifly::NiString *)jarg2; 
  if (arg1) (arg1)->baseTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_baseTexture_get(void * jarg1) {
  void * jresult ;
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  nifly::NiString *result = 0 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  result = (nifly::NiString *)& ((arg1)->baseTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_falloffStartAngle_set(void * jarg1, float jarg2) {
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->falloffStartAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_falloffStartAngle_get(void * jarg1) {
  float jresult ;
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  result = (float) ((arg1)->falloffStartAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_falloffStopAngle_set(void * jarg1, float jarg2) {
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->falloffStopAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_falloffStopAngle_get(void * jarg1) {
  float jresult ;
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  result = (float) ((arg1)->falloffStopAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_falloffStartOpacity_set(void * jarg1, float jarg2) {
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->falloffStartOpacity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_falloffStartOpacity_get(void * jarg1) {
  float jresult ;
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  result = (float) ((arg1)->falloffStartOpacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_falloffStopOpacity_set(void * jarg1, float jarg2) {
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->falloffStopOpacity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_falloffStopOpacity_get(void * jarg1) {
  float jresult ;
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  result = (float) ((arg1)->falloffStopOpacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSShaderNoLightingProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_Sync(void * jarg1, void * jarg2) {
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_IsSkinned(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  result = (bool)((nifly::BSShaderNoLightingProperty const *)arg1)->IsSkinned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderNoLightingProperty_SetSkinned(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSkinned(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSShaderNoLightingProperty() {
  void * jresult ;
  nifly::BSShaderNoLightingProperty *result = 0 ;
  
  result = (nifly::BSShaderNoLightingProperty *)new nifly::BSShaderNoLightingProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSShaderNoLightingProperty(void * jarg1) {
  nifly::BSShaderNoLightingProperty *arg1 = (nifly::BSShaderNoLightingProperty *) 0 ;
  
  arg1 = (nifly::BSShaderNoLightingProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_textureSetRef_set(void * jarg1, void * jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  nifly::NiBlockRef< nifly::BSShaderTextureSet > *arg2 = (nifly::NiBlockRef< nifly::BSShaderTextureSet > *) 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::BSShaderTextureSet > *)jarg2; 
  if (arg1) (arg1)->textureSetRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_textureSetRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  nifly::NiBlockRef< nifly::BSShaderTextureSet > *result = 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSShaderTextureSet > *)& ((arg1)->textureSetRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_refractionStrength_set(void * jarg1, float jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->refractionStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_refractionStrength_get(void * jarg1) {
  float jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (float) ((arg1)->refractionStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_refractionFirePeriod_set(void * jarg1, int jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->refractionFirePeriod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_refractionFirePeriod_get(void * jarg1) {
  int jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  int result;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (int) ((arg1)->refractionFirePeriod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_parallaxMaxPasses_set(void * jarg1, float jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->parallaxMaxPasses = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_parallaxMaxPasses_get(void * jarg1) {
  float jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (float) ((arg1)->parallaxMaxPasses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_parallaxScale_set(void * jarg1, float jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->parallaxScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_parallaxScale_get(void * jarg1) {
  float jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  float result;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (float) ((arg1)->parallaxScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_emissiveColor_set(void * jarg1, void * jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  nifly::Color4 *arg2 = (nifly::Color4 *) 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2; 
  if (arg1) (arg1)->emissiveColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_emissiveColor_get(void * jarg1) {
  void * jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  nifly::Color4 *result = 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (nifly::Color4 *)& ((arg1)->emissiveColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSShaderPPLightingProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_Sync(void * jarg1, void * jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_HasTextureSet(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (bool)((nifly::BSShaderPPLightingProperty const *)arg1)->HasTextureSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_TextureSetRef__SWIG_0(void * jarg1) {
  void * jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  nifly::NiBlockRef< nifly::BSShaderTextureSet > *result = 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSShaderTextureSet > *)(arg1)->TextureSetRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_IsSkinned(void * jarg1) {
  unsigned int jresult ;
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  bool result;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  result = (bool)((nifly::BSShaderPPLightingProperty const *)arg1)->IsSkinned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSShaderPPLightingProperty_SetSkinned(void * jarg1, unsigned int jarg2) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSkinned(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSShaderPPLightingProperty() {
  void * jresult ;
  nifly::BSShaderPPLightingProperty *result = 0 ;
  
  result = (nifly::BSShaderPPLightingProperty *)new nifly::BSShaderPPLightingProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSShaderPPLightingProperty(void * jarg1) {
  nifly::BSShaderPPLightingProperty *arg1 = (nifly::BSShaderPPLightingProperty *) 0 ;
  
  arg1 = (nifly::BSShaderPPLightingProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_Lighting30ShaderProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::Lighting30ShaderProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_Lighting30ShaderProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::Lighting30ShaderProperty *arg1 = (nifly::Lighting30ShaderProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::Lighting30ShaderProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_Lighting30ShaderProperty() {
  void * jresult ;
  nifly::Lighting30ShaderProperty *result = 0 ;
  
  result = (nifly::Lighting30ShaderProperty *)new nifly::Lighting30ShaderProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_Lighting30ShaderProperty(void * jarg1) {
  nifly::Lighting30ShaderProperty *arg1 = (nifly::Lighting30ShaderProperty *) 0 ;
  
  arg1 = (nifly::Lighting30ShaderProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAlphaProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiAlphaProperty *arg1 = (nifly::NiAlphaProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiAlphaProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiAlphaProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiAlphaProperty *arg1 = (nifly::NiAlphaProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiAlphaProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAlphaProperty_threshold_set(void * jarg1, unsigned char jarg2) {
  nifly::NiAlphaProperty *arg1 = (nifly::NiAlphaProperty *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiAlphaProperty *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->threshold = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiAlphaProperty_threshold_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiAlphaProperty *arg1 = (nifly::NiAlphaProperty *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiAlphaProperty *)jarg1; 
  result = (uint8_t) ((arg1)->threshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAlphaProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiAlphaProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiAlphaProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiAlphaProperty *arg1 = (nifly::NiAlphaProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiAlphaProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiAlphaProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiAlphaProperty *arg1 = (nifly::NiAlphaProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiAlphaProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiAlphaProperty() {
  void * jresult ;
  nifly::NiAlphaProperty *result = 0 ;
  
  result = (nifly::NiAlphaProperty *)new nifly::NiAlphaProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiAlphaProperty(void * jarg1) {
  nifly::NiAlphaProperty *arg1 = (nifly::NiAlphaProperty *) 0 ;
  
  arg1 = (nifly::NiAlphaProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMaterialProperty_colorAmbient_set(void * jarg1, void * jarg2) {
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->colorAmbient = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiMaterialProperty_colorAmbient_get(void * jarg1) {
  void * jresult ;
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->colorAmbient);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMaterialProperty_colorDiffuse_set(void * jarg1, void * jarg2) {
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->colorDiffuse = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiMaterialProperty_colorDiffuse_get(void * jarg1) {
  void * jresult ;
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->colorDiffuse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMaterialProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiMaterialProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiMaterialProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMaterialProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiMaterialProperty_IsEmissive() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)nifly::NiMaterialProperty::IsEmissive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiMaterialProperty_GetSpecularColor(void * jarg1) {
  void * jresult ;
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  nifly::Vector3 result;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  result = (arg1)->GetSpecularColor();
  jresult = new nifly::Vector3((const nifly::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMaterialProperty_SetSpecularColor(void * jarg1, void * jarg2) {
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  nifly::Vector3 *arg2 = 0 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetSpecularColor((nifly::Vector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiMaterialProperty_GetGlossiness(void * jarg1) {
  float jresult ;
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  float result;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  result = (float)((nifly::NiMaterialProperty const *)arg1)->GetGlossiness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMaterialProperty_SetGlossiness(void * jarg1, float jarg2) {
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetGlossiness(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiMaterialProperty_GetEmissiveColor(void * jarg1) {
  void * jresult ;
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  nifly::Color4 result;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  result = ((nifly::NiMaterialProperty const *)arg1)->GetEmissiveColor();
  jresult = new nifly::Color4((const nifly::Color4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMaterialProperty_SetEmissiveColor(void * jarg1, void * jarg2) {
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  nifly::Color4 *arg2 = 0 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  arg2 = (nifly::Color4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::Color4 const & type is null", 0);
    return ;
  } 
  (arg1)->SetEmissiveColor((nifly::Color4 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiMaterialProperty_GetEmissiveMultiple(void * jarg1) {
  float jresult ;
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  float result;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  result = (float)((nifly::NiMaterialProperty const *)arg1)->GetEmissiveMultiple();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiMaterialProperty_SetEmissiveMultiple(void * jarg1, float jarg2) {
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetEmissiveMultiple(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_NiMaterialProperty_GetAlpha(void * jarg1) {
  float jresult ;
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  float result;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  result = (float)((nifly::NiMaterialProperty const *)arg1)->GetAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiMaterialProperty() {
  void * jresult ;
  nifly::NiMaterialProperty *result = 0 ;
  
  result = (nifly::NiMaterialProperty *)new nifly::NiMaterialProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiMaterialProperty(void * jarg1) {
  nifly::NiMaterialProperty *arg1 = (nifly::NiMaterialProperty *) 0 ;
  
  arg1 = (nifly::NiMaterialProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStencilProperty_flags_set(void * jarg1, unsigned short jarg2) {
  nifly::NiStencilProperty *arg1 = (nifly::NiStencilProperty *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiStencilProperty *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiStencilProperty_flags_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiStencilProperty *arg1 = (nifly::NiStencilProperty *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiStencilProperty *)jarg1; 
  result = (uint16_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStencilProperty_stencilRef_set(void * jarg1, unsigned int jarg2) {
  nifly::NiStencilProperty *arg1 = (nifly::NiStencilProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiStencilProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->stencilRef = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiStencilProperty_stencilRef_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiStencilProperty *arg1 = (nifly::NiStencilProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiStencilProperty *)jarg1; 
  result = (uint32_t) ((arg1)->stencilRef);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStencilProperty_stencilMask_set(void * jarg1, unsigned int jarg2) {
  nifly::NiStencilProperty *arg1 = (nifly::NiStencilProperty *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiStencilProperty *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->stencilMask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiStencilProperty_stencilMask_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiStencilProperty *arg1 = (nifly::NiStencilProperty *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiStencilProperty *)jarg1; 
  result = (uint32_t) ((arg1)->stencilMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiStencilProperty_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiStencilProperty::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiStencilProperty_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiStencilProperty *arg1 = (nifly::NiStencilProperty *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiStencilProperty *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiStencilProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiStencilProperty *arg1 = (nifly::NiStencilProperty *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiStencilProperty *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiStencilProperty() {
  void * jresult ;
  nifly::NiStencilProperty *result = 0 ;
  
  result = (nifly::NiStencilProperty *)new nifly::NiStencilProperty();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiStencilProperty(void * jarg1) {
  nifly::NiStencilProperty *arg1 = (nifly::NiStencilProperty *) 0 ;
  
  arg1 = (nifly::NiStencilProperty *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_SkinWeight_index_set(void * jarg1, unsigned short jarg2) {
  nifly::SkinWeight *arg1 = (nifly::SkinWeight *) 0 ;
  std::uint16_t arg2 ;
  
  arg1 = (nifly::SkinWeight *)jarg1; 
  arg2 = (std::uint16_t)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_SkinWeight_index_get(void * jarg1) {
  unsigned short jresult ;
  nifly::SkinWeight *arg1 = (nifly::SkinWeight *) 0 ;
  std::uint16_t result;
  
  arg1 = (nifly::SkinWeight *)jarg1; 
  result = (std::uint16_t) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_SkinWeight_weight_set(void * jarg1, float jarg2) {
  nifly::SkinWeight *arg1 = (nifly::SkinWeight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::SkinWeight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_SkinWeight_weight_get(void * jarg1) {
  float jresult ;
  nifly::SkinWeight *arg1 = (nifly::SkinWeight *) 0 ;
  float result;
  
  arg1 = (nifly::SkinWeight *)jarg1; 
  result = (float) ((arg1)->weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_SkinWeight__SWIG_0(unsigned short jarg1, float jarg2) {
  void * jresult ;
  uint16_t arg1 ;
  float arg2 ;
  nifly::SkinWeight *result = 0 ;
  
  arg1 = (uint16_t)jarg1; 
  arg2 = (float)jarg2; 
  result = (nifly::SkinWeight *)new nifly::SkinWeight(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_SkinWeight__SWIG_1(unsigned short jarg1) {
  void * jresult ;
  uint16_t arg1 ;
  nifly::SkinWeight *result = 0 ;
  
  arg1 = (uint16_t)jarg1; 
  result = (nifly::SkinWeight *)new nifly::SkinWeight(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_SkinWeight__SWIG_2() {
  void * jresult ;
  nifly::SkinWeight *result = 0 ;
  
  result = (nifly::SkinWeight *)new nifly::SkinWeight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_SkinWeight(void * jarg1) {
  nifly::SkinWeight *arg1 = (nifly::SkinWeight *) 0 ;
  
  arg1 = (nifly::SkinWeight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexWeight_w1_set(void * jarg1, float jarg2) {
  nifly::VertexWeight *arg1 = (nifly::VertexWeight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::VertexWeight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_VertexWeight_w1_get(void * jarg1) {
  float jresult ;
  nifly::VertexWeight *arg1 = (nifly::VertexWeight *) 0 ;
  float result;
  
  arg1 = (nifly::VertexWeight *)jarg1; 
  result = (float) ((arg1)->w1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexWeight_w2_set(void * jarg1, float jarg2) {
  nifly::VertexWeight *arg1 = (nifly::VertexWeight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::VertexWeight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_VertexWeight_w2_get(void * jarg1) {
  float jresult ;
  nifly::VertexWeight *arg1 = (nifly::VertexWeight *) 0 ;
  float result;
  
  arg1 = (nifly::VertexWeight *)jarg1; 
  result = (float) ((arg1)->w2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexWeight_w3_set(void * jarg1, float jarg2) {
  nifly::VertexWeight *arg1 = (nifly::VertexWeight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::VertexWeight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w3 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_VertexWeight_w3_get(void * jarg1) {
  float jresult ;
  nifly::VertexWeight *arg1 = (nifly::VertexWeight *) 0 ;
  float result;
  
  arg1 = (nifly::VertexWeight *)jarg1; 
  result = (float) ((arg1)->w3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexWeight_w4_set(void * jarg1, float jarg2) {
  nifly::VertexWeight *arg1 = (nifly::VertexWeight *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::VertexWeight *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w4 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_VertexWeight_w4_get(void * jarg1) {
  float jresult ;
  nifly::VertexWeight *arg1 = (nifly::VertexWeight *) 0 ;
  float result;
  
  arg1 = (nifly::VertexWeight *)jarg1; 
  result = (float) ((arg1)->w4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_VertexWeight() {
  void * jresult ;
  nifly::VertexWeight *result = 0 ;
  
  result = (nifly::VertexWeight *)new nifly::VertexWeight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_VertexWeight(void * jarg1) {
  nifly::VertexWeight *arg1 = (nifly::VertexWeight *) 0 ;
  
  arg1 = (nifly::VertexWeight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoneIndices_i1_set(void * jarg1, unsigned char jarg2) {
  nifly::BoneIndices *arg1 = (nifly::BoneIndices *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BoneIndices *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->i1 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BoneIndices_i1_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BoneIndices *arg1 = (nifly::BoneIndices *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BoneIndices *)jarg1; 
  result = (uint8_t) ((arg1)->i1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoneIndices_i2_set(void * jarg1, unsigned char jarg2) {
  nifly::BoneIndices *arg1 = (nifly::BoneIndices *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BoneIndices *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->i2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BoneIndices_i2_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BoneIndices *arg1 = (nifly::BoneIndices *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BoneIndices *)jarg1; 
  result = (uint8_t) ((arg1)->i2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoneIndices_i3_set(void * jarg1, unsigned char jarg2) {
  nifly::BoneIndices *arg1 = (nifly::BoneIndices *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BoneIndices *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->i3 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BoneIndices_i3_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BoneIndices *arg1 = (nifly::BoneIndices *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BoneIndices *)jarg1; 
  result = (uint8_t) ((arg1)->i3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BoneIndices_i4_set(void * jarg1, unsigned char jarg2) {
  nifly::BoneIndices *arg1 = (nifly::BoneIndices *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BoneIndices *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->i4 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BoneIndices_i4_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BoneIndices *arg1 = (nifly::BoneIndices *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BoneIndices *)jarg1; 
  result = (uint8_t) ((arg1)->i4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BoneIndices() {
  void * jresult ;
  nifly::BoneIndices *result = 0 ;
  
  result = (nifly::BoneIndices *)new nifly::BoneIndices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BoneIndices(void * jarg1) {
  nifly::BoneIndices *arg1 = (nifly::BoneIndices *) 0 ;
  
  arg1 = (nifly::BoneIndices *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_BoneData_boneTransform_set(void * jarg1, void * jarg2) {
  nifly::NiSkinData::BoneData *arg1 = (nifly::NiSkinData::BoneData *) 0 ;
  nifly::MatTransform *arg2 = (nifly::MatTransform *) 0 ;
  
  arg1 = (nifly::NiSkinData::BoneData *)jarg1; 
  arg2 = (nifly::MatTransform *)jarg2; 
  if (arg1) (arg1)->boneTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinData_BoneData_boneTransform_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinData::BoneData *arg1 = (nifly::NiSkinData::BoneData *) 0 ;
  nifly::MatTransform *result = 0 ;
  
  arg1 = (nifly::NiSkinData::BoneData *)jarg1; 
  result = (nifly::MatTransform *)& ((arg1)->boneTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_BoneData_bounds_set(void * jarg1, void * jarg2) {
  nifly::NiSkinData::BoneData *arg1 = (nifly::NiSkinData::BoneData *) 0 ;
  nifly::BoundingSphere *arg2 = (nifly::BoundingSphere *) 0 ;
  
  arg1 = (nifly::NiSkinData::BoneData *)jarg1; 
  arg2 = (nifly::BoundingSphere *)jarg2; 
  if (arg1) (arg1)->bounds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinData_BoneData_bounds_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinData::BoneData *arg1 = (nifly::NiSkinData::BoneData *) 0 ;
  nifly::BoundingSphere *result = 0 ;
  
  arg1 = (nifly::NiSkinData::BoneData *)jarg1; 
  result = (nifly::BoundingSphere *)& ((arg1)->bounds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_BoneData_numVertices_set(void * jarg1, unsigned short jarg2) {
  nifly::NiSkinData::BoneData *arg1 = (nifly::NiSkinData::BoneData *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiSkinData::BoneData *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiSkinData_BoneData_numVertices_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiSkinData::BoneData *arg1 = (nifly::NiSkinData::BoneData *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiSkinData::BoneData *)jarg1; 
  result = (uint16_t) ((arg1)->numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_BoneData_vertexWeights_set(void * jarg1, void * jarg2) {
  nifly::NiSkinData::BoneData *arg1 = (nifly::NiSkinData::BoneData *) 0 ;
  std::vector< nifly::SkinWeight > *arg2 = (std::vector< nifly::SkinWeight > *) 0 ;
  
  arg1 = (nifly::NiSkinData::BoneData *)jarg1; 
  arg2 = (std::vector< nifly::SkinWeight > *)jarg2; 
  if (arg1) (arg1)->vertexWeights = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinData_BoneData_vertexWeights_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinData::BoneData *arg1 = (nifly::NiSkinData::BoneData *) 0 ;
  std::vector< nifly::SkinWeight > *result = 0 ;
  
  arg1 = (nifly::NiSkinData::BoneData *)jarg1; 
  result = (std::vector< nifly::SkinWeight > *)& ((arg1)->vertexWeights);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSkinData_BoneData() {
  void * jresult ;
  nifly::NiSkinData::BoneData *result = 0 ;
  
  result = (nifly::NiSkinData::BoneData *)new nifly::NiSkinData::BoneData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSkinData_BoneData(void * jarg1) {
  nifly::NiSkinData::BoneData *arg1 = (nifly::NiSkinData::BoneData *) 0 ;
  
  arg1 = (nifly::NiSkinData::BoneData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_skinTransform_set(void * jarg1, void * jarg2) {
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  nifly::MatTransform *arg2 = (nifly::MatTransform *) 0 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  arg2 = (nifly::MatTransform *)jarg2; 
  if (arg1) (arg1)->skinTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinData_skinTransform_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  nifly::MatTransform *result = 0 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  result = (nifly::MatTransform *)& ((arg1)->skinTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_numBones_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numBones = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinData_numBones_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  result = (uint32_t) ((arg1)->numBones);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_hasVertWeights_set(void * jarg1, unsigned char jarg2) {
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hasVertWeights = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiSkinData_hasVertWeights_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  result = (uint8_t) ((arg1)->hasVertWeights);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_bones_set(void * jarg1, void * jarg2) {
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  std::vector< nifly::NiSkinData::BoneData > *arg2 = (std::vector< nifly::NiSkinData::BoneData > *) 0 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  arg2 = (std::vector< nifly::NiSkinData::BoneData > *)jarg2; 
  if (arg1) (arg1)->bones = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinData_bones_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  std::vector< nifly::NiSkinData::BoneData > *result = 0 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  result = (std::vector< nifly::NiSkinData::BoneData > *)& ((arg1)->bones);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSkinData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSkinData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSkinData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_Sync(void * jarg1, void * jarg2) {
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinData_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSkinData() {
  void * jresult ;
  nifly::NiSkinData *result = 0 ;
  
  result = (nifly::NiSkinData *)new nifly::NiSkinData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSkinData(void * jarg1) {
  nifly::NiSkinData *arg1 = (nifly::NiSkinData *) 0 ;
  
  arg1 = (nifly::NiSkinData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numVertices_set(void * jarg1, unsigned short jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numVertices_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (uint16_t) ((arg1)->numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numTriangles_set(void * jarg1, unsigned short jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numTriangles = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numTriangles_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (uint16_t) ((arg1)->numTriangles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numBones_set(void * jarg1, unsigned short jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numBones = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numBones_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (uint16_t) ((arg1)->numBones);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numStrips_set(void * jarg1, unsigned short jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numStrips = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numStrips_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (uint16_t) ((arg1)->numStrips);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numWeightsPerVertex_set(void * jarg1, unsigned short jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->numWeightsPerVertex = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_numWeightsPerVertex_get(void * jarg1) {
  unsigned short jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (uint16_t) ((arg1)->numWeightsPerVertex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_bones_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< uint16_t > *arg2 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2; 
  if (arg1) (arg1)->bones = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_bones_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (std::vector< uint16_t > *)& ((arg1)->bones);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_hasVertexMap_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasVertexMap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_hasVertexMap_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (bool) ((arg1)->hasVertexMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_vertexMap_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< uint16_t > *arg2 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2; 
  if (arg1) (arg1)->vertexMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_vertexMap_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (std::vector< uint16_t > *)& ((arg1)->vertexMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_hasVertexWeights_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasVertexWeights = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_hasVertexWeights_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (bool) ((arg1)->hasVertexWeights);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_vertexWeights_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< nifly::VertexWeight > *arg2 = (std::vector< nifly::VertexWeight > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (std::vector< nifly::VertexWeight > *)jarg2; 
  if (arg1) (arg1)->vertexWeights = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_vertexWeights_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< nifly::VertexWeight > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (std::vector< nifly::VertexWeight > *)& ((arg1)->vertexWeights);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_stripLengths_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< uint16_t > *arg2 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2; 
  if (arg1) (arg1)->stripLengths = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_stripLengths_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (std::vector< uint16_t > *)& ((arg1)->stripLengths);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_hasFaces_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasFaces = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_hasFaces_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (bool) ((arg1)->hasFaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_strips_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< std::vector< uint16_t > > *arg2 = (std::vector< std::vector< uint16_t > > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (std::vector< std::vector< uint16_t > > *)jarg2; 
  if (arg1) (arg1)->strips = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_strips_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< std::vector< uint16_t > > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (std::vector< std::vector< uint16_t > > *)& ((arg1)->strips);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_triangles_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< nifly::Triangle > *arg2 = (std::vector< nifly::Triangle > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2; 
  if (arg1) (arg1)->triangles = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_triangles_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< nifly::Triangle > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (std::vector< nifly::Triangle > *)& ((arg1)->triangles);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_hasBoneIndices_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasBoneIndices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_hasBoneIndices_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (bool) ((arg1)->hasBoneIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_boneIndices_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< nifly::BoneIndices > *arg2 = (std::vector< nifly::BoneIndices > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (std::vector< nifly::BoneIndices > *)jarg2; 
  if (arg1) (arg1)->boneIndices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_boneIndices_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< nifly::BoneIndices > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (std::vector< nifly::BoneIndices > *)& ((arg1)->boneIndices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_lodLevel_set(void * jarg1, unsigned char jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->lodLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_lodLevel_get(void * jarg1) {
  unsigned char jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (uint8_t) ((arg1)->lodLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_globalVB_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->globalVB = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_globalVB_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (bool) ((arg1)->globalVB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_vertexDesc_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  VertexDesc arg2 ;
  VertexDesc *argp2 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  argp2 = (VertexDesc *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VertexDesc", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vertexDesc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_vertexDesc_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  VertexDesc result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result =  ((arg1)->vertexDesc);
  jresult = new VertexDesc((const VertexDesc &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_trueTriangles_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< nifly::Triangle > *arg2 = (std::vector< nifly::Triangle > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2; 
  if (arg1) (arg1)->trueTriangles = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_trueTriangles_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  std::vector< nifly::Triangle > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (std::vector< nifly::Triangle > *)& ((arg1)->trueTriangles);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_ConvertStripsToTriangles(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  result = (bool)(arg1)->ConvertStripsToTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_GenerateTrueTrianglesFromMappedTriangles(void * jarg1) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  (arg1)->GenerateTrueTrianglesFromMappedTriangles();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_GenerateMappedTrianglesFromTrueTrianglesAndVertexMap(void * jarg1) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  (arg1)->GenerateMappedTrianglesFromTrueTrianglesAndVertexMap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PartitionBlock_GenerateVertexMapFromTrueTriangles(void * jarg1) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  (arg1)->GenerateVertexMapFromTrueTriangles();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSkinPartition_PartitionBlock() {
  void * jresult ;
  nifly::NiSkinPartition::PartitionBlock *result = 0 ;
  
  result = (nifly::NiSkinPartition::PartitionBlock *)new nifly::NiSkinPartition::PartitionBlock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSkinPartition_PartitionBlock(void * jarg1) {
  nifly::NiSkinPartition::PartitionBlock *arg1 = (nifly::NiSkinPartition::PartitionBlock *) 0 ;
  
  arg1 = (nifly::NiSkinPartition::PartitionBlock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_numPartitions_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numPartitions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_numPartitions_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (uint32_t) ((arg1)->numPartitions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_dataSize_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->dataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_dataSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (uint32_t) ((arg1)->dataSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_vertexSize_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vertexSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_vertexSize_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (uint32_t) ((arg1)->vertexSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_vertexDesc_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  VertexDesc arg2 ;
  VertexDesc *argp2 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  argp2 = (VertexDesc *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null VertexDesc", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->vertexDesc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_vertexDesc_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  VertexDesc result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result =  ((arg1)->vertexDesc);
  jresult = new VertexDesc((const VertexDesc &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_numVertices_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->numVertices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_numVertices_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (uint32_t) ((arg1)->numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_vertData_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< nifly::BSVertexData > *arg2 = (std::vector< nifly::BSVertexData > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (std::vector< nifly::BSVertexData > *)jarg2; 
  if (arg1) (arg1)->vertData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_vertData_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< nifly::BSVertexData > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (std::vector< nifly::BSVertexData > *)& ((arg1)->vertData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_partitions_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< nifly::NiSkinPartition::PartitionBlock > *arg2 = (std::vector< nifly::NiSkinPartition::PartitionBlock > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (std::vector< nifly::NiSkinPartition::PartitionBlock > *)jarg2; 
  if (arg1) (arg1)->partitions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_partitions_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< nifly::NiSkinPartition::PartitionBlock > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (std::vector< nifly::NiSkinPartition::PartitionBlock > *)& ((arg1)->partitions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_bMappedIndices_set(void * jarg1, unsigned int jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool arg2 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bMappedIndices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_bMappedIndices_get(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool) ((arg1)->bMappedIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_triParts_set(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (std::vector< int > *)jarg2; 
  if (arg1) (arg1)->triParts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinPartition_triParts_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (std::vector< int > *)& ((arg1)->triParts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_HasVertices(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool)((nifly::NiSkinPartition const *)arg1)->HasVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_HasUVs(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool)((nifly::NiSkinPartition const *)arg1)->HasUVs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_HasNormals(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool)((nifly::NiSkinPartition const *)arg1)->HasNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_HasTangents(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool)((nifly::NiSkinPartition const *)arg1)->HasTangents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_HasVertexColors(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool)((nifly::NiSkinPartition const *)arg1)->HasVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_IsSkinned(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool)((nifly::NiSkinPartition const *)arg1)->IsSkinned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_HasEyeData(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool)((nifly::NiSkinPartition const *)arg1)->HasEyeData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_IsFullPrecision(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool)((nifly::NiSkinPartition const *)arg1)->IsFullPrecision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSkinPartition_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSkinPartition::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSkinPartition_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_Sync(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_notifyVerticesDelete(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< uint16_t > *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (std::vector< uint16_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return ;
  } 
  (arg1)->notifyVerticesDelete((std::vector< uint16_t > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_DeletePartitions(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->DeletePartitions((std::vector< int > const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_NiSkinPartition_RemoveEmptyPartitions(void * jarg1, void * jarg2) {
  int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< int > *arg2 = 0 ;
  int result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->RemoveEmptyPartitions(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_NiSkinPartition_ConvertStripsToTriangles(void * jarg1) {
  unsigned int jresult ;
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  bool result;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  result = (bool)(arg1)->ConvertStripsToTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PrepareTrueTriangles(void * jarg1) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  (arg1)->PrepareTrueTriangles();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PrepareVertexMapsAndTriangles(void * jarg1) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  (arg1)->PrepareVertexMapsAndTriangles();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_GenerateTriPartsFromTrueTriangles(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > const & type is null", 0);
    return ;
  } 
  (arg1)->GenerateTriPartsFromTrueTriangles((std::vector< nifly::Triangle > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_GenerateTrueTrianglesFromTriParts(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > const & type is null", 0);
    return ;
  } 
  (arg1)->GenerateTrueTrianglesFromTriParts((std::vector< nifly::Triangle > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinPartition_PrepareTriParts(void * jarg1, void * jarg2) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  std::vector< nifly::Triangle > *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  arg2 = (std::vector< nifly::Triangle > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::Triangle > const & type is null", 0);
    return ;
  } 
  (arg1)->PrepareTriParts((std::vector< nifly::Triangle > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSkinPartition() {
  void * jresult ;
  nifly::NiSkinPartition *result = 0 ;
  
  result = (nifly::NiSkinPartition *)new nifly::NiSkinPartition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSkinPartition(void * jarg1) {
  nifly::NiSkinPartition *arg1 = (nifly::NiSkinPartition *) 0 ;
  
  arg1 = (nifly::NiSkinPartition *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiBoneContainer_boneRefs_set(void * jarg1, void * jarg2) {
  nifly::NiBoneContainer *arg1 = (nifly::NiBoneContainer *) 0 ;
  nifly::NiBlockPtrArray< nifly::NiNode > *arg2 = (nifly::NiBlockPtrArray< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiBoneContainer *)jarg1; 
  arg2 = (nifly::NiBlockPtrArray< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->boneRefs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiBoneContainer_boneRefs_get(void * jarg1) {
  void * jresult ;
  nifly::NiBoneContainer *arg1 = (nifly::NiBoneContainer *) 0 ;
  nifly::NiBlockPtrArray< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::NiBoneContainer *)jarg1; 
  result = (nifly::NiBlockPtrArray< nifly::NiNode > *)& ((arg1)->boneRefs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiBoneContainer() {
  void * jresult ;
  nifly::NiBoneContainer *result = 0 ;
  
  result = (nifly::NiBoneContainer *)new nifly::NiBoneContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiBoneContainer(void * jarg1) {
  nifly::NiBoneContainer *arg1 = (nifly::NiBoneContainer *) 0 ;
  
  arg1 = (nifly::NiBoneContainer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinInstance_dataRef_set(void * jarg1, void * jarg2) {
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  nifly::NiBlockRef< nifly::NiSkinData > *arg2 = (nifly::NiBlockRef< nifly::NiSkinData > *) 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiSkinData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinInstance_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  nifly::NiBlockRef< nifly::NiSkinData > *result = 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiSkinData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinInstance_skinPartitionRef_set(void * jarg1, void * jarg2) {
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  nifly::NiBlockRef< nifly::NiSkinPartition > *arg2 = (nifly::NiBlockRef< nifly::NiSkinPartition > *) 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiSkinPartition > *)jarg2; 
  if (arg1) (arg1)->skinPartitionRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinInstance_skinPartitionRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  nifly::NiBlockRef< nifly::NiSkinPartition > *result = 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiSkinPartition > *)& ((arg1)->skinPartitionRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinInstance_targetRef_set(void * jarg1, void * jarg2) {
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *arg2 = (nifly::NiBlockPtr< nifly::NiNode > *) 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiNode > *)jarg2; 
  if (arg1) (arg1)->targetRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_NiSkinInstance_targetRef_get(void * jarg1) {
  void * jresult ;
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  nifly::NiBlockPtr< nifly::NiNode > *result = 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiNode > *)& ((arg1)->targetRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSkinInstance_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::NiSkinInstance::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_NiSkinInstance_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinInstance_Sync(void * jarg1, void * jarg2) {
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinInstance_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinInstance_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_NiSkinInstance_GetPtrs(void * jarg1, void * jarg2) {
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_NiSkinInstance() {
  void * jresult ;
  nifly::NiSkinInstance *result = 0 ;
  
  result = (nifly::NiSkinInstance *)new nifly::NiSkinInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_NiSkinInstance(void * jarg1) {
  nifly::NiSkinInstance *arg1 = (nifly::NiSkinInstance *) 0 ;
  
  arg1 = (nifly::NiSkinInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_PartitionInfo_flags_set(void * jarg1, int jarg2) {
  nifly::BSDismemberSkinInstance::PartitionInfo *arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *) 0 ;
  nifly::PartitionFlags arg2 ;
  
  arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *)jarg1; 
  arg2 = (nifly::PartitionFlags)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_PartitionInfo_flags_get(void * jarg1) {
  int jresult ;
  nifly::BSDismemberSkinInstance::PartitionInfo *arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *) 0 ;
  nifly::PartitionFlags result;
  
  arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *)jarg1; 
  result = (nifly::PartitionFlags) ((arg1)->flags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_PartitionInfo_partID_set(void * jarg1, unsigned short jarg2) {
  nifly::BSDismemberSkinInstance::PartitionInfo *arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->partID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_PartitionInfo_partID_get(void * jarg1) {
  unsigned short jresult ;
  nifly::BSDismemberSkinInstance::PartitionInfo *arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *) 0 ;
  uint16_t result;
  
  arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *)jarg1; 
  result = (uint16_t) ((arg1)->partID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSDismemberSkinInstance_PartitionInfo() {
  void * jresult ;
  nifly::BSDismemberSkinInstance::PartitionInfo *result = 0 ;
  
  result = (nifly::BSDismemberSkinInstance::PartitionInfo *)new nifly::BSDismemberSkinInstance::PartitionInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSDismemberSkinInstance_PartitionInfo(void * jarg1) {
  nifly::BSDismemberSkinInstance::PartitionInfo *arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *) 0 ;
  
  arg1 = (nifly::BSDismemberSkinInstance::PartitionInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSDismemberSkinInstance::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_Sync(void * jarg1, void * jarg2) {
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_GetNumPartitions(void * jarg1) {
  int jresult ;
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  int result;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  result = (int)((nifly::BSDismemberSkinInstance const *)arg1)->GetNumPartitions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_GetPartitions(void * jarg1) {
  void * jresult ;
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  SwigValueWrapper< std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > > result;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  result = ((nifly::BSDismemberSkinInstance const *)arg1)->GetPartitions();
  jresult = new std::vector< nifly::BSDismemberSkinInstance::PartitionInfo >((const std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_AddPartition(void * jarg1, void * jarg2) {
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  nifly::BSDismemberSkinInstance::PartitionInfo *arg2 = 0 ;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  arg2 = (nifly::BSDismemberSkinInstance::PartitionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::BSDismemberSkinInstance::PartitionInfo const & type is null", 0);
    return ;
  } 
  (arg1)->AddPartition((nifly::BSDismemberSkinInstance::PartitionInfo const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_RemovePartition(void * jarg1, int jarg2) {
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemovePartition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_DeletePartitions(void * jarg1, void * jarg2) {
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->DeletePartitions((std::vector< int > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_ClearPartitions(void * jarg1) {
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  (arg1)->ClearPartitions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSDismemberSkinInstance_SetPartitions(void * jarg1, void * jarg2) {
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > *arg2 = 0 ;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  arg2 = (std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > const & type is null", 0);
    return ;
  } 
  (arg1)->SetPartitions((std::vector< nifly::BSDismemberSkinInstance::PartitionInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSDismemberSkinInstance() {
  void * jresult ;
  nifly::BSDismemberSkinInstance *result = 0 ;
  
  result = (nifly::BSDismemberSkinInstance *)new nifly::BSDismemberSkinInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSDismemberSkinInstance(void * jarg1) {
  nifly::BSDismemberSkinInstance *arg1 = (nifly::BSDismemberSkinInstance *) 0 ;
  
  arg1 = (nifly::BSDismemberSkinInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinBoneData_nBones_set(void * jarg1, unsigned int jarg2) {
  nifly::BSSkinBoneData *arg1 = (nifly::BSSkinBoneData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::BSSkinBoneData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nBones = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_BSSkinBoneData_nBones_get(void * jarg1) {
  unsigned int jresult ;
  nifly::BSSkinBoneData *arg1 = (nifly::BSSkinBoneData *) 0 ;
  uint32_t result;
  
  arg1 = (nifly::BSSkinBoneData *)jarg1; 
  result = (uint32_t) ((arg1)->nBones);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinBoneData_BoneData_bounds_set(void * jarg1, void * jarg2) {
  nifly::BSSkinBoneData::BoneData *arg1 = (nifly::BSSkinBoneData::BoneData *) 0 ;
  nifly::BoundingSphere *arg2 = (nifly::BoundingSphere *) 0 ;
  
  arg1 = (nifly::BSSkinBoneData::BoneData *)jarg1; 
  arg2 = (nifly::BoundingSphere *)jarg2; 
  if (arg1) (arg1)->bounds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSkinBoneData_BoneData_bounds_get(void * jarg1) {
  void * jresult ;
  nifly::BSSkinBoneData::BoneData *arg1 = (nifly::BSSkinBoneData::BoneData *) 0 ;
  nifly::BoundingSphere *result = 0 ;
  
  arg1 = (nifly::BSSkinBoneData::BoneData *)jarg1; 
  result = (nifly::BoundingSphere *)& ((arg1)->bounds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinBoneData_BoneData_boneTransform_set(void * jarg1, void * jarg2) {
  nifly::BSSkinBoneData::BoneData *arg1 = (nifly::BSSkinBoneData::BoneData *) 0 ;
  nifly::MatTransform *arg2 = (nifly::MatTransform *) 0 ;
  
  arg1 = (nifly::BSSkinBoneData::BoneData *)jarg1; 
  arg2 = (nifly::MatTransform *)jarg2; 
  if (arg1) (arg1)->boneTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSkinBoneData_BoneData_boneTransform_get(void * jarg1) {
  void * jresult ;
  nifly::BSSkinBoneData::BoneData *arg1 = (nifly::BSSkinBoneData::BoneData *) 0 ;
  nifly::MatTransform *result = 0 ;
  
  arg1 = (nifly::BSSkinBoneData::BoneData *)jarg1; 
  result = (nifly::MatTransform *)& ((arg1)->boneTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSkinBoneData_BoneData() {
  void * jresult ;
  nifly::BSSkinBoneData::BoneData *result = 0 ;
  
  result = (nifly::BSSkinBoneData::BoneData *)new nifly::BSSkinBoneData::BoneData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSkinBoneData_BoneData(void * jarg1) {
  nifly::BSSkinBoneData::BoneData *arg1 = (nifly::BSSkinBoneData::BoneData *) 0 ;
  
  arg1 = (nifly::BSSkinBoneData::BoneData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinBoneData_boneXforms_set(void * jarg1, void * jarg2) {
  nifly::BSSkinBoneData *arg1 = (nifly::BSSkinBoneData *) 0 ;
  std::vector< nifly::BSSkinBoneData::BoneData > *arg2 = (std::vector< nifly::BSSkinBoneData::BoneData > *) 0 ;
  
  arg1 = (nifly::BSSkinBoneData *)jarg1; 
  arg2 = (std::vector< nifly::BSSkinBoneData::BoneData > *)jarg2; 
  if (arg1) (arg1)->boneXforms = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSkinBoneData_boneXforms_get(void * jarg1) {
  void * jresult ;
  nifly::BSSkinBoneData *arg1 = (nifly::BSSkinBoneData *) 0 ;
  std::vector< nifly::BSSkinBoneData::BoneData > *result = 0 ;
  
  arg1 = (nifly::BSSkinBoneData *)jarg1; 
  result = (std::vector< nifly::BSSkinBoneData::BoneData > *)& ((arg1)->boneXforms);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSkinBoneData_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSSkinBoneData::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSkinBoneData_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSSkinBoneData *arg1 = (nifly::BSSkinBoneData *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSSkinBoneData *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinBoneData_Sync(void * jarg1, void * jarg2) {
  nifly::BSSkinBoneData *arg1 = (nifly::BSSkinBoneData *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSSkinBoneData *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSkinBoneData() {
  void * jresult ;
  nifly::BSSkinBoneData *result = 0 ;
  
  result = (nifly::BSSkinBoneData *)new nifly::BSSkinBoneData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSkinBoneData(void * jarg1) {
  nifly::BSSkinBoneData *arg1 = (nifly::BSSkinBoneData *) 0 ;
  
  arg1 = (nifly::BSSkinBoneData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinInstance_targetRef_set(void * jarg1, void * jarg2) {
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  arg2 = (nifly::NiBlockPtr< nifly::NiAVObject > *)jarg2; 
  if (arg1) (arg1)->targetRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSkinInstance_targetRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  nifly::NiBlockPtr< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  result = (nifly::NiBlockPtr< nifly::NiAVObject > *)& ((arg1)->targetRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinInstance_dataRef_set(void * jarg1, void * jarg2) {
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  nifly::NiBlockRef< nifly::BSSkinBoneData > *arg2 = (nifly::NiBlockRef< nifly::BSSkinBoneData > *) 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::BSSkinBoneData > *)jarg2; 
  if (arg1) (arg1)->dataRef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSkinInstance_dataRef_get(void * jarg1) {
  void * jresult ;
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  nifly::NiBlockRef< nifly::BSSkinBoneData > *result = 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  result = (nifly::NiBlockRef< nifly::BSSkinBoneData > *)& ((arg1)->dataRef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinInstance_scales_set(void * jarg1, void * jarg2) {
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  nifly::NiVector< nifly::Vector3 > *arg2 = (nifly::NiVector< nifly::Vector3 > *) 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  arg2 = (nifly::NiVector< nifly::Vector3 > *)jarg2; 
  if (arg1) (arg1)->scales = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSSkinInstance_scales_get(void * jarg1) {
  void * jresult ;
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  nifly::NiVector< nifly::Vector3 > *result = 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  result = (nifly::NiVector< nifly::Vector3 > *)& ((arg1)->scales);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSkinInstance_BlockName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)nifly::BSSkinInstance::BlockName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_nifly_BSSkinInstance_GetBlockName(void * jarg1) {
  char * jresult ;
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  char *result = 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  result = (char *)(arg1)->GetBlockName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinInstance_Sync(void * jarg1, void * jarg2) {
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinInstance_GetChildRefs(void * jarg1, void * jarg2) {
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildRefs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinInstance_GetChildIndices(void * jarg1, void * jarg2) {
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetChildIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSSkinInstance_GetPtrs(void * jarg1, void * jarg2) {
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetPtrs(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSSkinInstance() {
  void * jresult ;
  nifly::BSSkinInstance *result = 0 ;
  
  result = (nifly::BSSkinInstance *)new nifly::BSSkinInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSSkinInstance(void * jarg1) {
  nifly::BSSkinInstance *arg1 = (nifly::BSSkinInstance *) 0 ;
  
  arg1 = (nifly::BSSkinInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_nifly_DESC_MASK_VERT_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)(uint64_t)nifly::DESC_MASK_VERT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_nifly_DESC_MASK_UVS_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)(uint64_t)nifly::DESC_MASK_UVS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_nifly_DESC_MASK_NBT_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)(uint64_t)nifly::DESC_MASK_NBT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_nifly_DESC_MASK_SKCOL_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)(uint64_t)nifly::DESC_MASK_SKCOL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_nifly_DESC_MASK_DATA_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)(uint64_t)nifly::DESC_MASK_DATA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_nifly_DESC_MASK_OFFSET_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)(uint64_t)nifly::DESC_MASK_OFFSET;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_nifly_DESC_MASK_FLAGS_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)(uint64_t)nifly::DESC_MASK_FLAGS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexDesc_SetFlag(void * jarg1, int jarg2) {
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  nifly::VertexFlags arg2 ;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  arg2 = (nifly::VertexFlags)jarg2; 
  (arg1)->SetFlag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexDesc_RemoveFlag(void * jarg1, int jarg2) {
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  nifly::VertexFlags arg2 ;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  arg2 = (nifly::VertexFlags)jarg2; 
  (arg1)->RemoveFlag(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_VertexDesc_HasFlag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  nifly::VertexFlags arg2 ;
  bool result;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  arg2 = (nifly::VertexFlags)jarg2; 
  result = (bool)((nifly::VertexDesc const *)arg1)->HasFlag(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexDesc_SetSize(void * jarg1, unsigned int jarg2) {
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexDesc_MakeDynamic(void * jarg1) {
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  (arg1)->MakeDynamic();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_VertexDesc_GetAttributeOffset(void * jarg1, int jarg2) {
  unsigned int jresult ;
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  nifly::VertexAttribute arg2 ;
  uint32_t result;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  arg2 = (nifly::VertexAttribute)jarg2; 
  result = (uint32_t)((nifly::VertexDesc const *)arg1)->GetAttributeOffset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexDesc_SetAttributeOffset(void * jarg1, int jarg2, unsigned int jarg3) {
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  nifly::VertexAttribute arg2 ;
  uint32_t arg3 ;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  arg2 = (nifly::VertexAttribute)jarg2; 
  arg3 = (uint32_t)jarg3; 
  (arg1)->SetAttributeOffset(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexDesc_ClearAttributeOffsets(void * jarg1) {
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  (arg1)->ClearAttributeOffsets();
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_VertexDesc_GetFlags(void * jarg1) {
  int jresult ;
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  nifly::VertexFlags result;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  result = (nifly::VertexFlags)((nifly::VertexDesc const *)arg1)->GetFlags();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexDesc_SetFlags(void * jarg1, int jarg2) {
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  nifly::VertexFlags arg2 ;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  arg2 = (nifly::VertexFlags)jarg2; 
  (arg1)->SetFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_VertexDesc_Sync(void * jarg1, void * jarg2) {
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_VertexDesc() {
  void * jresult ;
  nifly::VertexDesc *result = 0 ;
  
  result = (nifly::VertexDesc *)new nifly::VertexDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_VertexDesc(void * jarg1) {
  nifly::VertexDesc *arg1 = (nifly::VertexDesc *) 0 ;
  
  arg1 = (nifly::VertexDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_vert_set(void * jarg1, void * jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  nifly::Vector3 *arg2 = (nifly::Vector3 *) 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (nifly::Vector3 *)jarg2; 
  if (arg1) (arg1)->vert = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSVertexData_vert_get(void * jarg1) {
  void * jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  nifly::Vector3 *result = 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (nifly::Vector3 *)& ((arg1)->vert);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_bitangentX_set(void * jarg1, float jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bitangentX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSVertexData_bitangentX_get(void * jarg1) {
  float jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  float result;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (float) ((arg1)->bitangentX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_uv_set(void * jarg1, void * jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  nifly::Vector2 *arg2 = (nifly::Vector2 *) 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (nifly::Vector2 *)jarg2; 
  if (arg1) (arg1)->uv = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSVertexData_uv_get(void * jarg1) {
  void * jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  nifly::Vector2 *result = 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (nifly::Vector2 *)& ((arg1)->uv);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_normal_set(void * jarg1, void * jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->normal;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSVertexData_normal_get(void * jarg1) {
  void * jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->normal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_bitangentY_set(void * jarg1, unsigned char jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bitangentY = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BSVertexData_bitangentY_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (uint8_t) ((arg1)->bitangentY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_tangent_set(void * jarg1, void * jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->tangent;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSVertexData_tangent_get(void * jarg1) {
  void * jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->tangent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_bitangentZ_set(void * jarg1, unsigned char jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bitangentZ = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_nifly_BSVertexData_bitangentZ_get(void * jarg1) {
  unsigned char jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t result;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (uint8_t) ((arg1)->bitangentZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_colorData_set(void * jarg1, void * jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->colorData;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSVertexData_colorData_get(void * jarg1) {
  void * jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->colorData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_weights_set(void * jarg1, void * jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  float *arg2 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->weights;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSVertexData_weights_get(void * jarg1) {
  void * jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  float *result = 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (float *)(float *) ((arg1)->weights);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_weightBones_set(void * jarg1, void * jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->weightBones;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BSVertexData_weightBones_get(void * jarg1) {
  void * jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->weightBones);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BSVertexData_eyeData_set(void * jarg1, float jarg2) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  float arg2 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->eyeData = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_nifly_BSVertexData_eyeData_get(void * jarg1) {
  float jresult ;
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  float result;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  result = (float) ((arg1)->eyeData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BSVertexData() {
  void * jresult ;
  nifly::BSVertexData *result = 0 ;
  
  result = (nifly::BSVertexData *)new nifly::BSVertexData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BSVertexData(void * jarg1) {
  nifly::BSVertexData *arg1 = (nifly::BSVertexData *) 0 ;
  
  arg1 = (nifly::BSVertexData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_StringRefVectorBase__SWIG_0() {
  void * jresult ;
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *result = 0 ;
  
  result = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)new nifly::NiVectorBase< nifly::NiStringRef,uint32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_StringRefVectorBase__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)new nifly::NiVectorBase< nifly::NiStringRef,uint32_t >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_StringRefVectorBase_size(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  unsigned int result;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  result = (unsigned int)((nifly::NiVectorBase< nifly::NiStringRef,uint32_t > const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_StringRefVectorBase_empty(void * jarg1) {
  unsigned int jresult ;
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  bool result;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  result = (bool)((nifly::NiVectorBase< nifly::NiStringRef,uint32_t > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefVectorBase_clear(void * jarg1) {
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StringRefVectorBase_begin(void * jarg1) {
  void * jresult ;
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiStringRef >::iterator > result;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  result = (arg1)->begin();
  jresult = new nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::iterator((const nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StringRefVectorBase_cbegin(void * jarg1) {
  void * jresult ;
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiStringRef >::const_iterator > result;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  result = ((nifly::NiVectorBase< nifly::NiStringRef,uint32_t > const *)arg1)->cbegin();
  jresult = new nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::const_iterator((const nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StringRefVectorBase_end(void * jarg1) {
  void * jresult ;
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiStringRef >::iterator > result;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  result = (arg1)->end();
  jresult = new nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::iterator((const nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StringRefVectorBase_cend(void * jarg1) {
  void * jresult ;
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiStringRef >::const_iterator > result;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  result = ((nifly::NiVectorBase< nifly::NiStringRef,uint32_t > const *)arg1)->cend();
  jresult = new nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::const_iterator((const nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefVectorBase_resize(void * jarg1, unsigned int jarg2) {
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StringRefVectorBase_erase(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< std::vector< nifly::NiStringRef >::iterator > result;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->erase(arg2);
  jresult = new nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::iterator((const nifly::NiVectorBase< nifly::NiStringRef,unsigned int >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_StringRefVectorBase(void * jarg1) {
  nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *) 0 ;
  
  arg1 = (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_StringRefVector__SWIG_0() {
  void * jresult ;
  nifly::NiStringRefVector< uint32_t > *result = 0 ;
  
  result = (nifly::NiStringRefVector< uint32_t > *)new nifly::NiStringRefVector< uint32_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_StringRefVector__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  nifly::NiStringRefVector< uint32_t > *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (nifly::NiStringRefVector< uint32_t > *)new nifly::NiStringRefVector< uint32_t >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefVector_Read(void * jarg1, void * jarg2) {
  nifly::NiStringRefVector< uint32_t > *arg1 = (nifly::NiStringRefVector< uint32_t > *) 0 ;
  nifly::NiIStream *arg2 = 0 ;
  
  arg1 = (nifly::NiStringRefVector< uint32_t > *)jarg1; 
  arg2 = (nifly::NiIStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiIStream & type is null", 0);
    return ;
  } 
  (arg1)->Read(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefVector_Write(void * jarg1, void * jarg2) {
  nifly::NiStringRefVector< uint32_t > *arg1 = (nifly::NiStringRefVector< uint32_t > *) 0 ;
  nifly::NiOStream *arg2 = 0 ;
  
  arg1 = (nifly::NiStringRefVector< uint32_t > *)jarg1; 
  arg2 = (nifly::NiOStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiOStream & type is null", 0);
    return ;
  } 
  (arg1)->Write(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefVector_Sync(void * jarg1, void * jarg2) {
  nifly::NiStringRefVector< uint32_t > *arg1 = (nifly::NiStringRefVector< uint32_t > *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiStringRefVector< uint32_t > *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_StringRefVector(void * jarg1) {
  nifly::NiStringRefVector< uint32_t > *arg1 = (nifly::NiStringRefVector< uint32_t > *) 0 ;
  
  arg1 = (nifly::NiStringRefVector< uint32_t > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_Clear(void * jarg1) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_Add(void * jarg1, void * jarg2) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  nifly::NiStringRef **arg2 = 0 ;
  nifly::NiStringRef *temp2 = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  temp2 = (nifly::NiStringRef *)jarg2;
  arg2 = (nifly::NiStringRef **)&temp2; 
  (arg1)->push_back((nifly::NiStringRef *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_StringRefPointerVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  std::vector< nifly::NiStringRef * >::size_type result;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  result = ((std::vector< nifly::NiStringRef * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_StringRefPointerVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  std::vector< nifly::NiStringRef * >::size_type result;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  result = ((std::vector< nifly::NiStringRef * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  std::vector< nifly::NiStringRef * >::size_type arg2 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_StringRefPointerVector__SWIG_0() {
  void * jresult ;
  std::vector< nifly::NiStringRef * > *result = 0 ;
  
  result = (std::vector< nifly::NiStringRef * > *)new std::vector< nifly::NiStringRef * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_StringRefPointerVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = 0 ;
  std::vector< nifly::NiStringRef * > *result = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< nifly::NiStringRef * > *)new std::vector< nifly::NiStringRef * >((std::vector< nifly::NiStringRef * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_StringRefPointerVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< nifly::NiStringRef * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< nifly::NiStringRef * > *)new_std_vector_Sl_nifly_NiStringRef_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StringRefPointerVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  nifly::NiStringRef *result = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (nifly::NiStringRef *)std_vector_Sl_nifly_NiStringRef_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StringRefPointerVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  std::vector< nifly::NiStringRef * >::value_type *result = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nifly::NiStringRef * >::value_type *) &std_vector_Sl_nifly_NiStringRef_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  nifly::NiStringRef **arg3 = 0 ;
  nifly::NiStringRef *temp3 = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (nifly::NiStringRef *)jarg3;
  arg3 = (nifly::NiStringRef **)&temp3; 
  try {
    std_vector_Sl_nifly_NiStringRef_Sm__Sg__setitem(arg1,arg2,(nifly::NiStringRef *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  std::vector< nifly::NiStringRef * > *arg2 = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (std::vector< nifly::NiStringRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_nifly_NiStringRef_Sm__Sg__AddRange(arg1,(std::vector< nifly::NiStringRef * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StringRefPointerVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< nifly::NiStringRef * > *result = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< nifly::NiStringRef * > *)std_vector_Sl_nifly_NiStringRef_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  nifly::NiStringRef **arg3 = 0 ;
  nifly::NiStringRef *temp3 = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (nifly::NiStringRef *)jarg3;
  arg3 = (nifly::NiStringRef **)&temp3; 
  try {
    std_vector_Sl_nifly_NiStringRef_Sm__Sg__Insert(arg1,arg2,(nifly::NiStringRef *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  std::vector< nifly::NiStringRef * > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< nifly::NiStringRef * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiStringRef_Sm__Sg__InsertRange(arg1,arg2,(std::vector< nifly::NiStringRef * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_nifly_NiStringRef_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_nifly_NiStringRef_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_StringRefPointerVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  nifly::NiStringRef **arg1 = 0 ;
  int arg2 ;
  nifly::NiStringRef *temp1 = 0 ;
  std::vector< nifly::NiStringRef * > *result = 0 ;
  
  temp1 = (nifly::NiStringRef *)jarg1;
  arg1 = (nifly::NiStringRef **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nifly::NiStringRef * > *)std_vector_Sl_nifly_NiStringRef_Sm__Sg__Repeat((nifly::NiStringRef *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  std_vector_Sl_nifly_NiStringRef_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_nifly_NiStringRef_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_StringRefPointerVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  int arg2 ;
  std::vector< nifly::NiStringRef * > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< nifly::NiStringRef * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiStringRef * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiStringRef_Sm__Sg__SetRange(arg1,arg2,(std::vector< nifly::NiStringRef * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_StringRefPointerVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  nifly::NiStringRef **arg2 = 0 ;
  nifly::NiStringRef *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  temp2 = (nifly::NiStringRef *)jarg2;
  arg2 = (nifly::NiStringRef **)&temp2; 
  result = (bool)std_vector_Sl_nifly_NiStringRef_Sm__Sg__Contains(arg1,(nifly::NiStringRef *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_StringRefPointerVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  nifly::NiStringRef **arg2 = 0 ;
  nifly::NiStringRef *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  temp2 = (nifly::NiStringRef *)jarg2;
  arg2 = (nifly::NiStringRef **)&temp2; 
  result = (int)std_vector_Sl_nifly_NiStringRef_Sm__Sg__IndexOf(arg1,(nifly::NiStringRef *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_StringRefPointerVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  nifly::NiStringRef **arg2 = 0 ;
  nifly::NiStringRef *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  temp2 = (nifly::NiStringRef *)jarg2;
  arg2 = (nifly::NiStringRef **)&temp2; 
  result = (int)std_vector_Sl_nifly_NiStringRef_Sm__Sg__LastIndexOf(arg1,(nifly::NiStringRef *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_nifly_StringRefPointerVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  nifly::NiStringRef **arg2 = 0 ;
  nifly::NiStringRef *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  temp2 = (nifly::NiStringRef *)jarg2;
  arg2 = (nifly::NiStringRef **)&temp2; 
  result = (bool)std_vector_Sl_nifly_NiStringRef_Sm__Sg__Remove(arg1,(nifly::NiStringRef *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_StringRefPointerVector(void * jarg1) {
  std::vector< nifly::NiStringRef * > *arg1 = (std::vector< nifly::NiStringRef * > *) 0 ;
  
  arg1 = (std::vector< nifly::NiStringRef * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_begin(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  result = (arg1)->begin();
  jresult = new nifly::NiBlockRefArray< nifly::NiAVObject >::iterator((const nifly::NiBlockRefArray< nifly::NiAVObject >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_end(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  result = (arg1)->end();
  jresult = new nifly::NiBlockRefArray< nifly::NiAVObject >::iterator((const nifly::NiBlockRefArray< nifly::NiAVObject >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_cbegin(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::const_iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  result = ((nifly::NiBlockRefArray< nifly::NiAVObject > const *)arg1)->cbegin();
  jresult = new nifly::NiBlockRefArray< nifly::NiAVObject >::const_iterator((const nifly::NiBlockRefArray< nifly::NiAVObject >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_cend(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::const_iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  result = ((nifly::NiBlockRefArray< nifly::NiAVObject > const *)arg1)->cend();
  jresult = new nifly::NiBlockRefArray< nifly::NiAVObject >::const_iterator((const nifly::NiBlockRefArray< nifly::NiAVObject >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_GetRefs(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *result = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  result = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) &((nifly::NiBlockRefArray< nifly::NiAVObject > const *)arg1)->GetRefs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_Clear(void * jarg1) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_SetSize(void * jarg1, int jarg2) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_Sync(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_AddBlockRef(void * jarg1, int jarg2) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AddBlockRef(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_GetBlockRef(void * jarg1, int jarg2) {
  int jresult ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((nifly::NiBlockRefArray< nifly::NiAVObject > const *)arg1)->GetBlockRef(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_SetBlockRef(void * jarg1, int jarg2, int jarg3) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBlockRef(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_RemoveBlockRef(void * jarg1, int jarg2) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveBlockRef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_GetIndices(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_GetIndexPtrs(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetIndexPtrs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_SetIndices(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->SetIndices((std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefArrayAVObject() {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiAVObject > *result = 0 ;
  
  result = (nifly::NiBlockRefArray< nifly::NiAVObject > *)new nifly::NiBlockRefArray< nifly::NiAVObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BlockRefArrayAVObject(void * jarg1) {
  nifly::NiBlockRefArray< nifly::NiAVObject > *arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiAVObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_Clear(void * jarg1) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_Add(void * jarg1, void * jarg2) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  nifly::NiBlockRef< nifly::NiAVObject > *arg2 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiAVObject > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((nifly::NiBlockRef< nifly::NiAVObject > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::size_type result;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  result = ((std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::size_type result;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  result = ((std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::size_type arg2 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefAVObjectVector__SWIG_0() {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *result = 0 ;
  
  result = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)new std::vector< nifly::NiBlockRef< nifly::NiAVObject > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefAVObjectVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *result = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)new std::vector< nifly::NiBlockRef< nifly::NiAVObject > >((std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefAVObjectVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)new_std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  nifly::NiBlockRef< nifly::NiAVObject > result;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new nifly::NiBlockRef< nifly::NiAVObject >((const nifly::NiBlockRef< nifly::NiAVObject > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::value_type *result = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > >::value_type *) &std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  nifly::NiBlockRef< nifly::NiAVObject > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiAVObject > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__setitem(arg1,arg2,(nifly::NiBlockRef< nifly::NiAVObject > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg2 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__AddRange(arg1,(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *result = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  nifly::NiBlockRef< nifly::NiAVObject > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiAVObject > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__Insert(arg1,arg2,(nifly::NiBlockRef< nifly::NiAVObject > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__InsertRange(arg1,arg2,(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  nifly::NiBlockRef< nifly::NiAVObject > *arg1 = 0 ;
  int arg2 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *result = 0 ;
  
  arg1 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiAVObject > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__Repeat((nifly::NiBlockRef< nifly::NiAVObject > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObjectVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  int arg2 ;
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiAVObject_Sg__Sg__SetRange(arg1,arg2,(std::vector< nifly::NiBlockRef< nifly::NiAVObject > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BlockRefAVObjectVector(void * jarg1) {
  std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *) 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiAVObject > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefAVObject__SWIG_0() {
  void * jresult ;
  nifly::NiBlockRef< nifly::NiAVObject > *result = 0 ;
  
  result = (nifly::NiBlockRef< nifly::NiAVObject > *)new nifly::NiBlockRef< nifly::NiAVObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefAVObject__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  nifly::NiBlockRef< nifly::NiAVObject > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiAVObject > *)new nifly::NiBlockRef< nifly::NiAVObject >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefAVObject_Sync(void * jarg1, void * jarg2) {
  nifly::NiBlockRef< nifly::NiAVObject > *arg1 = (nifly::NiBlockRef< nifly::NiAVObject > *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BlockRefAVObject(void * jarg1) {
  nifly::NiBlockRef< nifly::NiAVObject > *arg1 = (nifly::NiBlockRef< nifly::NiAVObject > *) 0 ;
  
  arg1 = (nifly::NiBlockRef< nifly::NiAVObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_begin(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiProperty > >::iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  result = (arg1)->begin();
  jresult = new nifly::NiBlockRefArray< nifly::NiProperty >::iterator((const nifly::NiBlockRefArray< nifly::NiProperty >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_end(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiProperty > >::iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  result = (arg1)->end();
  jresult = new nifly::NiBlockRefArray< nifly::NiProperty >::iterator((const nifly::NiBlockRefArray< nifly::NiProperty >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_cbegin(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiProperty > >::const_iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  result = ((nifly::NiBlockRefArray< nifly::NiProperty > const *)arg1)->cbegin();
  jresult = new nifly::NiBlockRefArray< nifly::NiProperty >::const_iterator((const nifly::NiBlockRefArray< nifly::NiProperty >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_cend(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiProperty > >::const_iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  result = ((nifly::NiBlockRefArray< nifly::NiProperty > const *)arg1)->cend();
  jresult = new nifly::NiBlockRefArray< nifly::NiProperty >::const_iterator((const nifly::NiBlockRefArray< nifly::NiProperty >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_GetRefs(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *result = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  result = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) &((nifly::NiBlockRefArray< nifly::NiProperty > const *)arg1)->GetRefs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_Clear(void * jarg1) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_SetSize(void * jarg1, int jarg2) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_AddBlockRef(void * jarg1, int jarg2) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AddBlockRef(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_GetBlockRef(void * jarg1, int jarg2) {
  int jresult ;
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((nifly::NiBlockRefArray< nifly::NiProperty > const *)arg1)->GetBlockRef(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_SetBlockRef(void * jarg1, int jarg2, int jarg3) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBlockRef(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_RemoveBlockRef(void * jarg1, int jarg2) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveBlockRef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_GetIndices(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_GetIndexPtrs(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetIndexPtrs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_SetIndices(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->SetIndices((std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefArrayProperty() {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiProperty > *result = 0 ;
  
  result = (nifly::NiBlockRefArray< nifly::NiProperty > *)new nifly::NiBlockRefArray< nifly::NiProperty >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BlockRefArrayProperty(void * jarg1) {
  nifly::NiBlockRefArray< nifly::NiProperty > *arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *) 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiProperty > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_Clear(void * jarg1) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_Add(void * jarg1, void * jarg2) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  nifly::NiBlockRef< nifly::NiProperty > *arg2 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (nifly::NiBlockRef< nifly::NiProperty > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiProperty > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((nifly::NiBlockRef< nifly::NiProperty > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > >::size_type result;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  result = ((std::vector< nifly::NiBlockRef< nifly::NiProperty > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > >::size_type result;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  result = ((std::vector< nifly::NiBlockRef< nifly::NiProperty > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > >::size_type arg2 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefPropertyVector__SWIG_0() {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *result = 0 ;
  
  result = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)new std::vector< nifly::NiBlockRef< nifly::NiProperty > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefPropertyVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *result = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiBlockRef< nifly::NiProperty > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)new std::vector< nifly::NiBlockRef< nifly::NiProperty > >((std::vector< nifly::NiBlockRef< nifly::NiProperty > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefPropertyVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)new_std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  nifly::NiBlockRef< nifly::NiProperty > result;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new nifly::NiBlockRef< nifly::NiProperty >((const nifly::NiBlockRef< nifly::NiProperty > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > >::value_type *result = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nifly::NiBlockRef< nifly::NiProperty > >::value_type *) &std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  nifly::NiBlockRef< nifly::NiProperty > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (nifly::NiBlockRef< nifly::NiProperty > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiProperty > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__setitem(arg1,arg2,(nifly::NiBlockRef< nifly::NiProperty > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg2 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiBlockRef< nifly::NiProperty > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__AddRange(arg1,(std::vector< nifly::NiBlockRef< nifly::NiProperty > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *result = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  nifly::NiBlockRef< nifly::NiProperty > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (nifly::NiBlockRef< nifly::NiProperty > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiProperty > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__Insert(arg1,arg2,(nifly::NiBlockRef< nifly::NiProperty > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiBlockRef< nifly::NiProperty > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__InsertRange(arg1,arg2,(std::vector< nifly::NiBlockRef< nifly::NiProperty > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  nifly::NiBlockRef< nifly::NiProperty > *arg1 = 0 ;
  int arg2 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *result = 0 ;
  
  arg1 = (nifly::NiBlockRef< nifly::NiProperty > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiBlockRef< nifly::NiProperty > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__Repeat((nifly::NiBlockRef< nifly::NiProperty > const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefPropertyVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  int arg2 ;
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg3 = 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< nifly::NiBlockRef< nifly::NiProperty > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_nifly_NiBlockRef_Sl_nifly_NiProperty_Sg__Sg__SetRange(arg1,arg2,(std::vector< nifly::NiBlockRef< nifly::NiProperty > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BlockRefPropertyVector(void * jarg1) {
  std::vector< nifly::NiBlockRef< nifly::NiProperty > > *arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *) 0 ;
  
  arg1 = (std::vector< nifly::NiBlockRef< nifly::NiProperty > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefProperty__SWIG_0() {
  void * jresult ;
  nifly::NiBlockRef< nifly::NiProperty > *result = 0 ;
  
  result = (nifly::NiBlockRef< nifly::NiProperty > *)new nifly::NiBlockRef< nifly::NiProperty >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefProperty__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  nifly::NiBlockRef< nifly::NiProperty > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (nifly::NiBlockRef< nifly::NiProperty > *)new nifly::NiBlockRef< nifly::NiProperty >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefProperty_Sync(void * jarg1, void * jarg2) {
  nifly::NiBlockRef< nifly::NiProperty > *arg1 = (nifly::NiBlockRef< nifly::NiProperty > *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRef< nifly::NiProperty > *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BlockRefProperty(void * jarg1) {
  nifly::NiBlockRef< nifly::NiProperty > *arg1 = (nifly::NiBlockRef< nifly::NiProperty > *) 0 ;
  
  arg1 = (nifly::NiBlockRef< nifly::NiProperty > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_begin(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiExtraData > >::iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  result = (arg1)->begin();
  jresult = new nifly::NiBlockRefArray< nifly::NiExtraData >::iterator((const nifly::NiBlockRefArray< nifly::NiExtraData >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_end(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiExtraData > >::iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  result = (arg1)->end();
  jresult = new nifly::NiBlockRefArray< nifly::NiExtraData >::iterator((const nifly::NiBlockRefArray< nifly::NiExtraData >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_cbegin(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiExtraData > >::const_iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  result = ((nifly::NiBlockRefArray< nifly::NiExtraData > const *)arg1)->cbegin();
  jresult = new nifly::NiBlockRefArray< nifly::NiExtraData >::const_iterator((const nifly::NiBlockRefArray< nifly::NiExtraData >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_cend(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  SwigValueWrapper< std::vector< nifly::NiBlockRef< nifly::NiExtraData > >::const_iterator > result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  result = ((nifly::NiBlockRefArray< nifly::NiExtraData > const *)arg1)->cend();
  jresult = new nifly::NiBlockRefArray< nifly::NiExtraData >::const_iterator((const nifly::NiBlockRefArray< nifly::NiExtraData >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_GetRefs(void * jarg1) {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  std::vector< nifly::NiBlockRef< nifly::NiExtraData > > *result = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  result = (std::vector< nifly::NiBlockRef< nifly::NiExtraData > > *) &((nifly::NiBlockRefArray< nifly::NiExtraData > const *)arg1)->GetRefs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_Clear(void * jarg1) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_SetSize(void * jarg1, int jarg2) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_Sync(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  nifly::NiStreamReversible *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  arg2 = (nifly::NiStreamReversible *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "nifly::NiStreamReversible & type is null", 0);
    return ;
  } 
  (arg1)->Sync(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_AddBlockRef(void * jarg1, int jarg2) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AddBlockRef(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_GetBlockRef(void * jarg1, int jarg2) {
  int jresult ;
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((nifly::NiBlockRefArray< nifly::NiExtraData > const *)arg1)->GetBlockRef(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_SetBlockRef(void * jarg1, int jarg2, int jarg3) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBlockRef(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_RemoveBlockRef(void * jarg1, int jarg2) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  int arg2 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveBlockRef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_GetIndices(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->GetIndices(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_GetIndexPtrs(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  std::set< nifly::NiRef * > *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  arg2 = (std::set< nifly::NiRef * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< nifly::NiRef * > & type is null", 0);
    return ;
  } 
  (arg1)->GetIndexPtrs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_SetIndices(void * jarg1, void * jarg2) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->SetIndices((std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_nifly_new_BlockRefArrayExtraData() {
  void * jresult ;
  nifly::NiBlockRefArray< nifly::NiExtraData > *result = 0 ;
  
  result = (nifly::NiBlockRefArray< nifly::NiExtraData > *)new nifly::NiBlockRefArray< nifly::NiExtraData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_nifly_delete_BlockRefArrayExtraData(void * jarg1) {
  nifly::NiBlockRefArray< nifly::NiExtraData > *arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *) 0 ;
  
  arg1 = (nifly::NiBlockRefArray< nifly::NiExtraData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT nifly::NiStreamBase * SWIGSTDCALL CSharp_nifly_NiIStream_SWIGUpcast(nifly::NiIStream *jarg1) {
    return (nifly::NiStreamBase *)jarg1;
}

SWIGEXPORT nifly::NiStreamBase * SWIGSTDCALL CSharp_nifly_NiOStream_SWIGUpcast(nifly::NiOStream *jarg1) {
    return (nifly::NiStreamBase *)jarg1;
}

SWIGEXPORT nifly::NiObject * SWIGSTDCALL CSharp_nifly_NiHeaderNiObject_SWIGUpcast(nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *jarg1) {
    return (nifly::NiObject *)jarg1;
}

SWIGEXPORT nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > * SWIGSTDCALL CSharp_nifly_NiHeader_SWIGUpcast(nifly::NiHeader *jarg1) {
    return (nifly::NiCloneable< nifly::NiHeader,nifly::NiObject > *)jarg1;
}

SWIGEXPORT nifly::NiObject * SWIGSTDCALL CSharp_nifly_NiUnknownNiObject_SWIGUpcast(nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *jarg1) {
    return (nifly::NiObject *)jarg1;
}

SWIGEXPORT nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > * SWIGSTDCALL CSharp_nifly_NiUnknown_SWIGUpcast(nifly::NiUnknown *jarg1) {
    return (nifly::NiCloneableStreamable< nifly::NiUnknown,nifly::NiObject > *)jarg1;
}

SWIGEXPORT nifly::NiObject * SWIGSTDCALL CSharp_nifly_NiObjectNETNiObject_SWIGUpcast(nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *jarg1) {
    return (nifly::NiObject *)jarg1;
}

SWIGEXPORT nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > * SWIGSTDCALL CSharp_nifly_NiObjectNET_SWIGUpcast(nifly::NiObjectNET *jarg1) {
    return (nifly::NiCloneableStreamable< nifly::NiObjectNET,nifly::NiObject > *)jarg1;
}

SWIGEXPORT nifly::NiObjectNET * SWIGSTDCALL CSharp_nifly_NiAVObjectNiObjectNET_SWIGUpcast(nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *jarg1) {
    return (nifly::NiObjectNET *)jarg1;
}

SWIGEXPORT nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > * SWIGSTDCALL CSharp_nifly_NiAVObject_SWIGUpcast(nifly::NiAVObject *jarg1) {
    return (nifly::NiCloneableStreamable< nifly::NiAVObject,nifly::NiObjectNET > *)jarg1;
}

SWIGEXPORT nifly::NiAVObject * SWIGSTDCALL CSharp_nifly_NiNodeNiAVObject_SWIGUpcast(nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *jarg1) {
    return (nifly::NiAVObject *)jarg1;
}

SWIGEXPORT nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > * SWIGSTDCALL CSharp_nifly_NiNode_SWIGUpcast(nifly::NiNode *jarg1) {
    return (nifly::NiCloneableStreamable< nifly::NiNode,nifly::NiAVObject > *)jarg1;
}

SWIGEXPORT nifly::NiNode * SWIGSTDCALL CSharp_nifly_BSFadeNodeNiNode_SWIGUpcast(nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *jarg1) {
    return (nifly::NiNode *)jarg1;
}

SWIGEXPORT nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > * SWIGSTDCALL CSharp_nifly_BSFadeNode_SWIGUpcast(nifly::BSFadeNode *jarg1) {
    return (nifly::NiCloneable< nifly::BSFadeNode,nifly::NiNode > *)jarg1;
}

SWIGEXPORT nifly::NiInterpolator * SWIGSTDCALL CSharp_nifly_NiKeyBasedInterpolator_SWIGUpcast(nifly::NiKeyBasedInterpolator *jarg1) {
    return (nifly::NiInterpolator *)jarg1;
}

SWIGEXPORT nifly::NiSingleInterpController * SWIGSTDCALL CSharp_nifly_NiBoolInterpController_SWIGUpcast(nifly::NiBoolInterpController *jarg1) {
    return (nifly::NiSingleInterpController *)jarg1;
}

SWIGEXPORT nifly::bhkLimitedForceConstraintMotor * SWIGSTDCALL CSharp_nifly_bhkPositionConstraintMotor_SWIGUpcast(nifly::bhkPositionConstraintMotor *jarg1) {
    return (nifly::bhkLimitedForceConstraintMotor *)jarg1;
}

SWIGEXPORT nifly::bhkLimitedForceConstraintMotor * SWIGSTDCALL CSharp_nifly_bhkVelocityConstraintMotor_SWIGUpcast(nifly::bhkVelocityConstraintMotor *jarg1) {
    return (nifly::bhkLimitedForceConstraintMotor *)jarg1;
}

SWIGEXPORT nifly::bhkLimitedForceConstraintMotor * SWIGSTDCALL CSharp_nifly_bhkSpringDamperConstraintMotor_SWIGUpcast(nifly::bhkSpringDamperConstraintMotor *jarg1) {
    return (nifly::bhkLimitedForceConstraintMotor *)jarg1;
}

SWIGEXPORT nifly::NiObject * SWIGSTDCALL CSharp_nifly_NiExtraDataNiObject_SWIGUpcast(nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *jarg1) {
    return (nifly::NiObject *)jarg1;
}

SWIGEXPORT nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > * SWIGSTDCALL CSharp_nifly_NiExtraData_SWIGUpcast(nifly::NiExtraData *jarg1) {
    return (nifly::NiCloneableStreamable< nifly::NiExtraData,nifly::NiObject > *)jarg1;
}

SWIGEXPORT nifly::NiExtraData * SWIGSTDCALL CSharp_nifly_NiStringExtraDataNiExtraData_SWIGUpcast(nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *jarg1) {
    return (nifly::NiExtraData *)jarg1;
}

SWIGEXPORT nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > * SWIGSTDCALL CSharp_nifly_NiStringExtraData_SWIGUpcast(nifly::NiStringExtraData *jarg1) {
    return (nifly::NiCloneableStreamable< nifly::NiStringExtraData,nifly::NiExtraData > *)jarg1;
}

SWIGEXPORT nifly::NiAVObject * SWIGSTDCALL CSharp_nifly_NiShapeNiAVObject_SWIGUpcast(nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *jarg1) {
    return (nifly::NiAVObject *)jarg1;
}

SWIGEXPORT nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > * SWIGSTDCALL CSharp_nifly_NiShape_SWIGUpcast(nifly::NiShape *jarg1) {
    return (nifly::NiCloneable< nifly::NiShape,nifly::NiAVObject > *)jarg1;
}

SWIGEXPORT nifly::NiVectorBase< nifly::NiStringRef,uint32_t > * SWIGSTDCALL CSharp_nifly_StringRefVector_SWIGUpcast(nifly::NiStringRefVector< uint32_t > *jarg1) {
    return (nifly::NiVectorBase< nifly::NiStringRef,uint32_t > *)jarg1;
}

SWIGEXPORT nifly::NiRefArray * SWIGSTDCALL CSharp_nifly_BlockRefArrayAVObject_SWIGUpcast(nifly::NiBlockRefArray< nifly::NiAVObject > *jarg1) {
    return (nifly::NiRefArray *)jarg1;
}

SWIGEXPORT nifly::NiRef * SWIGSTDCALL CSharp_nifly_BlockRefAVObject_SWIGUpcast(nifly::NiBlockRef< nifly::NiAVObject > *jarg1) {
    return (nifly::NiRef *)jarg1;
}

SWIGEXPORT nifly::NiRefArray * SWIGSTDCALL CSharp_nifly_BlockRefArrayProperty_SWIGUpcast(nifly::NiBlockRefArray< nifly::NiProperty > *jarg1) {
    return (nifly::NiRefArray *)jarg1;
}

SWIGEXPORT nifly::NiRef * SWIGSTDCALL CSharp_nifly_BlockRefProperty_SWIGUpcast(nifly::NiBlockRef< nifly::NiProperty > *jarg1) {
    return (nifly::NiRef *)jarg1;
}

SWIGEXPORT nifly::NiRefArray * SWIGSTDCALL CSharp_nifly_BlockRefArrayExtraData_SWIGUpcast(nifly::NiBlockRefArray< nifly::NiExtraData > *jarg1) {
    return (nifly::NiRefArray *)jarg1;
}

#ifdef __cplusplus
}
#endif

